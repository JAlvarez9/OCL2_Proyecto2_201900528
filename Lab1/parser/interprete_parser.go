// Code generated from Interprete.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // Interprete

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "LAB1/Clases/interfaces"
import "LAB1/Clases/expresion"
import "LAB1/Clases/expresion/Operaciones"
import "LAB1/Clases/expresion/Sentencias_Expr"
import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
import "LAB1/Clases/expresion/Arrays"
import "LAB1/Clases/expresion/Vector"
import "LAB1/Clases/expresion/Casteos"
import "LAB1/Clases/instruction"
import "LAB1/Clases/instruction/SentenciaControl"
import "LAB1/Clases/instruction/SentenciaCiclica"
import "LAB1/Clases/instruction/SentenciaTransferencia"
import "LAB1/Clases/instruction/SentenciaControl/Match"
import "LAB1/Clases/instruction/FuncionesVectores"
import "LAB1/Clases/instruction/FuncionesNativas"
import "LAB1/Clases/instruction/Structs"
import "LAB1/Clases/instruction/Modulos"
import "LAB1/Clases/Structs_inter"

import arrayList "github.com/colegno/arraylist"

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 80, 1409,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 3, 2, 3, 2, 3, 2, 3, 3, 7, 3, 109,
	10, 3, 12, 3, 14, 3, 112, 11, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5,
	4, 168, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 185, 10, 5, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 195, 10, 6, 12, 6, 14, 6, 198, 11, 6,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 217, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	7, 9, 235, 10, 9, 12, 9, 14, 9, 238, 11, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 259, 10, 10, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 386, 10, 11, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 397, 10,
	12, 12, 12, 14, 12, 400, 11, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	5, 13, 439, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 453, 10, 14, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 464, 10, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	7, 15, 478, 10, 15, 12, 15, 14, 15, 481, 11, 15, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5,
	16, 507, 10, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 547,
	10, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 583, 10, 18, 3, 19, 3, 19, 3, 19, 3,
	19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19,
	5, 19, 599, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 666, 10, 20, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21,
	701, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3,
	22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5,
	22, 732, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 5, 23, 744, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 768, 10, 24, 3, 25, 3,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 7, 25, 778, 10, 25, 12, 25,
	14, 25, 781, 11, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 797, 10, 26, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 807, 10, 27, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5,
	29, 830, 10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 846, 10, 30, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 875, 10, 31, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 899,
	10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	7, 34, 910, 10, 34, 12, 34, 14, 34, 913, 11, 34, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 924, 10, 35, 12, 35, 14,
	35, 927, 11, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 956,
	10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 973, 10, 37, 3, 38, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 7, 38, 983, 10, 38, 12, 38,
	14, 38, 986, 11, 38, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 5, 39, 1018, 10, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 7, 40, 1029, 10, 40, 12, 40, 14, 40, 1032, 11, 40,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1049, 10, 41, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5,
	44, 1085, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1144, 10, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 7, 45, 1171, 10, 45, 12, 45, 14, 45, 1174, 11,
	45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 7, 46,
	1185, 10, 46, 12, 46, 14, 46, 1188, 11, 46, 3, 47, 3, 47, 3, 47, 3, 47,
	3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1200, 10, 47, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5,
	48, 1266, 10, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 7,
	48, 1349, 10, 48, 12, 48, 14, 48, 1352, 11, 48, 3, 49, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 1364, 10, 49, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 5, 50, 1379, 10, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 1391, 10, 51, 12, 51, 14, 51, 1394,
	11, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 7, 52,
	1404, 10, 52, 12, 52, 14, 52, 1407, 11, 52, 3, 52, 2, 16, 10, 16, 22, 28,
	48, 66, 68, 74, 78, 88, 90, 94, 100, 102, 53, 2, 4, 6, 8, 10, 12, 14, 16,
	18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52,
	54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88,
	90, 92, 94, 96, 98, 100, 102, 2, 7, 4, 2, 22, 22, 24, 24, 4, 2, 23, 23,
	25, 25, 3, 2, 29, 34, 3, 2, 36, 37, 3, 2, 38, 39, 2, 1501, 2, 104, 3, 2,
	2, 2, 4, 110, 3, 2, 2, 2, 6, 167, 3, 2, 2, 2, 8, 184, 3, 2, 2, 2, 10, 186,
	3, 2, 2, 2, 12, 216, 3, 2, 2, 2, 14, 218, 3, 2, 2, 2, 16, 225, 3, 2, 2,
	2, 18, 258, 3, 2, 2, 2, 20, 385, 3, 2, 2, 2, 22, 387, 3, 2, 2, 2, 24, 438,
	3, 2, 2, 2, 26, 452, 3, 2, 2, 2, 28, 463, 3, 2, 2, 2, 30, 506, 3, 2, 2,
	2, 32, 546, 3, 2, 2, 2, 34, 582, 3, 2, 2, 2, 36, 598, 3, 2, 2, 2, 38, 665,
	3, 2, 2, 2, 40, 700, 3, 2, 2, 2, 42, 731, 3, 2, 2, 2, 44, 743, 3, 2, 2,
	2, 46, 767, 3, 2, 2, 2, 48, 769, 3, 2, 2, 2, 50, 796, 3, 2, 2, 2, 52, 806,
	3, 2, 2, 2, 54, 808, 3, 2, 2, 2, 56, 829, 3, 2, 2, 2, 58, 845, 3, 2, 2,
	2, 60, 874, 3, 2, 2, 2, 62, 876, 3, 2, 2, 2, 64, 898, 3, 2, 2, 2, 66, 900,
	3, 2, 2, 2, 68, 914, 3, 2, 2, 2, 70, 955, 3, 2, 2, 2, 72, 972, 3, 2, 2,
	2, 74, 974, 3, 2, 2, 2, 76, 1017, 3, 2, 2, 2, 78, 1019, 3, 2, 2, 2, 80,
	1048, 3, 2, 2, 2, 82, 1050, 3, 2, 2, 2, 84, 1056, 3, 2, 2, 2, 86, 1084,
	3, 2, 2, 2, 88, 1143, 3, 2, 2, 2, 90, 1175, 3, 2, 2, 2, 92, 1199, 3, 2,
	2, 2, 94, 1265, 3, 2, 2, 2, 96, 1363, 3, 2, 2, 2, 98, 1378, 3, 2, 2, 2,
	100, 1380, 3, 2, 2, 2, 102, 1395, 3, 2, 2, 2, 104, 105, 5, 4, 3, 2, 105,
	106, 8, 2, 1, 2, 106, 3, 3, 2, 2, 2, 107, 109, 5, 6, 4, 2, 108, 107, 3,
	2, 2, 2, 109, 112, 3, 2, 2, 2, 110, 108, 3, 2, 2, 2, 110, 111, 3, 2, 2,
	2, 111, 113, 3, 2, 2, 2, 112, 110, 3, 2, 2, 2, 113, 114, 8, 3, 1, 2, 114,
	5, 3, 2, 2, 2, 115, 116, 5, 64, 33, 2, 116, 117, 7, 15, 2, 2, 117, 118,
	8, 4, 1, 2, 118, 168, 3, 2, 2, 2, 119, 120, 5, 64, 33, 2, 120, 121, 8,
	4, 1, 2, 121, 168, 3, 2, 2, 2, 122, 123, 5, 32, 17, 2, 123, 124, 8, 4,
	1, 2, 124, 168, 3, 2, 2, 2, 125, 126, 5, 38, 20, 2, 126, 127, 8, 4, 1,
	2, 127, 168, 3, 2, 2, 2, 128, 129, 5, 34, 18, 2, 129, 130, 8, 4, 1, 2,
	130, 168, 3, 2, 2, 2, 131, 132, 5, 58, 30, 2, 132, 133, 8, 4, 1, 2, 133,
	168, 3, 2, 2, 2, 134, 135, 5, 70, 36, 2, 135, 136, 8, 4, 1, 2, 136, 168,
	3, 2, 2, 2, 137, 138, 5, 82, 42, 2, 138, 139, 8, 4, 1, 2, 139, 168, 3,
	2, 2, 2, 140, 141, 5, 84, 43, 2, 141, 142, 8, 4, 1, 2, 142, 168, 3, 2,
	2, 2, 143, 144, 5, 72, 37, 2, 144, 145, 8, 4, 1, 2, 145, 168, 3, 2, 2,
	2, 146, 147, 5, 42, 22, 2, 147, 148, 8, 4, 1, 2, 148, 168, 3, 2, 2, 2,
	149, 150, 5, 86, 44, 2, 150, 151, 8, 4, 1, 2, 151, 168, 3, 2, 2, 2, 152,
	153, 5, 30, 16, 2, 153, 154, 8, 4, 1, 2, 154, 168, 3, 2, 2, 2, 155, 156,
	5, 20, 11, 2, 156, 157, 8, 4, 1, 2, 157, 168, 3, 2, 2, 2, 158, 159, 5,
	26, 14, 2, 159, 160, 8, 4, 1, 2, 160, 168, 3, 2, 2, 2, 161, 162, 5, 14,
	8, 2, 162, 163, 8, 4, 1, 2, 163, 168, 3, 2, 2, 2, 164, 165, 5, 8, 5, 2,
	165, 166, 8, 4, 1, 2, 166, 168, 3, 2, 2, 2, 167, 115, 3, 2, 2, 2, 167,
	119, 3, 2, 2, 2, 167, 122, 3, 2, 2, 2, 167, 125, 3, 2, 2, 2, 167, 128,
	3, 2, 2, 2, 167, 131, 3, 2, 2, 2, 167, 134, 3, 2, 2, 2, 167, 137, 3, 2,
	2, 2, 167, 140, 3, 2, 2, 2, 167, 143, 3, 2, 2, 2, 167, 146, 3, 2, 2, 2,
	167, 149, 3, 2, 2, 2, 167, 152, 3, 2, 2, 2, 167, 155, 3, 2, 2, 2, 167,
	158, 3, 2, 2, 2, 167, 161, 3, 2, 2, 2, 167, 164, 3, 2, 2, 2, 168, 7, 3,
	2, 2, 2, 169, 170, 7, 77, 2, 2, 170, 171, 7, 78, 2, 2, 171, 172, 7, 79,
	2, 2, 172, 173, 7, 11, 2, 2, 173, 174, 5, 10, 6, 2, 174, 175, 7, 12, 2,
	2, 175, 176, 8, 5, 1, 2, 176, 185, 3, 2, 2, 2, 177, 178, 7, 78, 2, 2, 178,
	179, 7, 79, 2, 2, 179, 180, 7, 11, 2, 2, 180, 181, 5, 10, 6, 2, 181, 182,
	7, 12, 2, 2, 182, 183, 8, 5, 1, 2, 183, 185, 3, 2, 2, 2, 184, 169, 3, 2,
	2, 2, 184, 177, 3, 2, 2, 2, 185, 9, 3, 2, 2, 2, 186, 187, 8, 6, 1, 2, 187,
	188, 5, 12, 7, 2, 188, 189, 8, 6, 1, 2, 189, 196, 3, 2, 2, 2, 190, 191,
	12, 4, 2, 2, 191, 192, 5, 12, 7, 2, 192, 193, 8, 6, 1, 2, 193, 195, 3,
	2, 2, 2, 194, 190, 3, 2, 2, 2, 195, 198, 3, 2, 2, 2, 196, 194, 3, 2, 2,
	2, 196, 197, 3, 2, 2, 2, 197, 11, 3, 2, 2, 2, 198, 196, 3, 2, 2, 2, 199,
	200, 5, 8, 5, 2, 200, 201, 8, 7, 1, 2, 201, 217, 3, 2, 2, 2, 202, 203,
	7, 77, 2, 2, 203, 204, 5, 20, 11, 2, 204, 205, 8, 7, 1, 2, 205, 217, 3,
	2, 2, 2, 206, 207, 5, 20, 11, 2, 207, 208, 8, 7, 1, 2, 208, 217, 3, 2,
	2, 2, 209, 210, 7, 77, 2, 2, 210, 211, 5, 14, 8, 2, 211, 212, 8, 7, 1,
	2, 212, 217, 3, 2, 2, 2, 213, 214, 5, 14, 8, 2, 214, 215, 8, 7, 1, 2, 215,
	217, 3, 2, 2, 2, 216, 199, 3, 2, 2, 2, 216, 202, 3, 2, 2, 2, 216, 206,
	3, 2, 2, 2, 216, 209, 3, 2, 2, 2, 216, 213, 3, 2, 2, 2, 217, 13, 3, 2,
	2, 2, 218, 219, 7, 58, 2, 2, 219, 220, 7, 79, 2, 2, 220, 221, 7, 11, 2,
	2, 221, 222, 5, 16, 9, 2, 222, 223, 7, 12, 2, 2, 223, 224, 8, 8, 1, 2,
	224, 15, 3, 2, 2, 2, 225, 226, 8, 9, 1, 2, 226, 227, 5, 18, 10, 2, 227,
	228, 8, 9, 1, 2, 228, 236, 3, 2, 2, 2, 229, 230, 12, 4, 2, 2, 230, 231,
	7, 17, 2, 2, 231, 232, 5, 18, 10, 2, 232, 233, 8, 9, 1, 2, 233, 235, 3,
	2, 2, 2, 234, 229, 3, 2, 2, 2, 235, 238, 3, 2, 2, 2, 236, 234, 3, 2, 2,
	2, 236, 237, 3, 2, 2, 2, 237, 17, 3, 2, 2, 2, 238, 236, 3, 2, 2, 2, 239,
	240, 7, 79, 2, 2, 240, 241, 7, 16, 2, 2, 241, 242, 5, 36, 19, 2, 242, 243,
	8, 10, 1, 2, 243, 259, 3, 2, 2, 2, 244, 245, 7, 79, 2, 2, 245, 246, 7,
	16, 2, 2, 246, 247, 5, 38, 20, 2, 247, 248, 8, 10, 1, 2, 248, 259, 3, 2,
	2, 2, 249, 250, 7, 79, 2, 2, 250, 251, 7, 16, 2, 2, 251, 252, 5, 56, 29,
	2, 252, 253, 8, 10, 1, 2, 253, 259, 3, 2, 2, 2, 254, 255, 7, 79, 2, 2,
	255, 256, 7, 16, 2, 2, 256, 257, 7, 79, 2, 2, 257, 259, 8, 10, 1, 2, 258,
	239, 3, 2, 2, 2, 258, 244, 3, 2, 2, 2, 258, 249, 3, 2, 2, 2, 258, 254,
	3, 2, 2, 2, 259, 19, 3, 2, 2, 2, 260, 261, 7, 75, 2, 2, 261, 262, 7, 79,
	2, 2, 262, 263, 7, 9, 2, 2, 263, 264, 7, 10, 2, 2, 264, 265, 7, 11, 2,
	2, 265, 266, 5, 4, 3, 2, 266, 267, 7, 12, 2, 2, 267, 268, 8, 11, 1, 2,
	268, 386, 3, 2, 2, 2, 269, 270, 7, 75, 2, 2, 270, 271, 7, 79, 2, 2, 271,
	272, 7, 9, 2, 2, 272, 273, 5, 22, 12, 2, 273, 274, 7, 10, 2, 2, 274, 275,
	7, 11, 2, 2, 275, 276, 5, 4, 3, 2, 276, 277, 7, 12, 2, 2, 277, 278, 8,
	11, 1, 2, 278, 386, 3, 2, 2, 2, 279, 280, 7, 75, 2, 2, 280, 281, 7, 79,
	2, 2, 281, 282, 7, 9, 2, 2, 282, 283, 7, 10, 2, 2, 283, 284, 7, 25, 2,
	2, 284, 285, 7, 33, 2, 2, 285, 286, 5, 56, 29, 2, 286, 287, 7, 11, 2, 2,
	287, 288, 5, 4, 3, 2, 288, 289, 7, 12, 2, 2, 289, 290, 8, 11, 1, 2, 290,
	386, 3, 2, 2, 2, 291, 292, 7, 75, 2, 2, 292, 293, 7, 79, 2, 2, 293, 294,
	7, 9, 2, 2, 294, 295, 5, 22, 12, 2, 295, 296, 7, 10, 2, 2, 296, 297, 7,
	25, 2, 2, 297, 298, 7, 33, 2, 2, 298, 299, 5, 56, 29, 2, 299, 300, 7, 11,
	2, 2, 300, 301, 5, 4, 3, 2, 301, 302, 7, 12, 2, 2, 302, 303, 8, 11, 1,
	2, 303, 386, 3, 2, 2, 2, 304, 305, 7, 75, 2, 2, 305, 306, 7, 79, 2, 2,
	306, 307, 7, 9, 2, 2, 307, 308, 7, 10, 2, 2, 308, 309, 7, 25, 2, 2, 309,
	310, 7, 33, 2, 2, 310, 311, 7, 79, 2, 2, 311, 312, 7, 11, 2, 2, 312, 313,
	5, 4, 3, 2, 313, 314, 7, 12, 2, 2, 314, 315, 8, 11, 1, 2, 315, 386, 3,
	2, 2, 2, 316, 317, 7, 75, 2, 2, 317, 318, 7, 79, 2, 2, 318, 319, 7, 9,
	2, 2, 319, 320, 5, 22, 12, 2, 320, 321, 7, 10, 2, 2, 321, 322, 7, 25, 2,
	2, 322, 323, 7, 33, 2, 2, 323, 324, 7, 79, 2, 2, 324, 325, 7, 11, 2, 2,
	325, 326, 5, 4, 3, 2, 326, 327, 7, 12, 2, 2, 327, 328, 8, 11, 1, 2, 328,
	386, 3, 2, 2, 2, 329, 330, 7, 75, 2, 2, 330, 331, 7, 79, 2, 2, 331, 332,
	7, 9, 2, 2, 332, 333, 7, 10, 2, 2, 333, 334, 7, 25, 2, 2, 334, 335, 7,
	33, 2, 2, 335, 336, 5, 36, 19, 2, 336, 337, 7, 11, 2, 2, 337, 338, 5, 4,
	3, 2, 338, 339, 7, 12, 2, 2, 339, 340, 8, 11, 1, 2, 340, 386, 3, 2, 2,
	2, 341, 342, 7, 75, 2, 2, 342, 343, 7, 79, 2, 2, 343, 344, 7, 9, 2, 2,
	344, 345, 5, 22, 12, 2, 345, 346, 7, 10, 2, 2, 346, 347, 7, 25, 2, 2, 347,
	348, 7, 33, 2, 2, 348, 349, 5, 36, 19, 2, 349, 350, 7, 11, 2, 2, 350, 351,
	5, 4, 3, 2, 351, 352, 7, 12, 2, 2, 352, 353, 8, 11, 1, 2, 353, 386, 3,
	2, 2, 2, 354, 355, 7, 75, 2, 2, 355, 356, 7, 79, 2, 2, 356, 357, 7, 9,
	2, 2, 357, 358, 7, 10, 2, 2, 358, 359, 7, 25, 2, 2, 359, 360, 7, 33, 2,
	2, 360, 361, 7, 59, 2, 2, 361, 362, 7, 34, 2, 2, 362, 363, 5, 56, 29, 2,
	363, 364, 7, 33, 2, 2, 364, 365, 7, 11, 2, 2, 365, 366, 5, 4, 3, 2, 366,
	367, 7, 12, 2, 2, 367, 368, 8, 11, 1, 2, 368, 386, 3, 2, 2, 2, 369, 370,
	7, 75, 2, 2, 370, 371, 7, 79, 2, 2, 371, 372, 7, 9, 2, 2, 372, 373, 5,
	22, 12, 2, 373, 374, 7, 10, 2, 2, 374, 375, 7, 25, 2, 2, 375, 376, 7, 33,
	2, 2, 376, 377, 7, 59, 2, 2, 377, 378, 7, 34, 2, 2, 378, 379, 5, 56, 29,
	2, 379, 380, 7, 33, 2, 2, 380, 381, 7, 11, 2, 2, 381, 382, 5, 4, 3, 2,
	382, 383, 7, 12, 2, 2, 383, 384, 8, 11, 1, 2, 384, 386, 3, 2, 2, 2, 385,
	260, 3, 2, 2, 2, 385, 269, 3, 2, 2, 2, 385, 279, 3, 2, 2, 2, 385, 291,
	3, 2, 2, 2, 385, 304, 3, 2, 2, 2, 385, 316, 3, 2, 2, 2, 385, 329, 3, 2,
	2, 2, 385, 341, 3, 2, 2, 2, 385, 354, 3, 2, 2, 2, 385, 369, 3, 2, 2, 2,
	386, 21, 3, 2, 2, 2, 387, 388, 8, 12, 1, 2, 388, 389, 5, 24, 13, 2, 389,
	390, 8, 12, 1, 2, 390, 398, 3, 2, 2, 2, 391, 392, 12, 4, 2, 2, 392, 393,
	7, 17, 2, 2, 393, 394, 5, 24, 13, 2, 394, 395, 8, 12, 1, 2, 395, 397, 3,
	2, 2, 2, 396, 391, 3, 2, 2, 2, 397, 400, 3, 2, 2, 2, 398, 396, 3, 2, 2,
	2, 398, 399, 3, 2, 2, 2, 399, 23, 3, 2, 2, 2, 400, 398, 3, 2, 2, 2, 401,
	402, 7, 79, 2, 2, 402, 403, 7, 16, 2, 2, 403, 404, 7, 21, 2, 2, 404, 405,
	7, 49, 2, 2, 405, 406, 5, 36, 19, 2, 406, 407, 8, 13, 1, 2, 407, 439, 3,
	2, 2, 2, 408, 409, 7, 79, 2, 2, 409, 410, 7, 16, 2, 2, 410, 411, 7, 21,
	2, 2, 411, 412, 5, 36, 19, 2, 412, 413, 8, 13, 1, 2, 413, 439, 3, 2, 2,
	2, 414, 415, 7, 79, 2, 2, 415, 416, 7, 16, 2, 2, 416, 417, 7, 21, 2, 2,
	417, 418, 7, 49, 2, 2, 418, 419, 5, 40, 21, 2, 419, 420, 8, 13, 1, 2, 420,
	439, 3, 2, 2, 2, 421, 422, 7, 79, 2, 2, 422, 423, 7, 16, 2, 2, 423, 424,
	7, 21, 2, 2, 424, 425, 5, 40, 21, 2, 425, 426, 8, 13, 1, 2, 426, 439, 3,
	2, 2, 2, 427, 428, 7, 79, 2, 2, 428, 429, 7, 16, 2, 2, 429, 430, 7, 49,
	2, 2, 430, 431, 5, 56, 29, 2, 431, 432, 8, 13, 1, 2, 432, 439, 3, 2, 2,
	2, 433, 434, 7, 79, 2, 2, 434, 435, 7, 16, 2, 2, 435, 436, 5, 56, 29, 2,
	436, 437, 8, 13, 1, 2, 437, 439, 3, 2, 2, 2, 438, 401, 3, 2, 2, 2, 438,
	408, 3, 2, 2, 2, 438, 414, 3, 2, 2, 2, 438, 421, 3, 2, 2, 2, 438, 427,
	3, 2, 2, 2, 438, 433, 3, 2, 2, 2, 439, 25, 3, 2, 2, 2, 440, 441, 7, 79,
	2, 2, 441, 442, 7, 9, 2, 2, 442, 443, 7, 10, 2, 2, 443, 444, 7, 15, 2,
	2, 444, 453, 8, 14, 1, 2, 445, 446, 7, 79, 2, 2, 446, 447, 7, 9, 2, 2,
	447, 448, 5, 28, 15, 2, 448, 449, 7, 10, 2, 2, 449, 450, 7, 15, 2, 2, 450,
	451, 8, 14, 1, 2, 451, 453, 3, 2, 2, 2, 452, 440, 3, 2, 2, 2, 452, 445,
	3, 2, 2, 2, 453, 27, 3, 2, 2, 2, 454, 455, 8, 15, 1, 2, 455, 456, 5, 94,
	48, 2, 456, 457, 8, 15, 1, 2, 457, 464, 3, 2, 2, 2, 458, 459, 7, 21, 2,
	2, 459, 460, 7, 49, 2, 2, 460, 461, 5, 94, 48, 2, 461, 462, 8, 15, 1, 2,
	462, 464, 3, 2, 2, 2, 463, 454, 3, 2, 2, 2, 463, 458, 3, 2, 2, 2, 464,
	479, 3, 2, 2, 2, 465, 466, 12, 6, 2, 2, 466, 467, 7, 17, 2, 2, 467, 468,
	5, 94, 48, 2, 468, 469, 8, 15, 1, 2, 469, 478, 3, 2, 2, 2, 470, 471, 12,
	5, 2, 2, 471, 472, 7, 17, 2, 2, 472, 473, 7, 21, 2, 2, 473, 474, 7, 49,
	2, 2, 474, 475, 5, 94, 48, 2, 475, 476, 8, 15, 1, 2, 476, 478, 3, 2, 2,
	2, 477, 465, 3, 2, 2, 2, 477, 470, 3, 2, 2, 2, 478, 481, 3, 2, 2, 2, 479,
	477, 3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480, 29, 3, 2, 2, 2, 481, 479, 3,
	2, 2, 2, 482, 483, 7, 57, 2, 2, 483, 484, 7, 15, 2, 2, 484, 507, 8, 16,
	1, 2, 485, 486, 7, 57, 2, 2, 486, 487, 5, 94, 48, 2, 487, 488, 7, 15, 2,
	2, 488, 489, 8, 16, 1, 2, 489, 507, 3, 2, 2, 2, 490, 491, 7, 71, 2, 2,
	491, 492, 7, 15, 2, 2, 492, 507, 8, 16, 1, 2, 493, 494, 7, 76, 2, 2, 494,
	495, 7, 15, 2, 2, 495, 507, 8, 16, 1, 2, 496, 497, 7, 76, 2, 2, 497, 498,
	5, 94, 48, 2, 498, 499, 7, 15, 2, 2, 499, 500, 8, 16, 1, 2, 500, 507, 3,
	2, 2, 2, 501, 502, 7, 76, 2, 2, 502, 503, 5, 88, 45, 2, 503, 504, 7, 15,
	2, 2, 504, 505, 8, 16, 1, 2, 505, 507, 3, 2, 2, 2, 506, 482, 3, 2, 2, 2,
	506, 485, 3, 2, 2, 2, 506, 490, 3, 2, 2, 2, 506, 493, 3, 2, 2, 2, 506,
	496, 3, 2, 2, 2, 506, 501, 3, 2, 2, 2, 507, 31, 3, 2, 2, 2, 508, 509, 7,
	48, 2, 2, 509, 510, 7, 49, 2, 2, 510, 511, 7, 79, 2, 2, 511, 512, 7, 16,
	2, 2, 512, 513, 5, 56, 29, 2, 513, 514, 7, 35, 2, 2, 514, 515, 5, 94, 48,
	2, 515, 516, 7, 15, 2, 2, 516, 517, 8, 17, 1, 2, 517, 547, 3, 2, 2, 2,
	518, 519, 7, 48, 2, 2, 519, 520, 7, 79, 2, 2, 520, 521, 7, 16, 2, 2, 521,
	522, 5, 56, 29, 2, 522, 523, 7, 35, 2, 2, 523, 524, 5, 94, 48, 2, 524,
	525, 7, 15, 2, 2, 525, 526, 8, 17, 1, 2, 526, 547, 3, 2, 2, 2, 527, 528,
	7, 48, 2, 2, 528, 529, 7, 49, 2, 2, 529, 530, 7, 79, 2, 2, 530, 531, 7,
	16, 2, 2, 531, 532, 5, 56, 29, 2, 532, 533, 7, 35, 2, 2, 533, 534, 5, 44,
	23, 2, 534, 535, 7, 15, 2, 2, 535, 536, 8, 17, 1, 2, 536, 547, 3, 2, 2,
	2, 537, 538, 7, 48, 2, 2, 538, 539, 7, 79, 2, 2, 539, 540, 7, 16, 2, 2,
	540, 541, 5, 56, 29, 2, 541, 542, 7, 35, 2, 2, 542, 543, 5, 44, 23, 2,
	543, 544, 7, 15, 2, 2, 544, 545, 8, 17, 1, 2, 545, 547, 3, 2, 2, 2, 546,
	508, 3, 2, 2, 2, 546, 518, 3, 2, 2, 2, 546, 527, 3, 2, 2, 2, 546, 537,
	3, 2, 2, 2, 547, 33, 3, 2, 2, 2, 548, 549, 7, 48, 2, 2, 549, 550, 7, 49,
	2, 2, 550, 551, 7, 79, 2, 2, 551, 552, 7, 16, 2, 2, 552, 553, 5, 36, 19,
	2, 553, 554, 7, 35, 2, 2, 554, 555, 5, 88, 45, 2, 555, 556, 7, 15, 2, 2,
	556, 557, 8, 18, 1, 2, 557, 583, 3, 2, 2, 2, 558, 559, 7, 48, 2, 2, 559,
	560, 7, 49, 2, 2, 560, 561, 7, 79, 2, 2, 561, 562, 7, 35, 2, 2, 562, 563,
	5, 88, 45, 2, 563, 564, 7, 15, 2, 2, 564, 565, 8, 18, 1, 2, 565, 583, 3,
	2, 2, 2, 566, 567, 7, 48, 2, 2, 567, 568, 7, 79, 2, 2, 568, 569, 7, 16,
	2, 2, 569, 570, 5, 36, 19, 2, 570, 571, 7, 35, 2, 2, 571, 572, 5, 88, 45,
	2, 572, 573, 7, 15, 2, 2, 573, 574, 8, 18, 1, 2, 574, 583, 3, 2, 2, 2,
	575, 576, 7, 48, 2, 2, 576, 577, 7, 79, 2, 2, 577, 578, 7, 35, 2, 2, 578,
	579, 5, 88, 45, 2, 579, 580, 7, 15, 2, 2, 580, 581, 8, 18, 1, 2, 581, 583,
	3, 2, 2, 2, 582, 548, 3, 2, 2, 2, 582, 558, 3, 2, 2, 2, 582, 566, 3, 2,
	2, 2, 582, 575, 3, 2, 2, 2, 583, 35, 3, 2, 2, 2, 584, 585, 7, 13, 2, 2,
	585, 586, 5, 36, 19, 2, 586, 587, 7, 15, 2, 2, 587, 588, 5, 88, 45, 2,
	588, 589, 7, 14, 2, 2, 589, 590, 8, 19, 1, 2, 590, 599, 3, 2, 2, 2, 591,
	592, 7, 13, 2, 2, 592, 593, 5, 56, 29, 2, 593, 594, 7, 15, 2, 2, 594, 595,
	5, 88, 45, 2, 595, 596, 7, 14, 2, 2, 596, 597, 8, 19, 1, 2, 597, 599, 3,
	2, 2, 2, 598, 584, 3, 2, 2, 2, 598, 591, 3, 2, 2, 2, 599, 37, 3, 2, 2,
	2, 600, 601, 7, 48, 2, 2, 601, 602, 7, 49, 2, 2, 602, 603, 7, 79, 2, 2,
	603, 604, 7, 16, 2, 2, 604, 605, 7, 59, 2, 2, 605, 606, 7, 34, 2, 2, 606,
	607, 5, 56, 29, 2, 607, 608, 7, 33, 2, 2, 608, 609, 7, 35, 2, 2, 609, 610,
	5, 40, 21, 2, 610, 611, 7, 15, 2, 2, 611, 612, 8, 20, 1, 2, 612, 666, 3,
	2, 2, 2, 613, 614, 7, 48, 2, 2, 614, 615, 7, 49, 2, 2, 615, 616, 7, 79,
	2, 2, 616, 617, 7, 16, 2, 2, 617, 618, 7, 59, 2, 2, 618, 619, 7, 34, 2,
	2, 619, 620, 7, 79, 2, 2, 620, 621, 7, 33, 2, 2, 621, 622, 7, 35, 2, 2,
	622, 623, 5, 40, 21, 2, 623, 624, 7, 15, 2, 2, 624, 625, 8, 20, 1, 2, 625,
	666, 3, 2, 2, 2, 626, 627, 7, 48, 2, 2, 627, 628, 7, 49, 2, 2, 628, 629,
	7, 79, 2, 2, 629, 630, 7, 35, 2, 2, 630, 631, 5, 40, 21, 2, 631, 632, 7,
	15, 2, 2, 632, 633, 8, 20, 1, 2, 633, 666, 3, 2, 2, 2, 634, 635, 7, 48,
	2, 2, 635, 636, 7, 79, 2, 2, 636, 637, 7, 16, 2, 2, 637, 638, 7, 59, 2,
	2, 638, 639, 7, 34, 2, 2, 639, 640, 5, 56, 29, 2, 640, 641, 7, 33, 2, 2,
	641, 642, 7, 35, 2, 2, 642, 643, 5, 40, 21, 2, 643, 644, 7, 15, 2, 2, 644,
	645, 8, 20, 1, 2, 645, 666, 3, 2, 2, 2, 646, 647, 7, 48, 2, 2, 647, 648,
	7, 79, 2, 2, 648, 649, 7, 35, 2, 2, 649, 650, 5, 40, 21, 2, 650, 651, 7,
	15, 2, 2, 651, 652, 8, 20, 1, 2, 652, 666, 3, 2, 2, 2, 653, 654, 7, 48,
	2, 2, 654, 655, 7, 79, 2, 2, 655, 656, 7, 16, 2, 2, 656, 657, 7, 59, 2,
	2, 657, 658, 7, 34, 2, 2, 658, 659, 7, 79, 2, 2, 659, 660, 7, 33, 2, 2,
	660, 661, 7, 35, 2, 2, 661, 662, 5, 40, 21, 2, 662, 663, 7, 15, 2, 2, 663,
	664, 8, 20, 1, 2, 664, 666, 3, 2, 2, 2, 665, 600, 3, 2, 2, 2, 665, 613,
	3, 2, 2, 2, 665, 626, 3, 2, 2, 2, 665, 634, 3, 2, 2, 2, 665, 646, 3, 2,
	2, 2, 665, 653, 3, 2, 2, 2, 666, 39, 3, 2, 2, 2, 667, 668, 7, 59, 2, 2,
	668, 669, 7, 8, 2, 2, 669, 670, 7, 13, 2, 2, 670, 671, 5, 68, 35, 2, 671,
	672, 7, 14, 2, 2, 672, 673, 8, 21, 1, 2, 673, 701, 3, 2, 2, 2, 674, 675,
	7, 59, 2, 2, 675, 676, 7, 8, 2, 2, 676, 677, 7, 13, 2, 2, 677, 678, 5,
	88, 45, 2, 678, 679, 7, 15, 2, 2, 679, 680, 5, 88, 45, 2, 680, 681, 7,
	14, 2, 2, 681, 682, 8, 21, 1, 2, 682, 701, 3, 2, 2, 2, 683, 684, 7, 59,
	2, 2, 684, 685, 7, 16, 2, 2, 685, 686, 7, 16, 2, 2, 686, 687, 7, 60, 2,
	2, 687, 688, 7, 9, 2, 2, 688, 689, 7, 10, 2, 2, 689, 701, 8, 21, 1, 2,
	690, 691, 7, 59, 2, 2, 691, 692, 7, 8, 2, 2, 692, 693, 7, 16, 2, 2, 693,
	694, 7, 16, 2, 2, 694, 695, 7, 61, 2, 2, 695, 696, 7, 9, 2, 2, 696, 697,
	5, 88, 45, 2, 697, 698, 7, 10, 2, 2, 698, 699, 8, 21, 1, 2, 699, 701, 3,
	2, 2, 2, 700, 667, 3, 2, 2, 2, 700, 674, 3, 2, 2, 2, 700, 683, 3, 2, 2,
	2, 700, 690, 3, 2, 2, 2, 701, 41, 3, 2, 2, 2, 702, 703, 7, 79, 2, 2, 703,
	704, 7, 20, 2, 2, 704, 705, 7, 62, 2, 2, 705, 706, 7, 9, 2, 2, 706, 707,
	5, 94, 48, 2, 707, 708, 7, 10, 2, 2, 708, 709, 7, 15, 2, 2, 709, 710, 8,
	22, 1, 2, 710, 732, 3, 2, 2, 2, 711, 712, 7, 79, 2, 2, 712, 713, 7, 20,
	2, 2, 713, 714, 7, 63, 2, 2, 714, 715, 7, 9, 2, 2, 715, 716, 5, 94, 48,
	2, 716, 717, 7, 17, 2, 2, 717, 718, 5, 94, 48, 2, 718, 719, 7, 10, 2, 2,
	719, 720, 7, 15, 2, 2, 720, 721, 8, 22, 1, 2, 721, 732, 3, 2, 2, 2, 722,
	723, 7, 79, 2, 2, 723, 724, 7, 20, 2, 2, 724, 725, 7, 64, 2, 2, 725, 726,
	7, 9, 2, 2, 726, 727, 5, 94, 48, 2, 727, 728, 7, 10, 2, 2, 728, 729, 7,
	15, 2, 2, 729, 730, 8, 22, 1, 2, 730, 732, 3, 2, 2, 2, 731, 702, 3, 2,
	2, 2, 731, 711, 3, 2, 2, 2, 731, 722, 3, 2, 2, 2, 732, 43, 3, 2, 2, 2,
	733, 734, 5, 60, 31, 2, 734, 735, 7, 15, 2, 2, 735, 736, 8, 23, 1, 2, 736,
	744, 3, 2, 2, 2, 737, 738, 5, 62, 32, 2, 738, 739, 8, 23, 1, 2, 739, 744,
	3, 2, 2, 2, 740, 741, 5, 46, 24, 2, 741, 742, 8, 23, 1, 2, 742, 744, 3,
	2, 2, 2, 743, 733, 3, 2, 2, 2, 743, 737, 3, 2, 2, 2, 743, 740, 3, 2, 2,
	2, 744, 45, 3, 2, 2, 2, 745, 746, 7, 54, 2, 2, 746, 747, 5, 94, 48, 2,
	747, 748, 7, 11, 2, 2, 748, 749, 5, 48, 25, 2, 749, 750, 5, 54, 28, 2,
	750, 751, 7, 12, 2, 2, 751, 752, 8, 24, 1, 2, 752, 768, 3, 2, 2, 2, 753,
	754, 7, 54, 2, 2, 754, 755, 5, 94, 48, 2, 755, 756, 7, 11, 2, 2, 756, 757,
	5, 48, 25, 2, 757, 758, 7, 12, 2, 2, 758, 759, 8, 24, 1, 2, 759, 768, 3,
	2, 2, 2, 760, 761, 7, 54, 2, 2, 761, 762, 5, 94, 48, 2, 762, 763, 7, 11,
	2, 2, 763, 764, 5, 54, 28, 2, 764, 765, 7, 12, 2, 2, 765, 766, 8, 24, 1,
	2, 766, 768, 3, 2, 2, 2, 767, 745, 3, 2, 2, 2, 767, 753, 3, 2, 2, 2, 767,
	760, 3, 2, 2, 2, 768, 47, 3, 2, 2, 2, 769, 770, 8, 25, 1, 2, 770, 771,
	5, 50, 26, 2, 771, 772, 8, 25, 1, 2, 772, 779, 3, 2, 2, 2, 773, 774, 12,
	4, 2, 2, 774, 775, 5, 50, 26, 2, 775, 776, 8, 25, 1, 2, 776, 778, 3, 2,
	2, 2, 777, 773, 3, 2, 2, 2, 778, 781, 3, 2, 2, 2, 779, 777, 3, 2, 2, 2,
	779, 780, 3, 2, 2, 2, 780, 49, 3, 2, 2, 2, 781, 779, 3, 2, 2, 2, 782, 783,
	5, 94, 48, 2, 783, 784, 7, 35, 2, 2, 784, 785, 7, 33, 2, 2, 785, 786, 5,
	94, 48, 2, 786, 787, 7, 17, 2, 2, 787, 788, 8, 26, 1, 2, 788, 797, 3, 2,
	2, 2, 789, 790, 5, 52, 27, 2, 790, 791, 7, 35, 2, 2, 791, 792, 7, 33, 2,
	2, 792, 793, 5, 94, 48, 2, 793, 794, 7, 17, 2, 2, 794, 795, 8, 26, 1, 2,
	795, 797, 3, 2, 2, 2, 796, 782, 3, 2, 2, 2, 796, 789, 3, 2, 2, 2, 797,
	51, 3, 2, 2, 2, 798, 799, 5, 78, 40, 2, 799, 800, 7, 19, 2, 2, 800, 801,
	5, 94, 48, 2, 801, 802, 8, 27, 1, 2, 802, 807, 3, 2, 2, 2, 803, 804, 5,
	94, 48, 2, 804, 805, 8, 27, 1, 2, 805, 807, 3, 2, 2, 2, 806, 798, 3, 2,
	2, 2, 806, 803, 3, 2, 2, 2, 807, 53, 3, 2, 2, 2, 808, 809, 7, 18, 2, 2,
	809, 810, 7, 35, 2, 2, 810, 811, 7, 33, 2, 2, 811, 812, 5, 94, 48, 2, 812,
	813, 7, 17, 2, 2, 813, 814, 8, 28, 1, 2, 814, 55, 3, 2, 2, 2, 815, 816,
	7, 40, 2, 2, 816, 830, 8, 29, 1, 2, 817, 818, 7, 41, 2, 2, 818, 830, 8,
	29, 1, 2, 819, 820, 7, 44, 2, 2, 820, 830, 8, 29, 1, 2, 821, 822, 7, 42,
	2, 2, 822, 830, 8, 29, 1, 2, 823, 824, 7, 43, 2, 2, 824, 830, 8, 29, 1,
	2, 825, 826, 7, 45, 2, 2, 826, 830, 8, 29, 1, 2, 827, 828, 7, 46, 2, 2,
	828, 830, 8, 29, 1, 2, 829, 815, 3, 2, 2, 2, 829, 817, 3, 2, 2, 2, 829,
	819, 3, 2, 2, 2, 829, 821, 3, 2, 2, 2, 829, 823, 3, 2, 2, 2, 829, 825,
	3, 2, 2, 2, 829, 827, 3, 2, 2, 2, 830, 57, 3, 2, 2, 2, 831, 832, 7, 79,
	2, 2, 832, 833, 7, 35, 2, 2, 833, 834, 5, 94, 48, 2, 834, 835, 7, 15, 2,
	2, 835, 836, 8, 30, 1, 2, 836, 846, 3, 2, 2, 2, 837, 838, 7, 79, 2, 2,
	838, 839, 7, 20, 2, 2, 839, 840, 7, 79, 2, 2, 840, 841, 7, 35, 2, 2, 841,
	842, 5, 94, 48, 2, 842, 843, 7, 15, 2, 2, 843, 844, 8, 30, 1, 2, 844, 846,
	3, 2, 2, 2, 845, 831, 3, 2, 2, 2, 845, 837, 3, 2, 2, 2, 846, 59, 3, 2,
	2, 2, 847, 848, 7, 50, 2, 2, 848, 849, 5, 94, 48, 2, 849, 850, 7, 11, 2,
	2, 850, 851, 5, 94, 48, 2, 851, 852, 7, 12, 2, 2, 852, 853, 8, 31, 1, 2,
	853, 875, 3, 2, 2, 2, 854, 855, 7, 50, 2, 2, 855, 856, 5, 94, 48, 2, 856,
	857, 7, 11, 2, 2, 857, 858, 5, 94, 48, 2, 858, 859, 7, 12, 2, 2, 859, 860,
	7, 51, 2, 2, 860, 861, 7, 11, 2, 2, 861, 862, 5, 94, 48, 2, 862, 863, 7,
	12, 2, 2, 863, 864, 8, 31, 1, 2, 864, 875, 3, 2, 2, 2, 865, 866, 7, 50,
	2, 2, 866, 867, 5, 94, 48, 2, 867, 868, 7, 11, 2, 2, 868, 869, 5, 94, 48,
	2, 869, 870, 7, 12, 2, 2, 870, 871, 7, 51, 2, 2, 871, 872, 5, 60, 31, 2,
	872, 873, 8, 31, 1, 2, 873, 875, 3, 2, 2, 2, 874, 847, 3, 2, 2, 2, 874,
	854, 3, 2, 2, 2, 874, 865, 3, 2, 2, 2, 875, 61, 3, 2, 2, 2, 876, 877, 7,
	52, 2, 2, 877, 878, 7, 11, 2, 2, 878, 879, 5, 4, 3, 2, 879, 880, 7, 12,
	2, 2, 880, 881, 8, 32, 1, 2, 881, 63, 3, 2, 2, 2, 882, 883, 7, 47, 2, 2,
	883, 884, 7, 8, 2, 2, 884, 885, 7, 9, 2, 2, 885, 886, 5, 94, 48, 2, 886,
	887, 7, 10, 2, 2, 887, 888, 8, 33, 1, 2, 888, 899, 3, 2, 2, 2, 889, 890,
	7, 47, 2, 2, 890, 891, 7, 8, 2, 2, 891, 892, 7, 9, 2, 2, 892, 893, 5, 94,
	48, 2, 893, 894, 7, 17, 2, 2, 894, 895, 5, 66, 34, 2, 895, 896, 7, 10,
	2, 2, 896, 897, 8, 33, 1, 2, 897, 899, 3, 2, 2, 2, 898, 882, 3, 2, 2, 2,
	898, 889, 3, 2, 2, 2, 899, 65, 3, 2, 2, 2, 900, 901, 8, 34, 1, 2, 901,
	902, 5, 94, 48, 2, 902, 903, 8, 34, 1, 2, 903, 911, 3, 2, 2, 2, 904, 905,
	12, 4, 2, 2, 905, 906, 7, 17, 2, 2, 906, 907, 5, 94, 48, 2, 907, 908, 8,
	34, 1, 2, 908, 910, 3, 2, 2, 2, 909, 904, 3, 2, 2, 2, 910, 913, 3, 2, 2,
	2, 911, 909, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912, 67, 3, 2, 2, 2, 913,
	911, 3, 2, 2, 2, 914, 915, 8, 35, 1, 2, 915, 916, 5, 88, 45, 2, 916, 917,
	8, 35, 1, 2, 917, 925, 3, 2, 2, 2, 918, 919, 12, 4, 2, 2, 919, 920, 7,
	17, 2, 2, 920, 921, 5, 88, 45, 2, 921, 922, 8, 35, 1, 2, 922, 924, 3, 2,
	2, 2, 923, 918, 3, 2, 2, 2, 924, 927, 3, 2, 2, 2, 925, 923, 3, 2, 2, 2,
	925, 926, 3, 2, 2, 2, 926, 69, 3, 2, 2, 2, 927, 925, 3, 2, 2, 2, 928, 929,
	7, 50, 2, 2, 929, 930, 5, 94, 48, 2, 930, 931, 7, 11, 2, 2, 931, 932, 5,
	4, 3, 2, 932, 933, 7, 12, 2, 2, 933, 934, 8, 36, 1, 2, 934, 956, 3, 2,
	2, 2, 935, 936, 7, 50, 2, 2, 936, 937, 5, 94, 48, 2, 937, 938, 7, 11, 2,
	2, 938, 939, 5, 4, 3, 2, 939, 940, 7, 12, 2, 2, 940, 941, 7, 51, 2, 2,
	941, 942, 7, 11, 2, 2, 942, 943, 5, 4, 3, 2, 943, 944, 7, 12, 2, 2, 944,
	945, 8, 36, 1, 2, 945, 956, 3, 2, 2, 2, 946, 947, 7, 50, 2, 2, 947, 948,
	5, 94, 48, 2, 948, 949, 7, 11, 2, 2, 949, 950, 5, 4, 3, 2, 950, 951, 7,
	12, 2, 2, 951, 952, 7, 51, 2, 2, 952, 953, 5, 70, 36, 2, 953, 954, 8, 36,
	1, 2, 954, 956, 3, 2, 2, 2, 955, 928, 3, 2, 2, 2, 955, 935, 3, 2, 2, 2,
	955, 946, 3, 2, 2, 2, 956, 71, 3, 2, 2, 2, 957, 958, 7, 54, 2, 2, 958,
	959, 5, 94, 48, 2, 959, 960, 7, 11, 2, 2, 960, 961, 5, 74, 38, 2, 961,
	962, 5, 80, 41, 2, 962, 963, 7, 12, 2, 2, 963, 964, 8, 37, 1, 2, 964, 973,
	3, 2, 2, 2, 965, 966, 7, 54, 2, 2, 966, 967, 5, 94, 48, 2, 967, 968, 7,
	11, 2, 2, 968, 969, 5, 80, 41, 2, 969, 970, 7, 12, 2, 2, 970, 971, 8, 37,
	1, 2, 971, 973, 3, 2, 2, 2, 972, 957, 3, 2, 2, 2, 972, 965, 3, 2, 2, 2,
	973, 73, 3, 2, 2, 2, 974, 975, 8, 38, 1, 2, 975, 976, 5, 76, 39, 2, 976,
	977, 8, 38, 1, 2, 977, 984, 3, 2, 2, 2, 978, 979, 12, 4, 2, 2, 979, 980,
	5, 76, 39, 2, 980, 981, 8, 38, 1, 2, 981, 983, 3, 2, 2, 2, 982, 978, 3,
	2, 2, 2, 983, 986, 3, 2, 2, 2, 984, 982, 3, 2, 2, 2, 984, 985, 3, 2, 2,
	2, 985, 75, 3, 2, 2, 2, 986, 984, 3, 2, 2, 2, 987, 988, 5, 94, 48, 2, 988,
	989, 7, 35, 2, 2, 989, 990, 7, 33, 2, 2, 990, 991, 7, 11, 2, 2, 991, 992,
	5, 4, 3, 2, 992, 993, 7, 12, 2, 2, 993, 994, 8, 39, 1, 2, 994, 1018, 3,
	2, 2, 2, 995, 996, 5, 78, 40, 2, 996, 997, 7, 35, 2, 2, 997, 998, 7, 33,
	2, 2, 998, 999, 7, 11, 2, 2, 999, 1000, 5, 4, 3, 2, 1000, 1001, 7, 12,
	2, 2, 1001, 1002, 8, 39, 1, 2, 1002, 1018, 3, 2, 2, 2, 1003, 1004, 5, 94,
	48, 2, 1004, 1005, 7, 35, 2, 2, 1005, 1006, 7, 33, 2, 2, 1006, 1007, 5,
	6, 4, 2, 1007, 1008, 7, 17, 2, 2, 1008, 1009, 8, 39, 1, 2, 1009, 1018,
	3, 2, 2, 2, 1010, 1011, 5, 78, 40, 2, 1011, 1012, 7, 35, 2, 2, 1012, 1013,
	7, 33, 2, 2, 1013, 1014, 5, 6, 4, 2, 1014, 1015, 7, 17, 2, 2, 1015, 1016,
	8, 39, 1, 2, 1016, 1018, 3, 2, 2, 2, 1017, 987, 3, 2, 2, 2, 1017, 995,
	3, 2, 2, 2, 1017, 1003, 3, 2, 2, 2, 1017, 1010, 3, 2, 2, 2, 1018, 77, 3,
	2, 2, 2, 1019, 1020, 8, 40, 1, 2, 1020, 1021, 5, 94, 48, 2, 1021, 1022,
	8, 40, 1, 2, 1022, 1030, 3, 2, 2, 2, 1023, 1024, 12, 4, 2, 2, 1024, 1025,
	7, 19, 2, 2, 1025, 1026, 5, 94, 48, 2, 1026, 1027, 8, 40, 1, 2, 1027, 1029,
	3, 2, 2, 2, 1028, 1023, 3, 2, 2, 2, 1029, 1032, 3, 2, 2, 2, 1030, 1028,
	3, 2, 2, 2, 1030, 1031, 3, 2, 2, 2, 1031, 79, 3, 2, 2, 2, 1032, 1030, 3,
	2, 2, 2, 1033, 1034, 7, 18, 2, 2, 1034, 1035, 7, 35, 2, 2, 1035, 1036,
	7, 33, 2, 2, 1036, 1037, 7, 11, 2, 2, 1037, 1038, 5, 4, 3, 2, 1038, 1039,
	7, 12, 2, 2, 1039, 1040, 8, 41, 1, 2, 1040, 1049, 3, 2, 2, 2, 1041, 1042,
	7, 18, 2, 2, 1042, 1043, 7, 35, 2, 2, 1043, 1044, 7, 33, 2, 2, 1044, 1045,
	5, 6, 4, 2, 1045, 1046, 7, 17, 2, 2, 1046, 1047, 8, 41, 1, 2, 1047, 1049,
	3, 2, 2, 2, 1048, 1033, 3, 2, 2, 2, 1048, 1041, 3, 2, 2, 2, 1049, 81, 3,
	2, 2, 2, 1050, 1051, 7, 52, 2, 2, 1051, 1052, 7, 11, 2, 2, 1052, 1053,
	5, 4, 3, 2, 1053, 1054, 7, 12, 2, 2, 1054, 1055, 8, 42, 1, 2, 1055, 83,
	3, 2, 2, 2, 1056, 1057, 7, 53, 2, 2, 1057, 1058, 5, 94, 48, 2, 1058, 1059,
	7, 11, 2, 2, 1059, 1060, 5, 4, 3, 2, 1060, 1061, 7, 12, 2, 2, 1061, 1062,
	8, 43, 1, 2, 1062, 85, 3, 2, 2, 2, 1063, 1064, 7, 55, 2, 2, 1064, 1065,
	7, 79, 2, 2, 1065, 1066, 7, 56, 2, 2, 1066, 1067, 5, 94, 48, 2, 1067, 1068,
	7, 20, 2, 2, 1068, 1069, 7, 20, 2, 2, 1069, 1070, 5, 94, 48, 2, 1070, 1071,
	7, 11, 2, 2, 1071, 1072, 5, 4, 3, 2, 1072, 1073, 7, 12, 2, 2, 1073, 1074,
	8, 44, 1, 2, 1074, 1085, 3, 2, 2, 2, 1075, 1076, 7, 55, 2, 2, 1076, 1077,
	7, 79, 2, 2, 1077, 1078, 7, 56, 2, 2, 1078, 1079, 5, 88, 45, 2, 1079, 1080,
	7, 11, 2, 2, 1080, 1081, 5, 4, 3, 2, 1081, 1082, 7, 12, 2, 2, 1082, 1083,
	8, 44, 1, 2, 1083, 1085, 3, 2, 2, 2, 1084, 1063, 3, 2, 2, 2, 1084, 1075,
	3, 2, 2, 2, 1085, 87, 3, 2, 2, 2, 1086, 1087, 8, 45, 1, 2, 1087, 1088,
	7, 40, 2, 2, 1088, 1089, 7, 16, 2, 2, 1089, 1090, 7, 16, 2, 2, 1090, 1091,
	7, 26, 2, 2, 1091, 1092, 7, 9, 2, 2, 1092, 1093, 5, 88, 45, 2, 1093, 1094,
	7, 17, 2, 2, 1094, 1095, 5, 88, 45, 2, 1095, 1096, 7, 10, 2, 2, 1096, 1097,
	8, 45, 1, 2, 1097, 1144, 3, 2, 2, 2, 1098, 1099, 7, 41, 2, 2, 1099, 1100,
	7, 16, 2, 2, 1100, 1101, 7, 16, 2, 2, 1101, 1102, 7, 27, 2, 2, 1102, 1103,
	7, 9, 2, 2, 1103, 1104, 5, 88, 45, 2, 1104, 1105, 7, 17, 2, 2, 1105, 1106,
	5, 88, 45, 2, 1106, 1107, 7, 10, 2, 2, 1107, 1108, 8, 45, 1, 2, 1108, 1144,
	3, 2, 2, 2, 1109, 1110, 7, 9, 2, 2, 1110, 1111, 5, 88, 45, 2, 1111, 1112,
	7, 10, 2, 2, 1112, 1113, 8, 45, 1, 2, 1113, 1144, 3, 2, 2, 2, 1114, 1115,
	7, 8, 2, 2, 1115, 1116, 5, 88, 45, 8, 1116, 1117, 8, 45, 1, 2, 1117, 1144,
	3, 2, 2, 2, 1118, 1119, 7, 13, 2, 2, 1119, 1120, 5, 68, 35, 2, 1120, 1121,
	7, 14, 2, 2, 1121, 1122, 8, 45, 1, 2, 1122, 1144, 3, 2, 2, 2, 1123, 1124,
	7, 13, 2, 2, 1124, 1125, 5, 88, 45, 2, 1125, 1126, 7, 15, 2, 2, 1126, 1127,
	5, 88, 45, 2, 1127, 1128, 7, 14, 2, 2, 1128, 1129, 8, 45, 1, 2, 1129, 1144,
	3, 2, 2, 2, 1130, 1131, 5, 94, 48, 2, 1131, 1132, 7, 20, 2, 2, 1132, 1133,
	7, 67, 2, 2, 1133, 1134, 7, 9, 2, 2, 1134, 1135, 7, 10, 2, 2, 1135, 1136,
	8, 45, 1, 2, 1136, 1144, 3, 2, 2, 2, 1137, 1138, 5, 40, 21, 2, 1138, 1139,
	8, 45, 1, 2, 1139, 1144, 3, 2, 2, 2, 1140, 1141, 5, 98, 50, 2, 1141, 1142,
	8, 45, 1, 2, 1142, 1144, 3, 2, 2, 2, 1143, 1086, 3, 2, 2, 2, 1143, 1098,
	3, 2, 2, 2, 1143, 1109, 3, 2, 2, 2, 1143, 1114, 3, 2, 2, 2, 1143, 1118,
	3, 2, 2, 2, 1143, 1123, 3, 2, 2, 2, 1143, 1130, 3, 2, 2, 2, 1143, 1137,
	3, 2, 2, 2, 1143, 1140, 3, 2, 2, 2, 1144, 1172, 3, 2, 2, 2, 1145, 1146,
	12, 14, 2, 2, 1146, 1147, 7, 28, 2, 2, 1147, 1148, 5, 88, 45, 15, 1148,
	1149, 8, 45, 1, 2, 1149, 1171, 3, 2, 2, 2, 1150, 1151, 12, 13, 2, 2, 1151,
	1152, 9, 2, 2, 2, 1152, 1153, 5, 88, 45, 14, 1153, 1154, 8, 45, 1, 2, 1154,
	1171, 3, 2, 2, 2, 1155, 1156, 12, 12, 2, 2, 1156, 1157, 9, 3, 2, 2, 1157,
	1158, 5, 88, 45, 13, 1158, 1159, 8, 45, 1, 2, 1159, 1171, 3, 2, 2, 2, 1160,
	1161, 12, 11, 2, 2, 1161, 1162, 9, 4, 2, 2, 1162, 1163, 5, 88, 45, 12,
	1163, 1164, 8, 45, 1, 2, 1164, 1171, 3, 2, 2, 2, 1165, 1166, 12, 9, 2,
	2, 1166, 1167, 9, 5, 2, 2, 1167, 1168, 5, 88, 45, 10, 1168, 1169, 8, 45,
	1, 2, 1169, 1171, 3, 2, 2, 2, 1170, 1145, 3, 2, 2, 2, 1170, 1150, 3, 2,
	2, 2, 1170, 1155, 3, 2, 2, 2, 1170, 1160, 3, 2, 2, 2, 1170, 1165, 3, 2,
	2, 2, 1171, 1174, 3, 2, 2, 2, 1172, 1170, 3, 2, 2, 2, 1172, 1173, 3, 2,
	2, 2, 1173, 89, 3, 2, 2, 2, 1174, 1172, 3, 2, 2, 2, 1175, 1176, 8, 46,
	1, 2, 1176, 1177, 5, 92, 47, 2, 1177, 1178, 8, 46, 1, 2, 1178, 1186, 3,
	2, 2, 2, 1179, 1180, 12, 4, 2, 2, 1180, 1181, 7, 17, 2, 2, 1181, 1182,
	5, 92, 47, 2, 1182, 1183, 8, 46, 1, 2, 1183, 1185, 3, 2, 2, 2, 1184, 1179,
	3, 2, 2, 2, 1185, 1188, 3, 2, 2, 2, 1186, 1184, 3, 2, 2, 2, 1186, 1187,
	3, 2, 2, 2, 1187, 91, 3, 2, 2, 2, 1188, 1186, 3, 2, 2, 2, 1189, 1190, 7,
	79, 2, 2, 1190, 1191, 7, 16, 2, 2, 1191, 1192, 5, 94, 48, 2, 1192, 1193,
	8, 47, 1, 2, 1193, 1200, 3, 2, 2, 2, 1194, 1195, 7, 79, 2, 2, 1195, 1196,
	7, 16, 2, 2, 1196, 1197, 5, 88, 45, 2, 1197, 1198, 8, 47, 1, 2, 1198, 1200,
	3, 2, 2, 2, 1199, 1189, 3, 2, 2, 2, 1199, 1194, 3, 2, 2, 2, 1200, 93, 3,
	2, 2, 2, 1201, 1202, 8, 48, 1, 2, 1202, 1203, 7, 40, 2, 2, 1203, 1204,
	7, 16, 2, 2, 1204, 1205, 7, 16, 2, 2, 1205, 1206, 7, 26, 2, 2, 1206, 1207,
	7, 9, 2, 2, 1207, 1208, 5, 94, 48, 2, 1208, 1209, 7, 17, 2, 2, 1209, 1210,
	5, 94, 48, 2, 1210, 1211, 7, 10, 2, 2, 1211, 1212, 8, 48, 1, 2, 1212, 1266,
	3, 2, 2, 2, 1213, 1214, 7, 41, 2, 2, 1214, 1215, 7, 16, 2, 2, 1215, 1216,
	7, 16, 2, 2, 1216, 1217, 7, 27, 2, 2, 1217, 1218, 7, 9, 2, 2, 1218, 1219,
	5, 94, 48, 2, 1219, 1220, 7, 17, 2, 2, 1220, 1221, 5, 94, 48, 2, 1221,
	1222, 7, 10, 2, 2, 1222, 1223, 8, 48, 1, 2, 1223, 1266, 3, 2, 2, 2, 1224,
	1225, 7, 25, 2, 2, 1225, 1226, 5, 94, 48, 21, 1226, 1227, 8, 48, 1, 2,
	1227, 1266, 3, 2, 2, 2, 1228, 1229, 7, 9, 2, 2, 1229, 1230, 5, 94, 48,
	2, 1230, 1231, 7, 10, 2, 2, 1231, 1232, 8, 48, 1, 2, 1232, 1266, 3, 2,
	2, 2, 1233, 1234, 7, 9, 2, 2, 1234, 1235, 5, 94, 48, 2, 1235, 1236, 7,
	10, 2, 2, 1236, 1237, 8, 48, 1, 2, 1237, 1266, 3, 2, 2, 2, 1238, 1239,
	7, 8, 2, 2, 1239, 1240, 5, 94, 48, 16, 1240, 1241, 8, 48, 1, 2, 1241, 1266,
	3, 2, 2, 2, 1242, 1243, 7, 79, 2, 2, 1243, 1244, 7, 20, 2, 2, 1244, 1245,
	7, 64, 2, 2, 1245, 1246, 7, 9, 2, 2, 1246, 1247, 5, 94, 48, 2, 1247, 1248,
	7, 10, 2, 2, 1248, 1249, 8, 48, 1, 2, 1249, 1266, 3, 2, 2, 2, 1250, 1251,
	7, 79, 2, 2, 1251, 1252, 7, 11, 2, 2, 1252, 1253, 5, 90, 46, 2, 1253, 1254,
	7, 12, 2, 2, 1254, 1255, 8, 48, 1, 2, 1255, 1266, 3, 2, 2, 2, 1256, 1257,
	5, 102, 52, 2, 1257, 1258, 8, 48, 1, 2, 1258, 1266, 3, 2, 2, 2, 1259, 1260,
	5, 96, 49, 2, 1260, 1261, 8, 48, 1, 2, 1261, 1266, 3, 2, 2, 2, 1262, 1263,
	5, 98, 50, 2, 1263, 1264, 8, 48, 1, 2, 1264, 1266, 3, 2, 2, 2, 1265, 1201,
	3, 2, 2, 2, 1265, 1213, 3, 2, 2, 2, 1265, 1224, 3, 2, 2, 2, 1265, 1228,
	3, 2, 2, 2, 1265, 1233, 3, 2, 2, 2, 1265, 1238, 3, 2, 2, 2, 1265, 1242,
	3, 2, 2, 2, 1265, 1250, 3, 2, 2, 2, 1265, 1256, 3, 2, 2, 2, 1265, 1259,
	3, 2, 2, 2, 1265, 1262, 3, 2, 2, 2, 1266, 1350, 3, 2, 2, 2, 1267, 1268,
	12, 24, 2, 2, 1268, 1269, 7, 28, 2, 2, 1269, 1270, 5, 94, 48, 25, 1270,
	1271, 8, 48, 1, 2, 1271, 1349, 3, 2, 2, 2, 1272, 1273, 12, 23, 2, 2, 1273,
	1274, 9, 2, 2, 2, 1274, 1275, 5, 94, 48, 24, 1275, 1276, 8, 48, 1, 2, 1276,
	1349, 3, 2, 2, 2, 1277, 1278, 12, 22, 2, 2, 1278, 1279, 9, 3, 2, 2, 1279,
	1280, 5, 94, 48, 23, 1280, 1281, 8, 48, 1, 2, 1281, 1349, 3, 2, 2, 2, 1282,
	1283, 12, 19, 2, 2, 1283, 1284, 9, 4, 2, 2, 1284, 1285, 5, 94, 48, 20,
	1285, 1286, 8, 48, 1, 2, 1286, 1349, 3, 2, 2, 2, 1287, 1288, 12, 17, 2,
	2, 1288, 1289, 9, 5, 2, 2, 1289, 1290, 5, 94, 48, 18, 1290, 1291, 8, 48,
	1, 2, 1291, 1349, 3, 2, 2, 2, 1292, 1293, 12, 25, 2, 2, 1293, 1294, 7,
	20, 2, 2, 1294, 1295, 7, 66, 2, 2, 1295, 1296, 7, 9, 2, 2, 1296, 1297,
	7, 10, 2, 2, 1297, 1349, 8, 48, 1, 2, 1298, 1299, 12, 14, 2, 2, 1299, 1300,
	7, 20, 2, 2, 1300, 1301, 7, 65, 2, 2, 1301, 1302, 7, 9, 2, 2, 1302, 1303,
	7, 21, 2, 2, 1303, 1304, 5, 94, 48, 2, 1304, 1305, 7, 10, 2, 2, 1305, 1306,
	8, 48, 1, 2, 1306, 1349, 3, 2, 2, 2, 1307, 1308, 12, 13, 2, 2, 1308, 1309,
	7, 20, 2, 2, 1309, 1310, 7, 67, 2, 2, 1310, 1311, 7, 9, 2, 2, 1311, 1312,
	7, 10, 2, 2, 1312, 1349, 8, 48, 1, 2, 1313, 1314, 12, 12, 2, 2, 1314, 1315,
	7, 20, 2, 2, 1315, 1316, 7, 68, 2, 2, 1316, 1317, 7, 9, 2, 2, 1317, 1318,
	7, 10, 2, 2, 1318, 1349, 8, 48, 1, 2, 1319, 1320, 12, 11, 2, 2, 1320, 1321,
	7, 20, 2, 2, 1321, 1322, 7, 69, 2, 2, 1322, 1323, 7, 9, 2, 2, 1323, 1324,
	7, 10, 2, 2, 1324, 1349, 8, 48, 1, 2, 1325, 1326, 12, 10, 2, 2, 1326, 1327,
	7, 70, 2, 2, 1327, 1328, 5, 56, 29, 2, 1328, 1329, 8, 48, 1, 2, 1329, 1349,
	3, 2, 2, 2, 1330, 1331, 12, 9, 2, 2, 1331, 1332, 7, 20, 2, 2, 1332, 1333,
	7, 72, 2, 2, 1333, 1334, 7, 9, 2, 2, 1334, 1335, 7, 10, 2, 2, 1335, 1349,
	8, 48, 1, 2, 1336, 1337, 12, 8, 2, 2, 1337, 1338, 7, 20, 2, 2, 1338, 1339,
	7, 73, 2, 2, 1339, 1340, 7, 9, 2, 2, 1340, 1341, 7, 10, 2, 2, 1341, 1349,
	8, 48, 1, 2, 1342, 1343, 12, 7, 2, 2, 1343, 1344, 7, 20, 2, 2, 1344, 1345,
	7, 74, 2, 2, 1345, 1346, 7, 9, 2, 2, 1346, 1347, 7, 10, 2, 2, 1347, 1349,
	8, 48, 1, 2, 1348, 1267, 3, 2, 2, 2, 1348, 1272, 3, 2, 2, 2, 1348, 1277,
	3, 2, 2, 2, 1348, 1282, 3, 2, 2, 2, 1348, 1287, 3, 2, 2, 2, 1348, 1292,
	3, 2, 2, 2, 1348, 1298, 3, 2, 2, 2, 1348, 1307, 3, 2, 2, 2, 1348, 1313,
	3, 2, 2, 2, 1348, 1319, 3, 2, 2, 2, 1348, 1325, 3, 2, 2, 2, 1348, 1330,
	3, 2, 2, 2, 1348, 1336, 3, 2, 2, 2, 1348, 1342, 3, 2, 2, 2, 1349, 1352,
	3, 2, 2, 2, 1350, 1348, 3, 2, 2, 2, 1350, 1351, 3, 2, 2, 2, 1351, 95, 3,
	2, 2, 2, 1352, 1350, 3, 2, 2, 2, 1353, 1354, 7, 79, 2, 2, 1354, 1355, 7,
	9, 2, 2, 1355, 1356, 7, 10, 2, 2, 1356, 1364, 8, 49, 1, 2, 1357, 1358,
	7, 79, 2, 2, 1358, 1359, 7, 9, 2, 2, 1359, 1360, 5, 28, 15, 2, 1360, 1361,
	7, 10, 2, 2, 1361, 1362, 8, 49, 1, 2, 1362, 1364, 3, 2, 2, 2, 1363, 1353,
	3, 2, 2, 2, 1363, 1357, 3, 2, 2, 2, 1364, 97, 3, 2, 2, 2, 1365, 1366, 7,
	3, 2, 2, 1366, 1379, 8, 50, 1, 2, 1367, 1368, 7, 4, 2, 2, 1368, 1379, 8,
	50, 1, 2, 1369, 1370, 9, 6, 2, 2, 1370, 1379, 8, 50, 1, 2, 1371, 1372,
	7, 6, 2, 2, 1372, 1379, 8, 50, 1, 2, 1373, 1374, 7, 5, 2, 2, 1374, 1379,
	8, 50, 1, 2, 1375, 1376, 5, 100, 51, 2, 1376, 1377, 8, 50, 1, 2, 1377,
	1379, 3, 2, 2, 2, 1378, 1365, 3, 2, 2, 2, 1378, 1367, 3, 2, 2, 2, 1378,
	1369, 3, 2, 2, 2, 1378, 1371, 3, 2, 2, 2, 1378, 1373, 3, 2, 2, 2, 1378,
	1375, 3, 2, 2, 2, 1379, 99, 3, 2, 2, 2, 1380, 1381, 8, 51, 1, 2, 1381,
	1382, 7, 79, 2, 2, 1382, 1383, 8, 51, 1, 2, 1383, 1392, 3, 2, 2, 2, 1384,
	1385, 12, 4, 2, 2, 1385, 1386, 7, 13, 2, 2, 1386, 1387, 5, 94, 48, 2, 1387,
	1388, 7, 14, 2, 2, 1388, 1389, 8, 51, 1, 2, 1389, 1391, 3, 2, 2, 2, 1390,
	1384, 3, 2, 2, 2, 1391, 1394, 3, 2, 2, 2, 1392, 1390, 3, 2, 2, 2, 1392,
	1393, 3, 2, 2, 2, 1393, 101, 3, 2, 2, 2, 1394, 1392, 3, 2, 2, 2, 1395,
	1396, 8, 52, 1, 2, 1396, 1397, 7, 79, 2, 2, 1397, 1398, 8, 52, 1, 2, 1398,
	1405, 3, 2, 2, 2, 1399, 1400, 12, 4, 2, 2, 1400, 1401, 7, 20, 2, 2, 1401,
	1402, 7, 79, 2, 2, 1402, 1404, 8, 52, 1, 2, 1403, 1399, 3, 2, 2, 2, 1404,
	1407, 3, 2, 2, 2, 1405, 1403, 3, 2, 2, 2, 1405, 1406, 3, 2, 2, 2, 1406,
	103, 3, 2, 2, 2, 1407, 1405, 3, 2, 2, 2, 53, 110, 167, 184, 196, 216, 236,
	258, 385, 398, 438, 452, 463, 477, 479, 506, 546, 582, 598, 665, 700, 731,
	743, 767, 779, 796, 806, 829, 845, 874, 898, 911, 925, 955, 972, 984, 1017,
	1030, 1048, 1084, 1143, 1170, 1172, 1186, 1199, 1265, 1348, 1350, 1363,
	1378, 1392, 1405,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "", "'!'", "'('", "')'", "'{'", "'}'", "'['", "']'",
	"';'", "':'", "','", "'_'", "'|'", "'.'", "'&'", "'*'", "'+'", "'/'", "'-'",
	"'pow'", "'powf'", "'%'", "'!='", "'=='", "'>='", "'<='", "'>'", "'<'",
	"'='", "'&&'", "'||'", "'true'", "'false'", "'i64'", "'f64'", "'bool'",
	"'char'", "'&str'", "'String'", "'usize'", "'println'", "'let'", "'mut'",
	"'if'", "'else'", "'loop'", "'while'", "'match'", "'for'", "'in'", "'break'",
	"'struct'", "", "'new'", "'with_capacity'", "'push'", "'insert'", "'remove'",
	"'contains'", "'len'", "'chars'", "'to_string'", "'to_owned'", "'as'",
	"'continue'", "'abs'", "'sqrt'", "'clone'", "'fn'", "'return'", "'pub'",
	"'mod'",
}
var symbolicNames = []string{
	"", "NUMBER", "FLOAT_NUM", "CHAR_2", "CADENA", "CMT", "EXCLA", "PARA",
	"PARC", "LLAVEA", "LLAVEC", "CORCHA", "CORCHC", "PYC", "DPTS", "COMA",
	"DEFAUL", "OR_MATCH", "PNT", "PUNTERO", "MUL", "SUM", "DIV", "REST", "POW",
	"POWF", "MODUL", "DIFERENCIACION", "IGUALACION", "MAYORIGUAL", "MENORIGUAL",
	"MAYOR", "MENOR", "IGUAL", "AND", "OR", "TRUE", "FALSE", "INT", "FLOAT",
	"BOOLEAN", "CHAR", "STR", "STRING", "USIZE", "PRINT", "LET", "MUT", "IF",
	"ELSE", "LOOP", "WHILE", "MATCH", "FOR", "IN", "BRE", "STRUCT", "VEC",
	"NEWI", "WITH_CAP", "PUSH", "INSERT", "REMOVE", "CONTAINS", "LEN", "TOCHARS",
	"TOSTRING", "TOOWNED", "CASTEO", "CONTINIU", "ABOSLU", "RAIZITA", "CLONATION",
	"FUNCT", "RETURNASO", "PUBLI", "MODULO", "ID", "WS",
}

var ruleNames = []string{
	"start", "instrucciones", "instruccion", "sent_Modulos", "intructions_modulos",
	"instruct_modulos", "sent_struct", "atributos_struct", "atributos_struct_decl",
	"sent_funcion", "params_funcion", "params_funcion_decl", "sent_Llamada",
	"params_llamada", "funciones_Trans", "declaracion", "array_decl", "array_decl_array",
	"vector_decl", "vector_expr", "sent_funciones_Vec", "sentencias_expr",
	"sent_matchexpr", "matchexpr_listbrazos", "list_brazosexpr", "matchexpr_listbrazosexpr_listexpr",
	"el_defaultexpr", "tipo", "asignacion", "sent_if_expr", "sent_loop_expr",
	"printaso", "list_expre_print", "list_expre_vec_arr", "sent_if", "sent_match",
	"match_listbrazos", "list_brazos", "match_listbrazos_listexpr", "el_default",
	"sent_loop", "sent_while", "sent_ForIn", "expression_vec_Arr", "atributos_struct_exp",
	"atributos_struct_decl_exp", "expression", "llamada_expre", "primitivo",
	"list_array", "llamadas_structs",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type Interprete struct {
	*antlr.BaseParser
}

func NewInterprete(input antlr.TokenStream) *Interprete {
	this := new(Interprete)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Interprete.g4"

	return this
}

// Interprete tokens.
const (
	InterpreteEOF            = antlr.TokenEOF
	InterpreteNUMBER         = 1
	InterpreteFLOAT_NUM      = 2
	InterpreteCHAR_2         = 3
	InterpreteCADENA         = 4
	InterpreteCMT            = 5
	InterpreteEXCLA          = 6
	InterpretePARA           = 7
	InterpretePARC           = 8
	InterpreteLLAVEA         = 9
	InterpreteLLAVEC         = 10
	InterpreteCORCHA         = 11
	InterpreteCORCHC         = 12
	InterpretePYC            = 13
	InterpreteDPTS           = 14
	InterpreteCOMA           = 15
	InterpreteDEFAUL         = 16
	InterpreteOR_MATCH       = 17
	InterpretePNT            = 18
	InterpretePUNTERO        = 19
	InterpreteMUL            = 20
	InterpreteSUM            = 21
	InterpreteDIV            = 22
	InterpreteREST           = 23
	InterpretePOW            = 24
	InterpretePOWF           = 25
	InterpreteMODUL          = 26
	InterpreteDIFERENCIACION = 27
	InterpreteIGUALACION     = 28
	InterpreteMAYORIGUAL     = 29
	InterpreteMENORIGUAL     = 30
	InterpreteMAYOR          = 31
	InterpreteMENOR          = 32
	InterpreteIGUAL          = 33
	InterpreteAND            = 34
	InterpreteOR             = 35
	InterpreteTRUE           = 36
	InterpreteFALSE          = 37
	InterpreteINT            = 38
	InterpreteFLOAT          = 39
	InterpreteBOOLEAN        = 40
	InterpreteCHAR           = 41
	InterpreteSTR            = 42
	InterpreteSTRING         = 43
	InterpreteUSIZE          = 44
	InterpretePRINT          = 45
	InterpreteLET            = 46
	InterpreteMUT            = 47
	InterpreteIF             = 48
	InterpreteELSE           = 49
	InterpreteLOOP           = 50
	InterpreteWHILE          = 51
	InterpreteMATCH          = 52
	InterpreteFOR            = 53
	InterpreteIN             = 54
	InterpreteBRE            = 55
	InterpreteSTRUCT         = 56
	InterpreteVEC            = 57
	InterpreteNEWI           = 58
	InterpreteWITH_CAP       = 59
	InterpretePUSH           = 60
	InterpreteINSERT         = 61
	InterpreteREMOVE         = 62
	InterpreteCONTAINS       = 63
	InterpreteLEN            = 64
	InterpreteTOCHARS        = 65
	InterpreteTOSTRING       = 66
	InterpreteTOOWNED        = 67
	InterpreteCASTEO         = 68
	InterpreteCONTINIU       = 69
	InterpreteABOSLU         = 70
	InterpreteRAIZITA        = 71
	InterpreteCLONATION      = 72
	InterpreteFUNCT          = 73
	InterpreteRETURNASO      = 74
	InterpretePUBLI          = 75
	InterpreteMODULO         = 76
	InterpreteID             = 77
	InterpreteWS             = 78
)

// Interprete rules.
const (
	InterpreteRULE_start                             = 0
	InterpreteRULE_instrucciones                     = 1
	InterpreteRULE_instruccion                       = 2
	InterpreteRULE_sent_Modulos                      = 3
	InterpreteRULE_intructions_modulos               = 4
	InterpreteRULE_instruct_modulos                  = 5
	InterpreteRULE_sent_struct                       = 6
	InterpreteRULE_atributos_struct                  = 7
	InterpreteRULE_atributos_struct_decl             = 8
	InterpreteRULE_sent_funcion                      = 9
	InterpreteRULE_params_funcion                    = 10
	InterpreteRULE_params_funcion_decl               = 11
	InterpreteRULE_sent_Llamada                      = 12
	InterpreteRULE_params_llamada                    = 13
	InterpreteRULE_funciones_Trans                   = 14
	InterpreteRULE_declaracion                       = 15
	InterpreteRULE_array_decl                        = 16
	InterpreteRULE_array_decl_array                  = 17
	InterpreteRULE_vector_decl                       = 18
	InterpreteRULE_vector_expr                       = 19
	InterpreteRULE_sent_funciones_Vec                = 20
	InterpreteRULE_sentencias_expr                   = 21
	InterpreteRULE_sent_matchexpr                    = 22
	InterpreteRULE_matchexpr_listbrazos              = 23
	InterpreteRULE_list_brazosexpr                   = 24
	InterpreteRULE_matchexpr_listbrazosexpr_listexpr = 25
	InterpreteRULE_el_defaultexpr                    = 26
	InterpreteRULE_tipo                              = 27
	InterpreteRULE_asignacion                        = 28
	InterpreteRULE_sent_if_expr                      = 29
	InterpreteRULE_sent_loop_expr                    = 30
	InterpreteRULE_printaso                          = 31
	InterpreteRULE_list_expre_print                  = 32
	InterpreteRULE_list_expre_vec_arr                = 33
	InterpreteRULE_sent_if                           = 34
	InterpreteRULE_sent_match                        = 35
	InterpreteRULE_match_listbrazos                  = 36
	InterpreteRULE_list_brazos                       = 37
	InterpreteRULE_match_listbrazos_listexpr         = 38
	InterpreteRULE_el_default                        = 39
	InterpreteRULE_sent_loop                         = 40
	InterpreteRULE_sent_while                        = 41
	InterpreteRULE_sent_ForIn                        = 42
	InterpreteRULE_expression_vec_Arr                = 43
	InterpreteRULE_atributos_struct_exp              = 44
	InterpreteRULE_atributos_struct_decl_exp         = 45
	InterpreteRULE_expression                        = 46
	InterpreteRULE_llamada_expre                     = 47
	InterpreteRULE_primitivo                         = 48
	InterpreteRULE_list_array                        = 49
	InterpreteRULE_llamadas_structs                  = 50
)

// IStartContext is an interface to support dynamic dispatch.
type IStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsStartContext differentiates from other interfaces.
	IsStartContext()
}

type StartContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	lista          *arrayList.List
	_instrucciones IInstruccionesContext
}

func NewEmptyStartContext() *StartContext {
	var p = new(StartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_start
	return p
}

func (*StartContext) IsStartContext() {}

func NewStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartContext {
	var p = new(StartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_start

	return p
}

func (s *StartContext) GetParser() antlr.Parser { return s.parser }

func (s *StartContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *StartContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *StartContext) GetLista() *arrayList.List { return s.lista }

func (s *StartContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *StartContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *StartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterStart(s)
	}
}

func (s *StartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitStart(s)
	}
}

func (p *Interprete) Start() (localctx IStartContext) {
	localctx = NewStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, InterpreteRULE_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(102)

		var _x = p.Instrucciones()

		localctx.(*StartContext)._instrucciones = _x
	}
	localctx.(*StartContext).lista = localctx.(*StartContext).Get_instrucciones().GetL()

	return localctx
}

// IInstruccionesContext is an interface to support dynamic dispatch.
type IInstruccionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsInstruccionesContext differentiates from other interfaces.
	IsInstruccionesContext()
}

type InstruccionesContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	l            *arrayList.List
	_instruccion IInstruccionContext
	e            []IInstruccionContext
}

func NewEmptyInstruccionesContext() *InstruccionesContext {
	var p = new(InstruccionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_instrucciones
	return p
}

func (*InstruccionesContext) IsInstruccionesContext() {}

func NewInstruccionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesContext {
	var p = new(InstruccionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_instrucciones

	return p
}

func (s *InstruccionesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *InstruccionesContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *InstruccionesContext) GetE() []IInstruccionContext { return s.e }

func (s *InstruccionesContext) SetE(v []IInstruccionContext) { s.e = v }

func (s *InstruccionesContext) GetL() *arrayList.List { return s.l }

func (s *InstruccionesContext) SetL(v *arrayList.List) { s.l = v }

func (s *InstruccionesContext) AllInstruccion() []IInstruccionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionContext)(nil)).Elem())
	var tst = make([]IInstruccionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionContext)
		}
	}

	return tst
}

func (s *InstruccionesContext) Instruccion(i int) IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *InstruccionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterInstrucciones(s)
	}
}

func (s *InstruccionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitInstrucciones(s)
	}
}

func (p *Interprete) Instrucciones() (localctx IInstruccionesContext) {
	localctx = NewInstruccionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, InterpreteRULE_instrucciones)

	localctx.(*InstruccionesContext).l = arrayList.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(108)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-45)&-(0x1f+1)) == 0 && ((1<<uint((_la-45)))&((1<<(InterpretePRINT-45))|(1<<(InterpreteLET-45))|(1<<(InterpreteIF-45))|(1<<(InterpreteLOOP-45))|(1<<(InterpreteWHILE-45))|(1<<(InterpreteMATCH-45))|(1<<(InterpreteFOR-45))|(1<<(InterpreteBRE-45))|(1<<(InterpreteSTRUCT-45))|(1<<(InterpreteCONTINIU-45))|(1<<(InterpreteFUNCT-45))|(1<<(InterpreteRETURNASO-45))|(1<<(InterpretePUBLI-45))|(1<<(InterpreteMODULO-45)))) != 0) || _la == InterpreteID {
		{
			p.SetState(105)

			var _x = p.Instruccion()

			localctx.(*InstruccionesContext)._instruccion = _x
		}
		localctx.(*InstruccionesContext).e = append(localctx.(*InstruccionesContext).e, localctx.(*InstruccionesContext)._instruccion)

		p.SetState(110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesContext).l.Add(e.GetInstr())
	}

	return localctx
}

// IInstruccionContext is an interface to support dynamic dispatch.
type IInstruccionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_printaso returns the _printaso rule contexts.
	Get_printaso() IPrintasoContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_vector_decl returns the _vector_decl rule contexts.
	Get_vector_decl() IVector_declContext

	// Get_array_decl returns the _array_decl rule contexts.
	Get_array_decl() IArray_declContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_sent_if returns the _sent_if rule contexts.
	Get_sent_if() ISent_ifContext

	// Get_sent_loop returns the _sent_loop rule contexts.
	Get_sent_loop() ISent_loopContext

	// Get_sent_while returns the _sent_while rule contexts.
	Get_sent_while() ISent_whileContext

	// Get_sent_match returns the _sent_match rule contexts.
	Get_sent_match() ISent_matchContext

	// Get_sent_funciones_Vec returns the _sent_funciones_Vec rule contexts.
	Get_sent_funciones_Vec() ISent_funciones_VecContext

	// Get_sent_ForIn returns the _sent_ForIn rule contexts.
	Get_sent_ForIn() ISent_ForInContext

	// Get_funciones_Trans returns the _funciones_Trans rule contexts.
	Get_funciones_Trans() IFunciones_TransContext

	// Get_sent_funcion returns the _sent_funcion rule contexts.
	Get_sent_funcion() ISent_funcionContext

	// Get_sent_Llamada returns the _sent_Llamada rule contexts.
	Get_sent_Llamada() ISent_LlamadaContext

	// Get_sent_struct returns the _sent_struct rule contexts.
	Get_sent_struct() ISent_structContext

	// Get_sent_Modulos returns the _sent_Modulos rule contexts.
	Get_sent_Modulos() ISent_ModulosContext

	// Set_printaso sets the _printaso rule contexts.
	Set_printaso(IPrintasoContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_vector_decl sets the _vector_decl rule contexts.
	Set_vector_decl(IVector_declContext)

	// Set_array_decl sets the _array_decl rule contexts.
	Set_array_decl(IArray_declContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_sent_if sets the _sent_if rule contexts.
	Set_sent_if(ISent_ifContext)

	// Set_sent_loop sets the _sent_loop rule contexts.
	Set_sent_loop(ISent_loopContext)

	// Set_sent_while sets the _sent_while rule contexts.
	Set_sent_while(ISent_whileContext)

	// Set_sent_match sets the _sent_match rule contexts.
	Set_sent_match(ISent_matchContext)

	// Set_sent_funciones_Vec sets the _sent_funciones_Vec rule contexts.
	Set_sent_funciones_Vec(ISent_funciones_VecContext)

	// Set_sent_ForIn sets the _sent_ForIn rule contexts.
	Set_sent_ForIn(ISent_ForInContext)

	// Set_funciones_Trans sets the _funciones_Trans rule contexts.
	Set_funciones_Trans(IFunciones_TransContext)

	// Set_sent_funcion sets the _sent_funcion rule contexts.
	Set_sent_funcion(ISent_funcionContext)

	// Set_sent_Llamada sets the _sent_Llamada rule contexts.
	Set_sent_Llamada(ISent_LlamadaContext)

	// Set_sent_struct sets the _sent_struct rule contexts.
	Set_sent_struct(ISent_structContext)

	// Set_sent_Modulos sets the _sent_Modulos rule contexts.
	Set_sent_Modulos(ISent_ModulosContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsInstruccionContext differentiates from other interfaces.
	IsInstruccionContext()
}

type InstruccionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	instr               interfaces.Instruction
	_printaso           IPrintasoContext
	_declaracion        IDeclaracionContext
	_vector_decl        IVector_declContext
	_array_decl         IArray_declContext
	_asignacion         IAsignacionContext
	_sent_if            ISent_ifContext
	_sent_loop          ISent_loopContext
	_sent_while         ISent_whileContext
	_sent_match         ISent_matchContext
	_sent_funciones_Vec ISent_funciones_VecContext
	_sent_ForIn         ISent_ForInContext
	_funciones_Trans    IFunciones_TransContext
	_sent_funcion       ISent_funcionContext
	_sent_Llamada       ISent_LlamadaContext
	_sent_struct        ISent_structContext
	_sent_Modulos       ISent_ModulosContext
}

func NewEmptyInstruccionContext() *InstruccionContext {
	var p = new(InstruccionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_instruccion
	return p
}

func (*InstruccionContext) IsInstruccionContext() {}

func NewInstruccionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionContext {
	var p = new(InstruccionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_instruccion

	return p
}

func (s *InstruccionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionContext) Get_printaso() IPrintasoContext { return s._printaso }

func (s *InstruccionContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionContext) Get_vector_decl() IVector_declContext { return s._vector_decl }

func (s *InstruccionContext) Get_array_decl() IArray_declContext { return s._array_decl }

func (s *InstruccionContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *InstruccionContext) Get_sent_if() ISent_ifContext { return s._sent_if }

func (s *InstruccionContext) Get_sent_loop() ISent_loopContext { return s._sent_loop }

func (s *InstruccionContext) Get_sent_while() ISent_whileContext { return s._sent_while }

func (s *InstruccionContext) Get_sent_match() ISent_matchContext { return s._sent_match }

func (s *InstruccionContext) Get_sent_funciones_Vec() ISent_funciones_VecContext {
	return s._sent_funciones_Vec
}

func (s *InstruccionContext) Get_sent_ForIn() ISent_ForInContext { return s._sent_ForIn }

func (s *InstruccionContext) Get_funciones_Trans() IFunciones_TransContext { return s._funciones_Trans }

func (s *InstruccionContext) Get_sent_funcion() ISent_funcionContext { return s._sent_funcion }

func (s *InstruccionContext) Get_sent_Llamada() ISent_LlamadaContext { return s._sent_Llamada }

func (s *InstruccionContext) Get_sent_struct() ISent_structContext { return s._sent_struct }

func (s *InstruccionContext) Get_sent_Modulos() ISent_ModulosContext { return s._sent_Modulos }

func (s *InstruccionContext) Set_printaso(v IPrintasoContext) { s._printaso = v }

func (s *InstruccionContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionContext) Set_vector_decl(v IVector_declContext) { s._vector_decl = v }

func (s *InstruccionContext) Set_array_decl(v IArray_declContext) { s._array_decl = v }

func (s *InstruccionContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *InstruccionContext) Set_sent_if(v ISent_ifContext) { s._sent_if = v }

func (s *InstruccionContext) Set_sent_loop(v ISent_loopContext) { s._sent_loop = v }

func (s *InstruccionContext) Set_sent_while(v ISent_whileContext) { s._sent_while = v }

func (s *InstruccionContext) Set_sent_match(v ISent_matchContext) { s._sent_match = v }

func (s *InstruccionContext) Set_sent_funciones_Vec(v ISent_funciones_VecContext) {
	s._sent_funciones_Vec = v
}

func (s *InstruccionContext) Set_sent_ForIn(v ISent_ForInContext) { s._sent_ForIn = v }

func (s *InstruccionContext) Set_funciones_Trans(v IFunciones_TransContext) { s._funciones_Trans = v }

func (s *InstruccionContext) Set_sent_funcion(v ISent_funcionContext) { s._sent_funcion = v }

func (s *InstruccionContext) Set_sent_Llamada(v ISent_LlamadaContext) { s._sent_Llamada = v }

func (s *InstruccionContext) Set_sent_struct(v ISent_structContext) { s._sent_struct = v }

func (s *InstruccionContext) Set_sent_Modulos(v ISent_ModulosContext) { s._sent_Modulos = v }

func (s *InstruccionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *InstruccionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *InstruccionContext) Printaso() IPrintasoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintasoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintasoContext)
}

func (s *InstruccionContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *InstruccionContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionContext) Vector_decl() IVector_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVector_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVector_declContext)
}

func (s *InstruccionContext) Array_decl() IArray_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_declContext)
}

func (s *InstruccionContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *InstruccionContext) Sent_if() ISent_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ifContext)
}

func (s *InstruccionContext) Sent_loop() ISent_loopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_loopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_loopContext)
}

func (s *InstruccionContext) Sent_while() ISent_whileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_whileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_whileContext)
}

func (s *InstruccionContext) Sent_match() ISent_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_matchContext)
}

func (s *InstruccionContext) Sent_funciones_Vec() ISent_funciones_VecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_funciones_VecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_funciones_VecContext)
}

func (s *InstruccionContext) Sent_ForIn() ISent_ForInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ForInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ForInContext)
}

func (s *InstruccionContext) Funciones_Trans() IFunciones_TransContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunciones_TransContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunciones_TransContext)
}

func (s *InstruccionContext) Sent_funcion() ISent_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_funcionContext)
}

func (s *InstruccionContext) Sent_Llamada() ISent_LlamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_LlamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_LlamadaContext)
}

func (s *InstruccionContext) Sent_struct() ISent_structContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_structContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_structContext)
}

func (s *InstruccionContext) Sent_Modulos() ISent_ModulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ModulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ModulosContext)
}

func (s *InstruccionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterInstruccion(s)
	}
}

func (s *InstruccionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitInstruccion(s)
	}
}

func (p *Interprete) Instruccion() (localctx IInstruccionContext) {
	localctx = NewInstruccionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, InterpreteRULE_instruccion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(165)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(113)

			var _x = p.Printaso()

			localctx.(*InstruccionContext)._printaso = _x
		}
		{
			p.SetState(114)
			p.Match(InterpretePYC)
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_printaso().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(117)

			var _x = p.Printaso()

			localctx.(*InstruccionContext)._printaso = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_printaso().GetInstr()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(120)

			var _x = p.Declaracion()

			localctx.(*InstruccionContext)._declaracion = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_declaracion().GetInstr()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(123)

			var _x = p.Vector_decl()

			localctx.(*InstruccionContext)._vector_decl = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_vector_decl().GetInstr()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(126)

			var _x = p.Array_decl()

			localctx.(*InstruccionContext)._array_decl = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_array_decl().GetInstr()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(129)

			var _x = p.Asignacion()

			localctx.(*InstruccionContext)._asignacion = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_asignacion().GetInstr()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(132)

			var _x = p.Sent_if()

			localctx.(*InstruccionContext)._sent_if = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_if().GetInstr()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(135)

			var _x = p.Sent_loop()

			localctx.(*InstruccionContext)._sent_loop = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_loop().GetInstr()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(138)

			var _x = p.Sent_while()

			localctx.(*InstruccionContext)._sent_while = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_while().GetInstr()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(141)

			var _x = p.Sent_match()

			localctx.(*InstruccionContext)._sent_match = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_match().GetInstr()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(144)

			var _x = p.Sent_funciones_Vec()

			localctx.(*InstruccionContext)._sent_funciones_Vec = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_funciones_Vec().GetInstr()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(147)

			var _x = p.Sent_ForIn()

			localctx.(*InstruccionContext)._sent_ForIn = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_ForIn().GetInstr()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(150)

			var _x = p.Funciones_Trans()

			localctx.(*InstruccionContext)._funciones_Trans = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_funciones_Trans().GetInstr()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(153)

			var _x = p.Sent_funcion()

			localctx.(*InstruccionContext)._sent_funcion = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_funcion().GetInstr()

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(156)

			var _x = p.Sent_Llamada()

			localctx.(*InstruccionContext)._sent_Llamada = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_Llamada().GetInstr()

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(159)

			var _x = p.Sent_struct()

			localctx.(*InstruccionContext)._sent_struct = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_struct().GetInstr()

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(162)

			var _x = p.Sent_Modulos()

			localctx.(*InstruccionContext)._sent_Modulos = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_sent_Modulos().GetInstr()

	}

	return localctx
}

// ISent_ModulosContext is an interface to support dynamic dispatch.
type ISent_ModulosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MODULO returns the _MODULO token.
	Get_MODULO() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_MODULO sets the _MODULO token.
	Set_MODULO(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetLi returns the li rule contexts.
	GetLi() IIntructions_modulosContext

	// SetLi sets the li rule contexts.
	SetLi(IIntructions_modulosContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_ModulosContext differentiates from other interfaces.
	IsSent_ModulosContext()
}

type Sent_ModulosContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	instr   interfaces.Instruction
	_MODULO antlr.Token
	_ID     antlr.Token
	li      IIntructions_modulosContext
}

func NewEmptySent_ModulosContext() *Sent_ModulosContext {
	var p = new(Sent_ModulosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_Modulos
	return p
}

func (*Sent_ModulosContext) IsSent_ModulosContext() {}

func NewSent_ModulosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_ModulosContext {
	var p = new(Sent_ModulosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_Modulos

	return p
}

func (s *Sent_ModulosContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_ModulosContext) Get_MODULO() antlr.Token { return s._MODULO }

func (s *Sent_ModulosContext) Get_ID() antlr.Token { return s._ID }

func (s *Sent_ModulosContext) Set_MODULO(v antlr.Token) { s._MODULO = v }

func (s *Sent_ModulosContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Sent_ModulosContext) GetLi() IIntructions_modulosContext { return s.li }

func (s *Sent_ModulosContext) SetLi(v IIntructions_modulosContext) { s.li = v }

func (s *Sent_ModulosContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_ModulosContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_ModulosContext) PUBLI() antlr.TerminalNode {
	return s.GetToken(InterpretePUBLI, 0)
}

func (s *Sent_ModulosContext) MODULO() antlr.TerminalNode {
	return s.GetToken(InterpreteMODULO, 0)
}

func (s *Sent_ModulosContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Sent_ModulosContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_ModulosContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_ModulosContext) Intructions_modulos() IIntructions_modulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntructions_modulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntructions_modulosContext)
}

func (s *Sent_ModulosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_ModulosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_ModulosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_Modulos(s)
	}
}

func (s *Sent_ModulosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_Modulos(s)
	}
}

func (p *Interprete) Sent_Modulos() (localctx ISent_ModulosContext) {
	localctx = NewSent_ModulosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, InterpreteRULE_sent_Modulos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(182)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case InterpretePUBLI:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(167)
			p.Match(InterpretePUBLI)
		}
		{
			p.SetState(168)

			var _m = p.Match(InterpreteMODULO)

			localctx.(*Sent_ModulosContext)._MODULO = _m
		}
		{
			p.SetState(169)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_ModulosContext)._ID = _m
		}
		{
			p.SetState(170)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(171)

			var _x = p.intructions_modulos(0)

			localctx.(*Sent_ModulosContext).li = _x
		}
		{
			p.SetState(172)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_ModulosContext).instr = modulos.NewModulos((func() string {
			if localctx.(*Sent_ModulosContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_ModulosContext).Get_ID().GetText()
			}
		}()), interfaces.PUBLICO, localctx.(*Sent_ModulosContext).GetLi().GetL(), (func() int {
			if localctx.(*Sent_ModulosContext).Get_MODULO() == nil {
				return 0
			} else {
				return localctx.(*Sent_ModulosContext).Get_MODULO().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ModulosContext).Get_MODULO() == nil {
				return 0
			} else {
				return localctx.(*Sent_ModulosContext).Get_MODULO().GetColumn()
			}
		}()))

	case InterpreteMODULO:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(175)

			var _m = p.Match(InterpreteMODULO)

			localctx.(*Sent_ModulosContext)._MODULO = _m
		}
		{
			p.SetState(176)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_ModulosContext)._ID = _m
		}
		{
			p.SetState(177)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(178)

			var _x = p.intructions_modulos(0)

			localctx.(*Sent_ModulosContext).li = _x
		}
		{
			p.SetState(179)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_ModulosContext).instr = modulos.NewModulos((func() string {
			if localctx.(*Sent_ModulosContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_ModulosContext).Get_ID().GetText()
			}
		}()), interfaces.PRIVADO, localctx.(*Sent_ModulosContext).GetLi().GetL(), (func() int {
			if localctx.(*Sent_ModulosContext).Get_MODULO() == nil {
				return 0
			} else {
				return localctx.(*Sent_ModulosContext).Get_MODULO().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ModulosContext).Get_MODULO() == nil {
				return 0
			} else {
				return localctx.(*Sent_ModulosContext).Get_MODULO().GetColumn()
			}
		}()))

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIntructions_modulosContext is an interface to support dynamic dispatch.
type IIntructions_modulosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IIntructions_modulosContext

	// Get_instruct_modulos returns the _instruct_modulos rule contexts.
	Get_instruct_modulos() IInstruct_modulosContext

	// SetLi sets the li rule contexts.
	SetLi(IIntructions_modulosContext)

	// Set_instruct_modulos sets the _instruct_modulos rule contexts.
	Set_instruct_modulos(IInstruct_modulosContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsIntructions_modulosContext differentiates from other interfaces.
	IsIntructions_modulosContext()
}

type Intructions_modulosContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	l                 *arrayList.List
	li                IIntructions_modulosContext
	_instruct_modulos IInstruct_modulosContext
}

func NewEmptyIntructions_modulosContext() *Intructions_modulosContext {
	var p = new(Intructions_modulosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_intructions_modulos
	return p
}

func (*Intructions_modulosContext) IsIntructions_modulosContext() {}

func NewIntructions_modulosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Intructions_modulosContext {
	var p = new(Intructions_modulosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_intructions_modulos

	return p
}

func (s *Intructions_modulosContext) GetParser() antlr.Parser { return s.parser }

func (s *Intructions_modulosContext) GetLi() IIntructions_modulosContext { return s.li }

func (s *Intructions_modulosContext) Get_instruct_modulos() IInstruct_modulosContext {
	return s._instruct_modulos
}

func (s *Intructions_modulosContext) SetLi(v IIntructions_modulosContext) { s.li = v }

func (s *Intructions_modulosContext) Set_instruct_modulos(v IInstruct_modulosContext) {
	s._instruct_modulos = v
}

func (s *Intructions_modulosContext) GetL() *arrayList.List { return s.l }

func (s *Intructions_modulosContext) SetL(v *arrayList.List) { s.l = v }

func (s *Intructions_modulosContext) Instruct_modulos() IInstruct_modulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruct_modulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruct_modulosContext)
}

func (s *Intructions_modulosContext) Intructions_modulos() IIntructions_modulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntructions_modulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntructions_modulosContext)
}

func (s *Intructions_modulosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Intructions_modulosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Intructions_modulosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterIntructions_modulos(s)
	}
}

func (s *Intructions_modulosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitIntructions_modulos(s)
	}
}

func (p *Interprete) Intructions_modulos() (localctx IIntructions_modulosContext) {
	return p.intructions_modulos(0)
}

func (p *Interprete) intructions_modulos(_p int) (localctx IIntructions_modulosContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewIntructions_modulosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IIntructions_modulosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 8
	p.EnterRecursionRule(localctx, 8, InterpreteRULE_intructions_modulos, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(185)

		var _x = p.Instruct_modulos()

		localctx.(*Intructions_modulosContext)._instruct_modulos = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Intructions_modulosContext).Get_instruct_modulos().GetInstr())
	localctx.(*Intructions_modulosContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(194)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewIntructions_modulosContext(p, _parentctx, _parentState)
			localctx.(*Intructions_modulosContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_intructions_modulos)
			p.SetState(188)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(189)

				var _x = p.Instruct_modulos()

				localctx.(*Intructions_modulosContext)._instruct_modulos = _x
			}

			localctx.(*Intructions_modulosContext).GetLi().GetL().Add(localctx.(*Intructions_modulosContext).Get_instruct_modulos().GetInstr())
			localctx.(*Intructions_modulosContext).l = localctx.(*Intructions_modulosContext).GetLi().GetL()

		}
		p.SetState(196)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// IInstruct_modulosContext is an interface to support dynamic dispatch.
type IInstruct_modulosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PUBLI returns the _PUBLI token.
	Get_PUBLI() antlr.Token

	// Set_PUBLI sets the _PUBLI token.
	Set_PUBLI(antlr.Token)

	// Get_sent_Modulos returns the _sent_Modulos rule contexts.
	Get_sent_Modulos() ISent_ModulosContext

	// Get_sent_funcion returns the _sent_funcion rule contexts.
	Get_sent_funcion() ISent_funcionContext

	// GetSf returns the sf rule contexts.
	GetSf() ISent_funcionContext

	// Get_sent_struct returns the _sent_struct rule contexts.
	Get_sent_struct() ISent_structContext

	// GetSs returns the ss rule contexts.
	GetSs() ISent_structContext

	// Set_sent_Modulos sets the _sent_Modulos rule contexts.
	Set_sent_Modulos(ISent_ModulosContext)

	// Set_sent_funcion sets the _sent_funcion rule contexts.
	Set_sent_funcion(ISent_funcionContext)

	// SetSf sets the sf rule contexts.
	SetSf(ISent_funcionContext)

	// Set_sent_struct sets the _sent_struct rule contexts.
	Set_sent_struct(ISent_structContext)

	// SetSs sets the ss rule contexts.
	SetSs(ISent_structContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsInstruct_modulosContext differentiates from other interfaces.
	IsInstruct_modulosContext()
}

type Instruct_modulosContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	instr         interfaces.Instruction
	_sent_Modulos ISent_ModulosContext
	_PUBLI        antlr.Token
	_sent_funcion ISent_funcionContext
	sf            ISent_funcionContext
	_sent_struct  ISent_structContext
	ss            ISent_structContext
}

func NewEmptyInstruct_modulosContext() *Instruct_modulosContext {
	var p = new(Instruct_modulosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_instruct_modulos
	return p
}

func (*Instruct_modulosContext) IsInstruct_modulosContext() {}

func NewInstruct_modulosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Instruct_modulosContext {
	var p = new(Instruct_modulosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_instruct_modulos

	return p
}

func (s *Instruct_modulosContext) GetParser() antlr.Parser { return s.parser }

func (s *Instruct_modulosContext) Get_PUBLI() antlr.Token { return s._PUBLI }

func (s *Instruct_modulosContext) Set_PUBLI(v antlr.Token) { s._PUBLI = v }

func (s *Instruct_modulosContext) Get_sent_Modulos() ISent_ModulosContext { return s._sent_Modulos }

func (s *Instruct_modulosContext) Get_sent_funcion() ISent_funcionContext { return s._sent_funcion }

func (s *Instruct_modulosContext) GetSf() ISent_funcionContext { return s.sf }

func (s *Instruct_modulosContext) Get_sent_struct() ISent_structContext { return s._sent_struct }

func (s *Instruct_modulosContext) GetSs() ISent_structContext { return s.ss }

func (s *Instruct_modulosContext) Set_sent_Modulos(v ISent_ModulosContext) { s._sent_Modulos = v }

func (s *Instruct_modulosContext) Set_sent_funcion(v ISent_funcionContext) { s._sent_funcion = v }

func (s *Instruct_modulosContext) SetSf(v ISent_funcionContext) { s.sf = v }

func (s *Instruct_modulosContext) Set_sent_struct(v ISent_structContext) { s._sent_struct = v }

func (s *Instruct_modulosContext) SetSs(v ISent_structContext) { s.ss = v }

func (s *Instruct_modulosContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Instruct_modulosContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Instruct_modulosContext) Sent_Modulos() ISent_ModulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ModulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ModulosContext)
}

func (s *Instruct_modulosContext) PUBLI() antlr.TerminalNode {
	return s.GetToken(InterpretePUBLI, 0)
}

func (s *Instruct_modulosContext) Sent_funcion() ISent_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_funcionContext)
}

func (s *Instruct_modulosContext) Sent_struct() ISent_structContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_structContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_structContext)
}

func (s *Instruct_modulosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Instruct_modulosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Instruct_modulosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterInstruct_modulos(s)
	}
}

func (s *Instruct_modulosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitInstruct_modulos(s)
	}
}

func (p *Interprete) Instruct_modulos() (localctx IInstruct_modulosContext) {
	localctx = NewInstruct_modulosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, InterpreteRULE_instruct_modulos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(214)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(197)

			var _x = p.Sent_Modulos()

			localctx.(*Instruct_modulosContext)._sent_Modulos = _x
		}
		localctx.(*Instruct_modulosContext).instr = localctx.(*Instruct_modulosContext).Get_sent_Modulos().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(200)

			var _m = p.Match(InterpretePUBLI)

			localctx.(*Instruct_modulosContext)._PUBLI = _m
		}
		{
			p.SetState(201)

			var _x = p.Sent_funcion()

			localctx.(*Instruct_modulosContext)._sent_funcion = _x
		}
		localctx.(*Instruct_modulosContext).instr = modulos.NewFuncion_Mod(localctx.(*Instruct_modulosContext).Get_sent_funcion().GetInstr(), interfaces.PUBLICO, (func() int {
			if localctx.(*Instruct_modulosContext).Get_PUBLI() == nil {
				return 0
			} else {
				return localctx.(*Instruct_modulosContext).Get_PUBLI().GetLine()
			}
		}()), (func() int {
			if localctx.(*Instruct_modulosContext).Get_PUBLI() == nil {
				return 0
			} else {
				return localctx.(*Instruct_modulosContext).Get_PUBLI().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(204)

			var _x = p.Sent_funcion()

			localctx.(*Instruct_modulosContext).sf = _x
		}
		localctx.(*Instruct_modulosContext).instr = modulos.NewFuncion_Mod(localctx.(*Instruct_modulosContext).GetSf().GetInstr(), interfaces.PRIVADO, 0, 0)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(207)

			var _m = p.Match(InterpretePUBLI)

			localctx.(*Instruct_modulosContext)._PUBLI = _m
		}
		{
			p.SetState(208)

			var _x = p.Sent_struct()

			localctx.(*Instruct_modulosContext)._sent_struct = _x
		}
		localctx.(*Instruct_modulosContext).instr = modulos.NewStruct_Mod(localctx.(*Instruct_modulosContext).Get_sent_struct().GetInstr(), interfaces.PUBLICO, (func() int {
			if localctx.(*Instruct_modulosContext).Get_PUBLI() == nil {
				return 0
			} else {
				return localctx.(*Instruct_modulosContext).Get_PUBLI().GetLine()
			}
		}()), (func() int {
			if localctx.(*Instruct_modulosContext).Get_PUBLI() == nil {
				return 0
			} else {
				return localctx.(*Instruct_modulosContext).Get_PUBLI().GetColumn()
			}
		}()))

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(211)

			var _x = p.Sent_struct()

			localctx.(*Instruct_modulosContext).ss = _x
		}
		localctx.(*Instruct_modulosContext).instr = modulos.NewStruct_Mod(localctx.(*Instruct_modulosContext).GetSs().GetInstr(), interfaces.PUBLICO, 0, 0)

	}

	return localctx
}

// ISent_structContext is an interface to support dynamic dispatch.
type ISent_structContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_STRUCT returns the _STRUCT token.
	Get_STRUCT() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_STRUCT sets the _STRUCT token.
	Set_STRUCT(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_atributos_struct returns the _atributos_struct rule contexts.
	Get_atributos_struct() IAtributos_structContext

	// Set_atributos_struct sets the _atributos_struct rule contexts.
	Set_atributos_struct(IAtributos_structContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_structContext differentiates from other interfaces.
	IsSent_structContext()
}

type Sent_structContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruction
	_STRUCT           antlr.Token
	_ID               antlr.Token
	_atributos_struct IAtributos_structContext
}

func NewEmptySent_structContext() *Sent_structContext {
	var p = new(Sent_structContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_struct
	return p
}

func (*Sent_structContext) IsSent_structContext() {}

func NewSent_structContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_structContext {
	var p = new(Sent_structContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_struct

	return p
}

func (s *Sent_structContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_structContext) Get_STRUCT() antlr.Token { return s._STRUCT }

func (s *Sent_structContext) Get_ID() antlr.Token { return s._ID }

func (s *Sent_structContext) Set_STRUCT(v antlr.Token) { s._STRUCT = v }

func (s *Sent_structContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Sent_structContext) Get_atributos_struct() IAtributos_structContext {
	return s._atributos_struct
}

func (s *Sent_structContext) Set_atributos_struct(v IAtributos_structContext) {
	s._atributos_struct = v
}

func (s *Sent_structContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_structContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_structContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(InterpreteSTRUCT, 0)
}

func (s *Sent_structContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Sent_structContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_structContext) Atributos_struct() IAtributos_structContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_structContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_structContext)
}

func (s *Sent_structContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_structContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_structContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_structContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_struct(s)
	}
}

func (s *Sent_structContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_struct(s)
	}
}

func (p *Interprete) Sent_struct() (localctx ISent_structContext) {
	localctx = NewSent_structContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, InterpreteRULE_sent_struct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(216)

		var _m = p.Match(InterpreteSTRUCT)

		localctx.(*Sent_structContext)._STRUCT = _m
	}
	{
		p.SetState(217)

		var _m = p.Match(InterpreteID)

		localctx.(*Sent_structContext)._ID = _m
	}
	{
		p.SetState(218)
		p.Match(InterpreteLLAVEA)
	}
	{
		p.SetState(219)

		var _x = p.atributos_struct(0)

		localctx.(*Sent_structContext)._atributos_struct = _x
	}
	{
		p.SetState(220)
		p.Match(InterpreteLLAVEC)
	}
	localctx.(*Sent_structContext).instr = structs.NewStruct((func() string {
		if localctx.(*Sent_structContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*Sent_structContext).Get_ID().GetText()
		}
	}()), localctx.(*Sent_structContext).Get_atributos_struct().GetL(), (func() int {
		if localctx.(*Sent_structContext).Get_STRUCT() == nil {
			return 0
		} else {
			return localctx.(*Sent_structContext).Get_STRUCT().GetLine()
		}
	}()), (func() int {
		if localctx.(*Sent_structContext).Get_STRUCT() == nil {
			return 0
		} else {
			return localctx.(*Sent_structContext).Get_STRUCT().GetColumn()
		}
	}()))

	return localctx
}

// IAtributos_structContext is an interface to support dynamic dispatch.
type IAtributos_structContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IAtributos_structContext

	// Get_atributos_struct_decl returns the _atributos_struct_decl rule contexts.
	Get_atributos_struct_decl() IAtributos_struct_declContext

	// GetAsd returns the asd rule contexts.
	GetAsd() IAtributos_struct_declContext

	// SetLi sets the li rule contexts.
	SetLi(IAtributos_structContext)

	// Set_atributos_struct_decl sets the _atributos_struct_decl rule contexts.
	Set_atributos_struct_decl(IAtributos_struct_declContext)

	// SetAsd sets the asd rule contexts.
	SetAsd(IAtributos_struct_declContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsAtributos_structContext differentiates from other interfaces.
	IsAtributos_structContext()
}

type Atributos_structContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	l                      *arrayList.List
	li                     IAtributos_structContext
	_atributos_struct_decl IAtributos_struct_declContext
	asd                    IAtributos_struct_declContext
}

func NewEmptyAtributos_structContext() *Atributos_structContext {
	var p = new(Atributos_structContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_atributos_struct
	return p
}

func (*Atributos_structContext) IsAtributos_structContext() {}

func NewAtributos_structContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_structContext {
	var p = new(Atributos_structContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_atributos_struct

	return p
}

func (s *Atributos_structContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_structContext) GetLi() IAtributos_structContext { return s.li }

func (s *Atributos_structContext) Get_atributos_struct_decl() IAtributos_struct_declContext {
	return s._atributos_struct_decl
}

func (s *Atributos_structContext) GetAsd() IAtributos_struct_declContext { return s.asd }

func (s *Atributos_structContext) SetLi(v IAtributos_structContext) { s.li = v }

func (s *Atributos_structContext) Set_atributos_struct_decl(v IAtributos_struct_declContext) {
	s._atributos_struct_decl = v
}

func (s *Atributos_structContext) SetAsd(v IAtributos_struct_declContext) { s.asd = v }

func (s *Atributos_structContext) GetL() *arrayList.List { return s.l }

func (s *Atributos_structContext) SetL(v *arrayList.List) { s.l = v }

func (s *Atributos_structContext) Atributos_struct_decl() IAtributos_struct_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_declContext)
}

func (s *Atributos_structContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *Atributos_structContext) Atributos_struct() IAtributos_structContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_structContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_structContext)
}

func (s *Atributos_structContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_structContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributos_structContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterAtributos_struct(s)
	}
}

func (s *Atributos_structContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitAtributos_struct(s)
	}
}

func (p *Interprete) Atributos_struct() (localctx IAtributos_structContext) {
	return p.atributos_struct(0)
}

func (p *Interprete) atributos_struct(_p int) (localctx IAtributos_structContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAtributos_structContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAtributos_structContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 14
	p.EnterRecursionRule(localctx, 14, InterpreteRULE_atributos_struct, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(224)

		var _x = p.Atributos_struct_decl()

		localctx.(*Atributos_structContext)._atributos_struct_decl = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Atributos_structContext).Get_atributos_struct_decl().GetS())
	localctx.(*Atributos_structContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(234)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAtributos_structContext(p, _parentctx, _parentState)
			localctx.(*Atributos_structContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_atributos_struct)
			p.SetState(227)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(228)
				p.Match(InterpreteCOMA)
			}
			{
				p.SetState(229)

				var _x = p.Atributos_struct_decl()

				localctx.(*Atributos_structContext).asd = _x
				localctx.(*Atributos_structContext)._atributos_struct_decl = _x
			}

			localctx.(*Atributos_structContext).GetLi().GetL().Add(localctx.(*Atributos_structContext).GetAsd().GetS())
			localctx.(*Atributos_structContext).l = localctx.(*Atributos_structContext).GetLi().GetL()

		}
		p.SetState(236)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributos_struct_declContext is an interface to support dynamic dispatch.
type IAtributos_struct_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// GetId1 returns the id1 token.
	GetId1() antlr.Token

	// GetId2 returns the id2 token.
	GetId2() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// SetId1 sets the id1 token.
	SetId1(antlr.Token)

	// SetId2 sets the id2 token.
	SetId2(antlr.Token)

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// GetS returns the s attribute.
	GetS() interfaces.Symbol

	// SetS sets the s attribute.
	SetS(interfaces.Symbol)

	// IsAtributos_struct_declContext differentiates from other interfaces.
	IsAtributos_struct_declContext()
}

type Atributos_struct_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	s      interfaces.Symbol
	_ID    antlr.Token
	_tipo  ITipoContext
	id1    antlr.Token
	id2    antlr.Token
}

func NewEmptyAtributos_struct_declContext() *Atributos_struct_declContext {
	var p = new(Atributos_struct_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_atributos_struct_decl
	return p
}

func (*Atributos_struct_declContext) IsAtributos_struct_declContext() {}

func NewAtributos_struct_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_declContext {
	var p = new(Atributos_struct_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_atributos_struct_decl

	return p
}

func (s *Atributos_struct_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_declContext) Get_ID() antlr.Token { return s._ID }

func (s *Atributos_struct_declContext) GetId1() antlr.Token { return s.id1 }

func (s *Atributos_struct_declContext) GetId2() antlr.Token { return s.id2 }

func (s *Atributos_struct_declContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Atributos_struct_declContext) SetId1(v antlr.Token) { s.id1 = v }

func (s *Atributos_struct_declContext) SetId2(v antlr.Token) { s.id2 = v }

func (s *Atributos_struct_declContext) Get_tipo() ITipoContext { return s._tipo }

func (s *Atributos_struct_declContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *Atributos_struct_declContext) GetS() interfaces.Symbol { return s.s }

func (s *Atributos_struct_declContext) SetS(v interfaces.Symbol) { s.s = v }

func (s *Atributos_struct_declContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(InterpreteID)
}

func (s *Atributos_struct_declContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteID, i)
}

func (s *Atributos_struct_declContext) DPTS() antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, 0)
}

func (s *Atributos_struct_declContext) Array_decl_array() IArray_decl_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_arrayContext)
}

func (s *Atributos_struct_declContext) Vector_decl() IVector_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVector_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVector_declContext)
}

func (s *Atributos_struct_declContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *Atributos_struct_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributos_struct_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterAtributos_struct_decl(s)
	}
}

func (s *Atributos_struct_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitAtributos_struct_decl(s)
	}
}

func (p *Interprete) Atributos_struct_decl() (localctx IAtributos_struct_declContext) {
	localctx = NewAtributos_struct_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, InterpreteRULE_atributos_struct_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(256)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(237)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_declContext)._ID = _m
		}
		{
			p.SetState(238)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(239)
			p.Array_decl_array()
		}
		localctx.(*Atributos_struct_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Atributos_struct_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_declContext).Get_ID().GetText()
			}
		}()), Tipo: 6}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(242)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_declContext)._ID = _m
		}
		{
			p.SetState(243)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(244)
			p.Vector_decl()
		}
		localctx.(*Atributos_struct_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Atributos_struct_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_declContext).Get_ID().GetText()
			}
		}()), Tipo: 10}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(247)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_declContext)._ID = _m
		}
		{
			p.SetState(248)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(249)

			var _x = p.Tipo()

			localctx.(*Atributos_struct_declContext)._tipo = _x
		}
		localctx.(*Atributos_struct_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Atributos_struct_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_declContext).Get_ID().GetText()
			}
		}()), Tipo: localctx.(*Atributos_struct_declContext).Get_tipo().GetTe()}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(252)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_declContext).id1 = _m
		}
		{
			p.SetState(253)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(254)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_declContext).id2 = _m
		}
		localctx.(*Atributos_struct_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Atributos_struct_declContext).GetId1() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_declContext).GetId1().GetText()
			}
		}()), Tipo: 9, Valor: (func() string {
			if localctx.(*Atributos_struct_declContext).GetId2() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_declContext).GetId2().GetText()
			}
		}())}

	}

	return localctx
}

// ISent_funcionContext is an interface to support dynamic dispatch.
type ISent_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_FUNCT returns the _FUNCT token.
	Get_FUNCT() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// GetId1 returns the id1 token.
	GetId1() antlr.Token

	// GetId2 returns the id2 token.
	GetId2() antlr.Token

	// Set_FUNCT sets the _FUNCT token.
	Set_FUNCT(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// SetId1 sets the id1 token.
	SetId1(antlr.Token)

	// SetId2 sets the id2 token.
	SetId2(antlr.Token)

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Get_params_funcion returns the _params_funcion rule contexts.
	Get_params_funcion() IParams_funcionContext

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// Set_params_funcion sets the _params_funcion rule contexts.
	Set_params_funcion(IParams_funcionContext)

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_funcionContext differentiates from other interfaces.
	IsSent_funcionContext()
}

type Sent_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	instr           interfaces.Instruction
	_FUNCT          antlr.Token
	_ID             antlr.Token
	_instrucciones  IInstruccionesContext
	_params_funcion IParams_funcionContext
	_tipo           ITipoContext
	id1             antlr.Token
	id2             antlr.Token
}

func NewEmptySent_funcionContext() *Sent_funcionContext {
	var p = new(Sent_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_funcion
	return p
}

func (*Sent_funcionContext) IsSent_funcionContext() {}

func NewSent_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_funcionContext {
	var p = new(Sent_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_funcion

	return p
}

func (s *Sent_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_funcionContext) Get_FUNCT() antlr.Token { return s._FUNCT }

func (s *Sent_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Sent_funcionContext) GetId1() antlr.Token { return s.id1 }

func (s *Sent_funcionContext) GetId2() antlr.Token { return s.id2 }

func (s *Sent_funcionContext) Set_FUNCT(v antlr.Token) { s._FUNCT = v }

func (s *Sent_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Sent_funcionContext) SetId1(v antlr.Token) { s.id1 = v }

func (s *Sent_funcionContext) SetId2(v antlr.Token) { s.id2 = v }

func (s *Sent_funcionContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Sent_funcionContext) Get_params_funcion() IParams_funcionContext { return s._params_funcion }

func (s *Sent_funcionContext) Get_tipo() ITipoContext { return s._tipo }

func (s *Sent_funcionContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Sent_funcionContext) Set_params_funcion(v IParams_funcionContext) { s._params_funcion = v }

func (s *Sent_funcionContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *Sent_funcionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_funcionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_funcionContext) FUNCT() antlr.TerminalNode {
	return s.GetToken(InterpreteFUNCT, 0)
}

func (s *Sent_funcionContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(InterpreteID)
}

func (s *Sent_funcionContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteID, i)
}

func (s *Sent_funcionContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *Sent_funcionContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *Sent_funcionContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_funcionContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Sent_funcionContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_funcionContext) Params_funcion() IParams_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_funcionContext)
}

func (s *Sent_funcionContext) REST() antlr.TerminalNode {
	return s.GetToken(InterpreteREST, 0)
}

func (s *Sent_funcionContext) AllMAYOR() []antlr.TerminalNode {
	return s.GetTokens(InterpreteMAYOR)
}

func (s *Sent_funcionContext) MAYOR(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, i)
}

func (s *Sent_funcionContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *Sent_funcionContext) Array_decl_array() IArray_decl_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_arrayContext)
}

func (s *Sent_funcionContext) VEC() antlr.TerminalNode {
	return s.GetToken(InterpreteVEC, 0)
}

func (s *Sent_funcionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMENOR, 0)
}

func (s *Sent_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_funcionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_funcion(s)
	}
}

func (s *Sent_funcionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_funcion(s)
	}
}

func (p *Interprete) Sent_funcion() (localctx ISent_funcionContext) {
	localctx = NewSent_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, InterpreteRULE_sent_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(383)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(258)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(259)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(260)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(261)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(262)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(263)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(264)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), arrayList.New(), interfaces.NULL, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(267)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(268)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(269)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(270)

			var _x = p.params_funcion(0)

			localctx.(*Sent_funcionContext)._params_funcion = _x
		}
		{
			p.SetState(271)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(272)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(273)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(274)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funcionContext).Get_params_funcion().GetL(), interfaces.NULL, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(277)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(278)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(279)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(280)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(281)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(282)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(283)

			var _x = p.Tipo()

			localctx.(*Sent_funcionContext)._tipo = _x
		}
		{
			p.SetState(284)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(285)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(286)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), arrayList.New(), localctx.(*Sent_funcionContext).Get_tipo().GetTe(), localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(289)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(290)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(291)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(292)

			var _x = p.params_funcion(0)

			localctx.(*Sent_funcionContext)._params_funcion = _x
		}
		{
			p.SetState(293)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(294)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(295)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(296)

			var _x = p.Tipo()

			localctx.(*Sent_funcionContext)._tipo = _x
		}
		{
			p.SetState(297)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(298)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(299)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funcionContext).Get_params_funcion().GetL(), localctx.(*Sent_funcionContext).Get_tipo().GetTe(), localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(302)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(303)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext).id1 = _m
		}
		{
			p.SetState(304)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(305)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(306)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(307)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(308)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext).id2 = _m
		}
		{
			p.SetState(309)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(310)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(311)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).GetId1() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).GetId1().GetText()
			}
		}()), arrayList.New(), interfaces.NULL, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(314)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(315)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext).id1 = _m
		}
		{
			p.SetState(316)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(317)

			var _x = p.params_funcion(0)

			localctx.(*Sent_funcionContext)._params_funcion = _x
		}
		{
			p.SetState(318)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(319)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(320)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(321)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext).id2 = _m
		}
		{
			p.SetState(322)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(323)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(324)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).GetId1() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).GetId1().GetText()
			}
		}()), localctx.(*Sent_funcionContext).Get_params_funcion().GetL(), interfaces.NULL, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(327)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(328)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(329)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(330)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(331)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(332)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(333)
			p.Array_decl_array()
		}
		{
			p.SetState(334)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(335)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(336)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), arrayList.New(), interfaces.ARRAY, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(339)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(340)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(341)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(342)

			var _x = p.params_funcion(0)

			localctx.(*Sent_funcionContext)._params_funcion = _x
		}
		{
			p.SetState(343)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(344)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(345)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(346)
			p.Array_decl_array()
		}
		{
			p.SetState(347)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(348)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(349)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funcionContext).Get_params_funcion().GetL(), interfaces.ARRAY, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(352)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(353)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(354)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(355)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(356)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(357)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(358)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(359)
			p.Match(InterpreteMENOR)
		}
		{
			p.SetState(360)
			p.Tipo()
		}
		{
			p.SetState(361)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(362)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(363)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(364)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), arrayList.New(), interfaces.VECTOR, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(367)

			var _m = p.Match(InterpreteFUNCT)

			localctx.(*Sent_funcionContext)._FUNCT = _m
		}
		{
			p.SetState(368)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funcionContext)._ID = _m
		}
		{
			p.SetState(369)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(370)

			var _x = p.params_funcion(0)

			localctx.(*Sent_funcionContext)._params_funcion = _x
		}
		{
			p.SetState(371)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(372)
			p.Match(InterpreteREST)
		}
		{
			p.SetState(373)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(374)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(375)
			p.Match(InterpreteMENOR)
		}
		{
			p.SetState(376)
			p.Tipo()
		}
		{
			p.SetState(377)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(378)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(379)

			var _x = p.Instrucciones()

			localctx.(*Sent_funcionContext)._instrucciones = _x
		}
		{
			p.SetState(380)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_funcionContext).instr = instruction.NewFuncion((func() string {
			if localctx.(*Sent_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funcionContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funcionContext).Get_params_funcion().GetL(), interfaces.VECTOR, localctx.(*Sent_funcionContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funcionContext).Get_FUNCT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funcionContext).Get_FUNCT().GetColumn()
			}
		}()))

	}

	return localctx
}

// IParams_funcionContext is an interface to support dynamic dispatch.
type IParams_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IParams_funcionContext

	// Get_params_funcion_decl returns the _params_funcion_decl rule contexts.
	Get_params_funcion_decl() IParams_funcion_declContext

	// SetLi sets the li rule contexts.
	SetLi(IParams_funcionContext)

	// Set_params_funcion_decl sets the _params_funcion_decl rule contexts.
	Set_params_funcion_decl(IParams_funcion_declContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsParams_funcionContext differentiates from other interfaces.
	IsParams_funcionContext()
}

type Params_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	l                    *arrayList.List
	li                   IParams_funcionContext
	_params_funcion_decl IParams_funcion_declContext
}

func NewEmptyParams_funcionContext() *Params_funcionContext {
	var p = new(Params_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_params_funcion
	return p
}

func (*Params_funcionContext) IsParams_funcionContext() {}

func NewParams_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Params_funcionContext {
	var p = new(Params_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_params_funcion

	return p
}

func (s *Params_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Params_funcionContext) GetLi() IParams_funcionContext { return s.li }

func (s *Params_funcionContext) Get_params_funcion_decl() IParams_funcion_declContext {
	return s._params_funcion_decl
}

func (s *Params_funcionContext) SetLi(v IParams_funcionContext) { s.li = v }

func (s *Params_funcionContext) Set_params_funcion_decl(v IParams_funcion_declContext) {
	s._params_funcion_decl = v
}

func (s *Params_funcionContext) GetL() *arrayList.List { return s.l }

func (s *Params_funcionContext) SetL(v *arrayList.List) { s.l = v }

func (s *Params_funcionContext) Params_funcion_decl() IParams_funcion_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_funcion_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_funcion_declContext)
}

func (s *Params_funcionContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *Params_funcionContext) Params_funcion() IParams_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_funcionContext)
}

func (s *Params_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Params_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Params_funcionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterParams_funcion(s)
	}
}

func (s *Params_funcionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitParams_funcion(s)
	}
}

func (p *Interprete) Params_funcion() (localctx IParams_funcionContext) {
	return p.params_funcion(0)
}

func (p *Interprete) params_funcion(_p int) (localctx IParams_funcionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParams_funcionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParams_funcionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 20
	p.EnterRecursionRule(localctx, 20, InterpreteRULE_params_funcion, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(386)

		var _x = p.Params_funcion_decl()

		localctx.(*Params_funcionContext)._params_funcion_decl = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Params_funcionContext).Get_params_funcion_decl().GetS())
	localctx.(*Params_funcionContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(396)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParams_funcionContext(p, _parentctx, _parentState)
			localctx.(*Params_funcionContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_params_funcion)
			p.SetState(389)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(390)
				p.Match(InterpreteCOMA)
			}
			{
				p.SetState(391)

				var _x = p.Params_funcion_decl()

				localctx.(*Params_funcionContext)._params_funcion_decl = _x
			}

			localctx.(*Params_funcionContext).GetLi().GetL().Add(localctx.(*Params_funcionContext).Get_params_funcion_decl().GetS())
			localctx.(*Params_funcionContext).l = localctx.(*Params_funcionContext).GetLi().GetL()

		}
		p.SetState(398)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())
	}

	return localctx
}

// IParams_funcion_declContext is an interface to support dynamic dispatch.
type IParams_funcion_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// GetS returns the s attribute.
	GetS() interfaces.Symbol

	// SetS sets the s attribute.
	SetS(interfaces.Symbol)

	// IsParams_funcion_declContext differentiates from other interfaces.
	IsParams_funcion_declContext()
}

type Params_funcion_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	s      interfaces.Symbol
	_ID    antlr.Token
	_tipo  ITipoContext
}

func NewEmptyParams_funcion_declContext() *Params_funcion_declContext {
	var p = new(Params_funcion_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_params_funcion_decl
	return p
}

func (*Params_funcion_declContext) IsParams_funcion_declContext() {}

func NewParams_funcion_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Params_funcion_declContext {
	var p = new(Params_funcion_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_params_funcion_decl

	return p
}

func (s *Params_funcion_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Params_funcion_declContext) Get_ID() antlr.Token { return s._ID }

func (s *Params_funcion_declContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Params_funcion_declContext) Get_tipo() ITipoContext { return s._tipo }

func (s *Params_funcion_declContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *Params_funcion_declContext) GetS() interfaces.Symbol { return s.s }

func (s *Params_funcion_declContext) SetS(v interfaces.Symbol) { s.s = v }

func (s *Params_funcion_declContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Params_funcion_declContext) DPTS() antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, 0)
}

func (s *Params_funcion_declContext) PUNTERO() antlr.TerminalNode {
	return s.GetToken(InterpretePUNTERO, 0)
}

func (s *Params_funcion_declContext) MUT() antlr.TerminalNode {
	return s.GetToken(InterpreteMUT, 0)
}

func (s *Params_funcion_declContext) Array_decl_array() IArray_decl_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_arrayContext)
}

func (s *Params_funcion_declContext) Vector_expr() IVector_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVector_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVector_exprContext)
}

func (s *Params_funcion_declContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *Params_funcion_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Params_funcion_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Params_funcion_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterParams_funcion_decl(s)
	}
}

func (s *Params_funcion_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitParams_funcion_decl(s)
	}
}

func (p *Interprete) Params_funcion_decl() (localctx IParams_funcion_declContext) {
	localctx = NewParams_funcion_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, InterpreteRULE_params_funcion_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(436)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(399)

			var _m = p.Match(InterpreteID)

			localctx.(*Params_funcion_declContext)._ID = _m
		}
		{
			p.SetState(400)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(401)
			p.Match(InterpretePUNTERO)
		}
		{
			p.SetState(402)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(403)
			p.Array_decl_array()
		}
		localctx.(*Params_funcion_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Params_funcion_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Params_funcion_declContext).Get_ID().GetText()
			}
		}()), Tipo: 6, IsMut: true}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(406)

			var _m = p.Match(InterpreteID)

			localctx.(*Params_funcion_declContext)._ID = _m
		}
		{
			p.SetState(407)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(408)
			p.Match(InterpretePUNTERO)
		}
		{
			p.SetState(409)
			p.Array_decl_array()
		}
		localctx.(*Params_funcion_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Params_funcion_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Params_funcion_declContext).Get_ID().GetText()
			}
		}()), Tipo: 6, IsMut: false}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(412)

			var _m = p.Match(InterpreteID)

			localctx.(*Params_funcion_declContext)._ID = _m
		}
		{
			p.SetState(413)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(414)
			p.Match(InterpretePUNTERO)
		}
		{
			p.SetState(415)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(416)
			p.Vector_expr()
		}
		localctx.(*Params_funcion_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Params_funcion_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Params_funcion_declContext).Get_ID().GetText()
			}
		}()), Tipo: 10, IsMut: true}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(419)

			var _m = p.Match(InterpreteID)

			localctx.(*Params_funcion_declContext)._ID = _m
		}
		{
			p.SetState(420)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(421)
			p.Match(InterpretePUNTERO)
		}
		{
			p.SetState(422)
			p.Vector_expr()
		}
		localctx.(*Params_funcion_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Params_funcion_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Params_funcion_declContext).Get_ID().GetText()
			}
		}()), Tipo: 10, IsMut: false}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(425)

			var _m = p.Match(InterpreteID)

			localctx.(*Params_funcion_declContext)._ID = _m
		}
		{
			p.SetState(426)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(427)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(428)

			var _x = p.Tipo()

			localctx.(*Params_funcion_declContext)._tipo = _x
		}
		localctx.(*Params_funcion_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Params_funcion_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Params_funcion_declContext).Get_ID().GetText()
			}
		}()), Tipo: localctx.(*Params_funcion_declContext).Get_tipo().GetTe(), IsMut: true}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(431)

			var _m = p.Match(InterpreteID)

			localctx.(*Params_funcion_declContext)._ID = _m
		}
		{
			p.SetState(432)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(433)

			var _x = p.Tipo()

			localctx.(*Params_funcion_declContext)._tipo = _x
		}
		localctx.(*Params_funcion_declContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Params_funcion_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Params_funcion_declContext).Get_ID().GetText()
			}
		}()), Tipo: localctx.(*Params_funcion_declContext).Get_tipo().GetTe(), IsMut: false}

	}

	return localctx
}

// ISent_LlamadaContext is an interface to support dynamic dispatch.
type ISent_LlamadaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_PARA returns the _PARA token.
	Get_PARA() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_PARA sets the _PARA token.
	Set_PARA(antlr.Token)

	// GetLi returns the li rule contexts.
	GetLi() IParams_llamadaContext

	// SetLi sets the li rule contexts.
	SetLi(IParams_llamadaContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_LlamadaContext differentiates from other interfaces.
	IsSent_LlamadaContext()
}

type Sent_LlamadaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	instr  interfaces.Instruction
	_ID    antlr.Token
	_PARA  antlr.Token
	li     IParams_llamadaContext
}

func NewEmptySent_LlamadaContext() *Sent_LlamadaContext {
	var p = new(Sent_LlamadaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_Llamada
	return p
}

func (*Sent_LlamadaContext) IsSent_LlamadaContext() {}

func NewSent_LlamadaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_LlamadaContext {
	var p = new(Sent_LlamadaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_Llamada

	return p
}

func (s *Sent_LlamadaContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_LlamadaContext) Get_ID() antlr.Token { return s._ID }

func (s *Sent_LlamadaContext) Get_PARA() antlr.Token { return s._PARA }

func (s *Sent_LlamadaContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Sent_LlamadaContext) Set_PARA(v antlr.Token) { s._PARA = v }

func (s *Sent_LlamadaContext) GetLi() IParams_llamadaContext { return s.li }

func (s *Sent_LlamadaContext) SetLi(v IParams_llamadaContext) { s.li = v }

func (s *Sent_LlamadaContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_LlamadaContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_LlamadaContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Sent_LlamadaContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *Sent_LlamadaContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *Sent_LlamadaContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Sent_LlamadaContext) Params_llamada() IParams_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_llamadaContext)
}

func (s *Sent_LlamadaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_LlamadaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_LlamadaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_Llamada(s)
	}
}

func (s *Sent_LlamadaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_Llamada(s)
	}
}

func (p *Interprete) Sent_Llamada() (localctx ISent_LlamadaContext) {
	localctx = NewSent_LlamadaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, InterpreteRULE_sent_Llamada)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(450)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(438)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_LlamadaContext)._ID = _m
		}
		{
			p.SetState(439)

			var _m = p.Match(InterpretePARA)

			localctx.(*Sent_LlamadaContext)._PARA = _m
		}
		{
			p.SetState(440)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(441)
			p.Match(InterpretePYC)
		}
		localctx.(*Sent_LlamadaContext).instr = instruction.NewLlamada((func() string {
			if localctx.(*Sent_LlamadaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_LlamadaContext).Get_ID().GetText()
			}
		}()), arrayList.New(), (func() int {
			if localctx.(*Sent_LlamadaContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Sent_LlamadaContext).Get_PARA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_LlamadaContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Sent_LlamadaContext).Get_PARA().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(443)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_LlamadaContext)._ID = _m
		}
		{
			p.SetState(444)

			var _m = p.Match(InterpretePARA)

			localctx.(*Sent_LlamadaContext)._PARA = _m
		}
		{
			p.SetState(445)

			var _x = p.params_llamada(0)

			localctx.(*Sent_LlamadaContext).li = _x
		}
		{
			p.SetState(446)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(447)
			p.Match(InterpretePYC)
		}
		localctx.(*Sent_LlamadaContext).instr = instruction.NewLlamada((func() string {
			if localctx.(*Sent_LlamadaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_LlamadaContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_LlamadaContext).GetLi().GetL(), (func() int {
			if localctx.(*Sent_LlamadaContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Sent_LlamadaContext).Get_PARA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_LlamadaContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Sent_LlamadaContext).Get_PARA().GetColumn()
			}
		}()))

	}

	return localctx
}

// IParams_llamadaContext is an interface to support dynamic dispatch.
type IParams_llamadaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IParams_llamadaContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetLi sets the li rule contexts.
	SetLi(IParams_llamadaContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsParams_llamadaContext differentiates from other interfaces.
	IsParams_llamadaContext()
}

type Params_llamadaContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l           *arrayList.List
	li          IParams_llamadaContext
	_expression IExpressionContext
}

func NewEmptyParams_llamadaContext() *Params_llamadaContext {
	var p = new(Params_llamadaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_params_llamada
	return p
}

func (*Params_llamadaContext) IsParams_llamadaContext() {}

func NewParams_llamadaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Params_llamadaContext {
	var p = new(Params_llamadaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_params_llamada

	return p
}

func (s *Params_llamadaContext) GetParser() antlr.Parser { return s.parser }

func (s *Params_llamadaContext) GetLi() IParams_llamadaContext { return s.li }

func (s *Params_llamadaContext) Get_expression() IExpressionContext { return s._expression }

func (s *Params_llamadaContext) SetLi(v IParams_llamadaContext) { s.li = v }

func (s *Params_llamadaContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Params_llamadaContext) GetL() *arrayList.List { return s.l }

func (s *Params_llamadaContext) SetL(v *arrayList.List) { s.l = v }

func (s *Params_llamadaContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Params_llamadaContext) PUNTERO() antlr.TerminalNode {
	return s.GetToken(InterpretePUNTERO, 0)
}

func (s *Params_llamadaContext) MUT() antlr.TerminalNode {
	return s.GetToken(InterpreteMUT, 0)
}

func (s *Params_llamadaContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *Params_llamadaContext) Params_llamada() IParams_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_llamadaContext)
}

func (s *Params_llamadaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Params_llamadaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Params_llamadaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterParams_llamada(s)
	}
}

func (s *Params_llamadaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitParams_llamada(s)
	}
}

func (p *Interprete) Params_llamada() (localctx IParams_llamadaContext) {
	return p.params_llamada(0)
}

func (p *Interprete) params_llamada(_p int) (localctx IParams_llamadaContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParams_llamadaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParams_llamadaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 26
	p.EnterRecursionRule(localctx, 26, InterpreteRULE_params_llamada, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(461)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case InterpreteNUMBER, InterpreteFLOAT_NUM, InterpreteCHAR_2, InterpreteCADENA, InterpreteEXCLA, InterpretePARA, InterpreteREST, InterpreteTRUE, InterpreteFALSE, InterpreteINT, InterpreteFLOAT, InterpreteID:
		{
			p.SetState(453)

			var _x = p.expression(0)

			localctx.(*Params_llamadaContext)._expression = _x
		}

		a := arrayList.New()
		a.Add(localctx.(*Params_llamadaContext).Get_expression().GetP())
		localctx.(*Params_llamadaContext).l = a

	case InterpretePUNTERO:
		{
			p.SetState(456)
			p.Match(InterpretePUNTERO)
		}
		{
			p.SetState(457)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(458)

			var _x = p.expression(0)

			localctx.(*Params_llamadaContext)._expression = _x
		}

		a := arrayList.New()
		a.Add(localctx.(*Params_llamadaContext).Get_expression().GetP())
		localctx.(*Params_llamadaContext).l = a

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(477)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(475)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
			case 1:
				localctx = NewParams_llamadaContext(p, _parentctx, _parentState)
				localctx.(*Params_llamadaContext).li = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_params_llamada)
				p.SetState(463)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(464)
					p.Match(InterpreteCOMA)
				}
				{
					p.SetState(465)

					var _x = p.expression(0)

					localctx.(*Params_llamadaContext)._expression = _x
				}

				localctx.(*Params_llamadaContext).GetLi().GetL().Add(localctx.(*Params_llamadaContext).Get_expression().GetP())
				localctx.(*Params_llamadaContext).l = localctx.(*Params_llamadaContext).GetLi().GetL()

			case 2:
				localctx = NewParams_llamadaContext(p, _parentctx, _parentState)
				localctx.(*Params_llamadaContext).li = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_params_llamada)
				p.SetState(468)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(469)
					p.Match(InterpreteCOMA)
				}
				{
					p.SetState(470)
					p.Match(InterpretePUNTERO)
				}
				{
					p.SetState(471)
					p.Match(InterpreteMUT)
				}
				{
					p.SetState(472)

					var _x = p.expression(0)

					localctx.(*Params_llamadaContext)._expression = _x
				}

				localctx.(*Params_llamadaContext).GetLi().GetL().Add(localctx.(*Params_llamadaContext).Get_expression().GetP())
				localctx.(*Params_llamadaContext).l = localctx.(*Params_llamadaContext).GetLi().GetL()

			}

		}
		p.SetState(479)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())
	}

	return localctx
}

// IFunciones_TransContext is an interface to support dynamic dispatch.
type IFunciones_TransContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_BRE returns the _BRE token.
	Get_BRE() antlr.Token

	// Get_CONTINIU returns the _CONTINIU token.
	Get_CONTINIU() antlr.Token

	// Get_RETURNASO returns the _RETURNASO token.
	Get_RETURNASO() antlr.Token

	// Set_BRE sets the _BRE token.
	Set_BRE(antlr.Token)

	// Set_CONTINIU sets the _CONTINIU token.
	Set_CONTINIU(antlr.Token)

	// Set_RETURNASO sets the _RETURNASO token.
	Set_RETURNASO(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_expression_vec_Arr returns the _expression_vec_Arr rule contexts.
	Get_expression_vec_Arr() IExpression_vec_ArrContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_expression_vec_Arr sets the _expression_vec_Arr rule contexts.
	Set_expression_vec_Arr(IExpression_vec_ArrContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsFunciones_TransContext differentiates from other interfaces.
	IsFunciones_TransContext()
}

type Funciones_TransContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	instr               interfaces.Instruction
	_BRE                antlr.Token
	_expression         IExpressionContext
	_CONTINIU           antlr.Token
	_RETURNASO          antlr.Token
	_expression_vec_Arr IExpression_vec_ArrContext
}

func NewEmptyFunciones_TransContext() *Funciones_TransContext {
	var p = new(Funciones_TransContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_funciones_Trans
	return p
}

func (*Funciones_TransContext) IsFunciones_TransContext() {}

func NewFunciones_TransContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Funciones_TransContext {
	var p = new(Funciones_TransContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_funciones_Trans

	return p
}

func (s *Funciones_TransContext) GetParser() antlr.Parser { return s.parser }

func (s *Funciones_TransContext) Get_BRE() antlr.Token { return s._BRE }

func (s *Funciones_TransContext) Get_CONTINIU() antlr.Token { return s._CONTINIU }

func (s *Funciones_TransContext) Get_RETURNASO() antlr.Token { return s._RETURNASO }

func (s *Funciones_TransContext) Set_BRE(v antlr.Token) { s._BRE = v }

func (s *Funciones_TransContext) Set_CONTINIU(v antlr.Token) { s._CONTINIU = v }

func (s *Funciones_TransContext) Set_RETURNASO(v antlr.Token) { s._RETURNASO = v }

func (s *Funciones_TransContext) Get_expression() IExpressionContext { return s._expression }

func (s *Funciones_TransContext) Get_expression_vec_Arr() IExpression_vec_ArrContext {
	return s._expression_vec_Arr
}

func (s *Funciones_TransContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Funciones_TransContext) Set_expression_vec_Arr(v IExpression_vec_ArrContext) {
	s._expression_vec_Arr = v
}

func (s *Funciones_TransContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Funciones_TransContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Funciones_TransContext) BRE() antlr.TerminalNode {
	return s.GetToken(InterpreteBRE, 0)
}

func (s *Funciones_TransContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Funciones_TransContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Funciones_TransContext) CONTINIU() antlr.TerminalNode {
	return s.GetToken(InterpreteCONTINIU, 0)
}

func (s *Funciones_TransContext) RETURNASO() antlr.TerminalNode {
	return s.GetToken(InterpreteRETURNASO, 0)
}

func (s *Funciones_TransContext) Expression_vec_Arr() IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Funciones_TransContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Funciones_TransContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Funciones_TransContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterFunciones_Trans(s)
	}
}

func (s *Funciones_TransContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitFunciones_Trans(s)
	}
}

func (p *Interprete) Funciones_Trans() (localctx IFunciones_TransContext) {
	localctx = NewFunciones_TransContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, InterpreteRULE_funciones_Trans)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(504)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(480)

			var _m = p.Match(InterpreteBRE)

			localctx.(*Funciones_TransContext)._BRE = _m
		}
		{
			p.SetState(481)
			p.Match(InterpretePYC)
		}
		localctx.(*Funciones_TransContext).instr = sentenciatransferencia.NewBreak(nil, (func() int {
			if localctx.(*Funciones_TransContext).Get_BRE() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_BRE().GetLine()
			}
		}()), (func() int {
			if localctx.(*Funciones_TransContext).Get_BRE() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_BRE().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(483)

			var _m = p.Match(InterpreteBRE)

			localctx.(*Funciones_TransContext)._BRE = _m
		}
		{
			p.SetState(484)

			var _x = p.expression(0)

			localctx.(*Funciones_TransContext)._expression = _x
		}
		{
			p.SetState(485)
			p.Match(InterpretePYC)
		}
		localctx.(*Funciones_TransContext).instr = sentenciatransferencia.NewBreak(localctx.(*Funciones_TransContext).Get_expression().GetP(), (func() int {
			if localctx.(*Funciones_TransContext).Get_BRE() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_BRE().GetLine()
			}
		}()), (func() int {
			if localctx.(*Funciones_TransContext).Get_BRE() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_BRE().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(488)

			var _m = p.Match(InterpreteCONTINIU)

			localctx.(*Funciones_TransContext)._CONTINIU = _m
		}
		{
			p.SetState(489)
			p.Match(InterpretePYC)
		}
		localctx.(*Funciones_TransContext).instr = sentenciatransferencia.NewContinue((func() int {
			if localctx.(*Funciones_TransContext).Get_CONTINIU() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_CONTINIU().GetLine()
			}
		}()), (func() int {
			if localctx.(*Funciones_TransContext).Get_CONTINIU() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_CONTINIU().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(491)

			var _m = p.Match(InterpreteRETURNASO)

			localctx.(*Funciones_TransContext)._RETURNASO = _m
		}
		{
			p.SetState(492)
			p.Match(InterpretePYC)
		}
		localctx.(*Funciones_TransContext).instr = sentenciatransferencia.NewReturnaso(nil, (func() int {
			if localctx.(*Funciones_TransContext).Get_RETURNASO() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_RETURNASO().GetLine()
			}
		}()), (func() int {
			if localctx.(*Funciones_TransContext).Get_RETURNASO() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_RETURNASO().GetColumn()
			}
		}()))

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(494)

			var _m = p.Match(InterpreteRETURNASO)

			localctx.(*Funciones_TransContext)._RETURNASO = _m
		}
		{
			p.SetState(495)

			var _x = p.expression(0)

			localctx.(*Funciones_TransContext)._expression = _x
		}
		{
			p.SetState(496)
			p.Match(InterpretePYC)
		}
		localctx.(*Funciones_TransContext).instr = sentenciatransferencia.NewReturnaso(localctx.(*Funciones_TransContext).Get_expression().GetP(), (func() int {
			if localctx.(*Funciones_TransContext).Get_RETURNASO() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_RETURNASO().GetLine()
			}
		}()), (func() int {
			if localctx.(*Funciones_TransContext).Get_RETURNASO() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_RETURNASO().GetColumn()
			}
		}()))

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(499)

			var _m = p.Match(InterpreteRETURNASO)

			localctx.(*Funciones_TransContext)._RETURNASO = _m
		}
		{
			p.SetState(500)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Funciones_TransContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(501)
			p.Match(InterpretePYC)
		}
		localctx.(*Funciones_TransContext).instr = sentenciatransferencia.NewReturnaso(localctx.(*Funciones_TransContext).Get_expression_vec_Arr().GetP(), (func() int {
			if localctx.(*Funciones_TransContext).Get_RETURNASO() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_RETURNASO().GetLine()
			}
		}()), (func() int {
			if localctx.(*Funciones_TransContext).Get_RETURNASO() == nil {
				return 0
			} else {
				return localctx.(*Funciones_TransContext).Get_RETURNASO().GetColumn()
			}
		}()))

	}

	return localctx
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_IGUAL returns the _IGUAL token.
	Get_IGUAL() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_IGUAL sets the _IGUAL token.
	Set_IGUAL(antlr.Token)

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_sentencias_expr returns the _sentencias_expr rule contexts.
	Get_sentencias_expr() ISentencias_exprContext

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_sentencias_expr sets the _sentencias_expr rule contexts.
	Set_sentencias_expr(ISentencias_exprContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	instr            interfaces.Instruction
	_ID              antlr.Token
	_tipo            ITipoContext
	_IGUAL           antlr.Token
	_expression      IExpressionContext
	_sentencias_expr ISentencias_exprContext
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_declaracion
	return p
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) Get_ID() antlr.Token { return s._ID }

func (s *DeclaracionContext) Get_IGUAL() antlr.Token { return s._IGUAL }

func (s *DeclaracionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *DeclaracionContext) Set_IGUAL(v antlr.Token) { s._IGUAL = v }

func (s *DeclaracionContext) Get_tipo() ITipoContext { return s._tipo }

func (s *DeclaracionContext) Get_expression() IExpressionContext { return s._expression }

func (s *DeclaracionContext) Get_sentencias_expr() ISentencias_exprContext { return s._sentencias_expr }

func (s *DeclaracionContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *DeclaracionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *DeclaracionContext) Set_sentencias_expr(v ISentencias_exprContext) { s._sentencias_expr = v }

func (s *DeclaracionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *DeclaracionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *DeclaracionContext) LET() antlr.TerminalNode {
	return s.GetToken(InterpreteLET, 0)
}

func (s *DeclaracionContext) MUT() antlr.TerminalNode {
	return s.GetToken(InterpreteMUT, 0)
}

func (s *DeclaracionContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *DeclaracionContext) DPTS() antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, 0)
}

func (s *DeclaracionContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *DeclaracionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *DeclaracionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclaracionContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *DeclaracionContext) Sentencias_expr() ISentencias_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISentencias_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISentencias_exprContext)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaracionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterDeclaracion(s)
	}
}

func (s *DeclaracionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitDeclaracion(s)
	}
}

func (p *Interprete) Declaracion() (localctx IDeclaracionContext) {
	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, InterpreteRULE_declaracion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(506)
			p.Match(InterpreteLET)
		}
		{
			p.SetState(507)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(508)

			var _m = p.Match(InterpreteID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(509)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(510)

			var _x = p.Tipo()

			localctx.(*DeclaracionContext)._tipo = _x
		}
		{
			p.SetState(511)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*DeclaracionContext)._IGUAL = _m
		}
		{
			p.SetState(512)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(513)
			p.Match(InterpretePYC)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewDeclaration((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo().GetTe(), localctx.(*DeclaracionContext).Get_expression().GetP(), true, (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(516)
			p.Match(InterpreteLET)
		}
		{
			p.SetState(517)

			var _m = p.Match(InterpreteID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(518)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(519)

			var _x = p.Tipo()

			localctx.(*DeclaracionContext)._tipo = _x
		}
		{
			p.SetState(520)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*DeclaracionContext)._IGUAL = _m
		}
		{
			p.SetState(521)

			var _x = p.expression(0)

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(522)
			p.Match(InterpretePYC)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewDeclaration((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo().GetTe(), localctx.(*DeclaracionContext).Get_expression().GetP(), false, (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(525)
			p.Match(InterpreteLET)
		}
		{
			p.SetState(526)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(527)

			var _m = p.Match(InterpreteID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(528)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(529)

			var _x = p.Tipo()

			localctx.(*DeclaracionContext)._tipo = _x
		}
		{
			p.SetState(530)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*DeclaracionContext)._IGUAL = _m
		}
		{
			p.SetState(531)

			var _x = p.Sentencias_expr()

			localctx.(*DeclaracionContext)._sentencias_expr = _x
		}
		{
			p.SetState(532)
			p.Match(InterpretePYC)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewDeclaration((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo().GetTe(), localctx.(*DeclaracionContext).Get_sentencias_expr().GetP(), true, (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(535)
			p.Match(InterpreteLET)
		}
		{
			p.SetState(536)

			var _m = p.Match(InterpreteID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(537)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(538)

			var _x = p.Tipo()

			localctx.(*DeclaracionContext)._tipo = _x
		}
		{
			p.SetState(539)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*DeclaracionContext)._IGUAL = _m
		}
		{
			p.SetState(540)

			var _x = p.Sentencias_expr()

			localctx.(*DeclaracionContext)._sentencias_expr = _x
		}
		{
			p.SetState(541)
			p.Match(InterpretePYC)
		}

		localctx.(*DeclaracionContext).instr = instruction.NewDeclaration((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo().GetTe(), localctx.(*DeclaracionContext).Get_sentencias_expr().GetP(), false, (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeclaracionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_IGUAL().GetColumn()
			}
		}()))

	}

	return localctx
}

// IArray_declContext is an interface to support dynamic dispatch.
type IArray_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LET returns the _LET token.
	Get_LET() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_LET sets the _LET token.
	Set_LET(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetTr returns the tr rule contexts.
	GetTr() IArray_decl_arrayContext

	// GetEa returns the ea rule contexts.
	GetEa() IExpression_vec_ArrContext

	// SetTr sets the tr rule contexts.
	SetTr(IArray_decl_arrayContext)

	// SetEa sets the ea rule contexts.
	SetEa(IExpression_vec_ArrContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsArray_declContext differentiates from other interfaces.
	IsArray_declContext()
}

type Array_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	instr  interfaces.Instruction
	_LET   antlr.Token
	_ID    antlr.Token
	tr     IArray_decl_arrayContext
	ea     IExpression_vec_ArrContext
}

func NewEmptyArray_declContext() *Array_declContext {
	var p = new(Array_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_array_decl
	return p
}

func (*Array_declContext) IsArray_declContext() {}

func NewArray_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_declContext {
	var p = new(Array_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_array_decl

	return p
}

func (s *Array_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_declContext) Get_LET() antlr.Token { return s._LET }

func (s *Array_declContext) Get_ID() antlr.Token { return s._ID }

func (s *Array_declContext) Set_LET(v antlr.Token) { s._LET = v }

func (s *Array_declContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Array_declContext) GetTr() IArray_decl_arrayContext { return s.tr }

func (s *Array_declContext) GetEa() IExpression_vec_ArrContext { return s.ea }

func (s *Array_declContext) SetTr(v IArray_decl_arrayContext) { s.tr = v }

func (s *Array_declContext) SetEa(v IExpression_vec_ArrContext) { s.ea = v }

func (s *Array_declContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Array_declContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Array_declContext) LET() antlr.TerminalNode {
	return s.GetToken(InterpreteLET, 0)
}

func (s *Array_declContext) MUT() antlr.TerminalNode {
	return s.GetToken(InterpreteMUT, 0)
}

func (s *Array_declContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Array_declContext) DPTS() antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, 0)
}

func (s *Array_declContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *Array_declContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Array_declContext) Array_decl_array() IArray_decl_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_arrayContext)
}

func (s *Array_declContext) Expression_vec_Arr() IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Array_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterArray_decl(s)
	}
}

func (s *Array_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitArray_decl(s)
	}
}

func (p *Interprete) Array_decl() (localctx IArray_declContext) {
	localctx = NewArray_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, InterpreteRULE_array_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(580)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(546)

			var _m = p.Match(InterpreteLET)

			localctx.(*Array_declContext)._LET = _m
		}
		{
			p.SetState(547)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(548)

			var _m = p.Match(InterpreteID)

			localctx.(*Array_declContext)._ID = _m
		}
		{
			p.SetState(549)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(550)

			var _x = p.Array_decl_array()

			localctx.(*Array_declContext).tr = _x
		}
		{
			p.SetState(551)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(552)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Array_declContext).ea = _x
		}
		{
			p.SetState(553)
			p.Match(InterpretePYC)
		}

		localctx.(*Array_declContext).instr = instruction.NewDeclaration_Array((func() string {
			if localctx.(*Array_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Array_declContext).Get_ID().GetText()
			}
		}()), localctx.(*Array_declContext).GetTr().GetAt(), localctx.(*Array_declContext).GetEa().GetP(), true, (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(556)

			var _m = p.Match(InterpreteLET)

			localctx.(*Array_declContext)._LET = _m
		}
		{
			p.SetState(557)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(558)

			var _m = p.Match(InterpreteID)

			localctx.(*Array_declContext)._ID = _m
		}
		{
			p.SetState(559)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(560)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Array_declContext).ea = _x
		}
		{
			p.SetState(561)
			p.Match(InterpretePYC)
		}

		var a *structsinter.Array_type
		localctx.(*Array_declContext).instr = instruction.NewDeclaration_Array((func() string {
			if localctx.(*Array_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Array_declContext).Get_ID().GetText()
			}
		}()), a, localctx.(*Array_declContext).GetEa().GetP(), true, (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(564)

			var _m = p.Match(InterpreteLET)

			localctx.(*Array_declContext)._LET = _m
		}
		{
			p.SetState(565)

			var _m = p.Match(InterpreteID)

			localctx.(*Array_declContext)._ID = _m
		}
		{
			p.SetState(566)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(567)

			var _x = p.Array_decl_array()

			localctx.(*Array_declContext).tr = _x
		}
		{
			p.SetState(568)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(569)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Array_declContext).ea = _x
		}
		{
			p.SetState(570)
			p.Match(InterpretePYC)
		}

		localctx.(*Array_declContext).instr = instruction.NewDeclaration_Array((func() string {
			if localctx.(*Array_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Array_declContext).Get_ID().GetText()
			}
		}()), localctx.(*Array_declContext).GetTr().GetAt(), localctx.(*Array_declContext).GetEa().GetP(), false, (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(573)

			var _m = p.Match(InterpreteLET)

			localctx.(*Array_declContext)._LET = _m
		}
		{
			p.SetState(574)

			var _m = p.Match(InterpreteID)

			localctx.(*Array_declContext)._ID = _m
		}
		{
			p.SetState(575)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(576)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Array_declContext).ea = _x
		}
		{
			p.SetState(577)
			p.Match(InterpretePYC)
		}

		var a *structsinter.Array_type
		localctx.(*Array_declContext).instr = instruction.NewDeclaration_Array((func() string {
			if localctx.(*Array_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Array_declContext).Get_ID().GetText()
			}
		}()), a, localctx.(*Array_declContext).GetEa().GetP(), false, (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Array_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Array_declContext).Get_LET().GetColumn()
			}
		}()))

	}

	return localctx
}

// IArray_decl_arrayContext is an interface to support dynamic dispatch.
type IArray_decl_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStru returns the stru rule contexts.
	GetStru() IArray_decl_arrayContext

	// Get_expression_vec_Arr returns the _expression_vec_Arr rule contexts.
	Get_expression_vec_Arr() IExpression_vec_ArrContext

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// SetStru sets the stru rule contexts.
	SetStru(IArray_decl_arrayContext)

	// Set_expression_vec_Arr sets the _expression_vec_Arr rule contexts.
	Set_expression_vec_Arr(IExpression_vec_ArrContext)

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// GetAt returns the at attribute.
	GetAt() *structsinter.Array_type

	// SetAt sets the at attribute.
	SetAt(*structsinter.Array_type)

	// IsArray_decl_arrayContext differentiates from other interfaces.
	IsArray_decl_arrayContext()
}

type Array_decl_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	at                  *structsinter.Array_type
	stru                IArray_decl_arrayContext
	_expression_vec_Arr IExpression_vec_ArrContext
	_tipo               ITipoContext
}

func NewEmptyArray_decl_arrayContext() *Array_decl_arrayContext {
	var p = new(Array_decl_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_array_decl_array
	return p
}

func (*Array_decl_arrayContext) IsArray_decl_arrayContext() {}

func NewArray_decl_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_decl_arrayContext {
	var p = new(Array_decl_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_array_decl_array

	return p
}

func (s *Array_decl_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_decl_arrayContext) GetStru() IArray_decl_arrayContext { return s.stru }

func (s *Array_decl_arrayContext) Get_expression_vec_Arr() IExpression_vec_ArrContext {
	return s._expression_vec_Arr
}

func (s *Array_decl_arrayContext) Get_tipo() ITipoContext { return s._tipo }

func (s *Array_decl_arrayContext) SetStru(v IArray_decl_arrayContext) { s.stru = v }

func (s *Array_decl_arrayContext) Set_expression_vec_Arr(v IExpression_vec_ArrContext) {
	s._expression_vec_Arr = v
}

func (s *Array_decl_arrayContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *Array_decl_arrayContext) GetAt() *structsinter.Array_type { return s.at }

func (s *Array_decl_arrayContext) SetAt(v *structsinter.Array_type) { s.at = v }

func (s *Array_decl_arrayContext) CORCHA() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHA, 0)
}

func (s *Array_decl_arrayContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Array_decl_arrayContext) Expression_vec_Arr() IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Array_decl_arrayContext) CORCHC() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHC, 0)
}

func (s *Array_decl_arrayContext) Array_decl_array() IArray_decl_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_arrayContext)
}

func (s *Array_decl_arrayContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *Array_decl_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_decl_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_decl_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterArray_decl_array(s)
	}
}

func (s *Array_decl_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitArray_decl_array(s)
	}
}

func (p *Interprete) Array_decl_array() (localctx IArray_decl_arrayContext) {
	localctx = NewArray_decl_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, InterpreteRULE_array_decl_array)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(596)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(582)
			p.Match(InterpreteCORCHA)
		}
		{
			p.SetState(583)

			var _x = p.Array_decl_array()

			localctx.(*Array_decl_arrayContext).stru = _x
		}
		{
			p.SetState(584)
			p.Match(InterpretePYC)
		}
		{
			p.SetState(585)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Array_decl_arrayContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(586)
			p.Match(InterpreteCORCHC)
		}

		a := &structsinter.Array_type{
			Tipo:      localctx.(*Array_decl_arrayContext).GetStru().GetAt().Tipo,
			Size:      localctx.(*Array_decl_arrayContext).Get_expression_vec_Arr().GetP(),
			Array_Son: localctx.(*Array_decl_arrayContext).GetStru().GetAt(),
		}
		localctx.(*Array_decl_arrayContext).at = a

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(589)
			p.Match(InterpreteCORCHA)
		}
		{
			p.SetState(590)

			var _x = p.Tipo()

			localctx.(*Array_decl_arrayContext)._tipo = _x
		}
		{
			p.SetState(591)
			p.Match(InterpretePYC)
		}
		{
			p.SetState(592)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Array_decl_arrayContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(593)
			p.Match(InterpreteCORCHC)
		}

		a := &structsinter.Array_type{
			Tipo:      localctx.(*Array_decl_arrayContext).Get_tipo().GetTe(),
			Size:      localctx.(*Array_decl_arrayContext).Get_expression_vec_Arr().GetP(),
			Array_Son: nil,
		}
		localctx.(*Array_decl_arrayContext).at = a

	}

	return localctx
}

// IVector_declContext is an interface to support dynamic dispatch.
type IVector_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LET returns the _LET token.
	Get_LET() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// GetId1 returns the id1 token.
	GetId1() antlr.Token

	// GetId2 returns the id2 token.
	GetId2() antlr.Token

	// Set_LET sets the _LET token.
	Set_LET(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// SetId1 sets the id1 token.
	SetId1(antlr.Token)

	// SetId2 sets the id2 token.
	SetId2(antlr.Token)

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// GetEa returns the ea rule contexts.
	GetEa() IVector_exprContext

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// SetEa sets the ea rule contexts.
	SetEa(IVector_exprContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsVector_declContext differentiates from other interfaces.
	IsVector_declContext()
}

type Vector_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	instr  interfaces.Instruction
	_LET   antlr.Token
	_ID    antlr.Token
	_tipo  ITipoContext
	ea     IVector_exprContext
	id1    antlr.Token
	id2    antlr.Token
}

func NewEmptyVector_declContext() *Vector_declContext {
	var p = new(Vector_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_vector_decl
	return p
}

func (*Vector_declContext) IsVector_declContext() {}

func NewVector_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vector_declContext {
	var p = new(Vector_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_vector_decl

	return p
}

func (s *Vector_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Vector_declContext) Get_LET() antlr.Token { return s._LET }

func (s *Vector_declContext) Get_ID() antlr.Token { return s._ID }

func (s *Vector_declContext) GetId1() antlr.Token { return s.id1 }

func (s *Vector_declContext) GetId2() antlr.Token { return s.id2 }

func (s *Vector_declContext) Set_LET(v antlr.Token) { s._LET = v }

func (s *Vector_declContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Vector_declContext) SetId1(v antlr.Token) { s.id1 = v }

func (s *Vector_declContext) SetId2(v antlr.Token) { s.id2 = v }

func (s *Vector_declContext) Get_tipo() ITipoContext { return s._tipo }

func (s *Vector_declContext) GetEa() IVector_exprContext { return s.ea }

func (s *Vector_declContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *Vector_declContext) SetEa(v IVector_exprContext) { s.ea = v }

func (s *Vector_declContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Vector_declContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Vector_declContext) LET() antlr.TerminalNode {
	return s.GetToken(InterpreteLET, 0)
}

func (s *Vector_declContext) MUT() antlr.TerminalNode {
	return s.GetToken(InterpreteMUT, 0)
}

func (s *Vector_declContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(InterpreteID)
}

func (s *Vector_declContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteID, i)
}

func (s *Vector_declContext) DPTS() antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, 0)
}

func (s *Vector_declContext) VEC() antlr.TerminalNode {
	return s.GetToken(InterpreteVEC, 0)
}

func (s *Vector_declContext) MENOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMENOR, 0)
}

func (s *Vector_declContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *Vector_declContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *Vector_declContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *Vector_declContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Vector_declContext) Vector_expr() IVector_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVector_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVector_exprContext)
}

func (s *Vector_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vector_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vector_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterVector_decl(s)
	}
}

func (s *Vector_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitVector_decl(s)
	}
}

func (p *Interprete) Vector_decl() (localctx IVector_declContext) {
	localctx = NewVector_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, InterpreteRULE_vector_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(663)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(598)

			var _m = p.Match(InterpreteLET)

			localctx.(*Vector_declContext)._LET = _m
		}
		{
			p.SetState(599)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(600)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext)._ID = _m
		}
		{
			p.SetState(601)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(602)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(603)
			p.Match(InterpreteMENOR)
		}
		{
			p.SetState(604)

			var _x = p.Tipo()

			localctx.(*Vector_declContext)._tipo = _x
		}
		{
			p.SetState(605)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(606)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(607)

			var _x = p.Vector_expr()

			localctx.(*Vector_declContext).ea = _x
		}
		{
			p.SetState(608)
			p.Match(InterpretePYC)
		}

		localctx.(*Vector_declContext).instr = instruction.NewDeclaration_Vector((func() string {
			if localctx.(*Vector_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).Get_ID().GetText()
			}
		}()), localctx.(*Vector_declContext).Get_tipo().GetTe(), localctx.(*Vector_declContext).GetEa().GetP(), "", true, (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(611)

			var _m = p.Match(InterpreteLET)

			localctx.(*Vector_declContext)._LET = _m
		}
		{
			p.SetState(612)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(613)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext).id1 = _m
		}
		{
			p.SetState(614)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(615)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(616)
			p.Match(InterpreteMENOR)
		}
		{
			p.SetState(617)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext).id2 = _m
		}
		{
			p.SetState(618)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(619)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(620)

			var _x = p.Vector_expr()

			localctx.(*Vector_declContext).ea = _x
		}
		{
			p.SetState(621)
			p.Match(InterpretePYC)
		}

		localctx.(*Vector_declContext).instr = instruction.NewDeclaration_Vector((func() string {
			if localctx.(*Vector_declContext).GetId1() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).GetId1().GetText()
			}
		}()), interfaces.STRUCT, localctx.(*Vector_declContext).GetEa().GetP(), (func() string {
			if localctx.(*Vector_declContext).GetId2() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).GetId2().GetText()
			}
		}()), true, (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(624)

			var _m = p.Match(InterpreteLET)

			localctx.(*Vector_declContext)._LET = _m
		}
		{
			p.SetState(625)
			p.Match(InterpreteMUT)
		}
		{
			p.SetState(626)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext)._ID = _m
		}
		{
			p.SetState(627)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(628)

			var _x = p.Vector_expr()

			localctx.(*Vector_declContext).ea = _x
		}
		{
			p.SetState(629)
			p.Match(InterpretePYC)
		}

		localctx.(*Vector_declContext).instr = instruction.NewDeclaration_Vector((func() string {
			if localctx.(*Vector_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).Get_ID().GetText()
			}
		}()), 4, localctx.(*Vector_declContext).GetEa().GetP(), "", true, (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(632)

			var _m = p.Match(InterpreteLET)

			localctx.(*Vector_declContext)._LET = _m
		}
		{
			p.SetState(633)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext)._ID = _m
		}
		{
			p.SetState(634)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(635)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(636)
			p.Match(InterpreteMENOR)
		}
		{
			p.SetState(637)

			var _x = p.Tipo()

			localctx.(*Vector_declContext)._tipo = _x
		}
		{
			p.SetState(638)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(639)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(640)

			var _x = p.Vector_expr()

			localctx.(*Vector_declContext).ea = _x
		}
		{
			p.SetState(641)
			p.Match(InterpretePYC)
		}

		localctx.(*Vector_declContext).instr = instruction.NewDeclaration_Vector((func() string {
			if localctx.(*Vector_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).Get_ID().GetText()
			}
		}()), localctx.(*Vector_declContext).Get_tipo().GetTe(), localctx.(*Vector_declContext).GetEa().GetP(), "", false, (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetColumn()
			}
		}()))

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(644)

			var _m = p.Match(InterpreteLET)

			localctx.(*Vector_declContext)._LET = _m
		}
		{
			p.SetState(645)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext)._ID = _m
		}
		{
			p.SetState(646)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(647)

			var _x = p.Vector_expr()

			localctx.(*Vector_declContext).ea = _x
		}
		{
			p.SetState(648)
			p.Match(InterpretePYC)
		}

		localctx.(*Vector_declContext).instr = instruction.NewDeclaration_Vector((func() string {
			if localctx.(*Vector_declContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).Get_ID().GetText()
			}
		}()), 4, localctx.(*Vector_declContext).GetEa().GetP(), "", false, (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetColumn()
			}
		}()))

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(651)

			var _m = p.Match(InterpreteLET)

			localctx.(*Vector_declContext)._LET = _m
		}
		{
			p.SetState(652)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext).id1 = _m
		}
		{
			p.SetState(653)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(654)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(655)
			p.Match(InterpreteMENOR)
		}
		{
			p.SetState(656)

			var _m = p.Match(InterpreteID)

			localctx.(*Vector_declContext).id2 = _m
		}
		{
			p.SetState(657)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(658)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(659)

			var _x = p.Vector_expr()

			localctx.(*Vector_declContext).ea = _x
		}
		{
			p.SetState(660)
			p.Match(InterpretePYC)
		}

		localctx.(*Vector_declContext).instr = instruction.NewDeclaration_Vector((func() string {
			if localctx.(*Vector_declContext).GetId1() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).GetId1().GetText()
			}
		}()), interfaces.STRUCT, localctx.(*Vector_declContext).GetEa().GetP(), (func() string {
			if localctx.(*Vector_declContext).GetId2() == nil {
				return ""
			} else {
				return localctx.(*Vector_declContext).GetId2().GetText()
			}
		}()), false, (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_declContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*Vector_declContext).Get_LET().GetColumn()
			}
		}()))

	}

	return localctx
}

// IVector_exprContext is an interface to support dynamic dispatch.
type IVector_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CORCHA returns the _CORCHA token.
	Get_CORCHA() antlr.Token

	// Get_NEWI returns the _NEWI token.
	Get_NEWI() antlr.Token

	// Get_WITH_CAP returns the _WITH_CAP token.
	Get_WITH_CAP() antlr.Token

	// Set_CORCHA sets the _CORCHA token.
	Set_CORCHA(antlr.Token)

	// Set_NEWI sets the _NEWI token.
	Set_NEWI(antlr.Token)

	// Set_WITH_CAP sets the _WITH_CAP token.
	Set_WITH_CAP(antlr.Token)

	// Get_list_expre_vec_arr returns the _list_expre_vec_arr rule contexts.
	Get_list_expre_vec_arr() IList_expre_vec_arrContext

	// GetExp1 returns the exp1 rule contexts.
	GetExp1() IExpression_vec_ArrContext

	// GetExp2 returns the exp2 rule contexts.
	GetExp2() IExpression_vec_ArrContext

	// Get_expression_vec_Arr returns the _expression_vec_Arr rule contexts.
	Get_expression_vec_Arr() IExpression_vec_ArrContext

	// Set_list_expre_vec_arr sets the _list_expre_vec_arr rule contexts.
	Set_list_expre_vec_arr(IList_expre_vec_arrContext)

	// SetExp1 sets the exp1 rule contexts.
	SetExp1(IExpression_vec_ArrContext)

	// SetExp2 sets the exp2 rule contexts.
	SetExp2(IExpression_vec_ArrContext)

	// Set_expression_vec_Arr sets the _expression_vec_Arr rule contexts.
	Set_expression_vec_Arr(IExpression_vec_ArrContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsVector_exprContext differentiates from other interfaces.
	IsVector_exprContext()
}

type Vector_exprContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	p                   interfaces.Expresion
	_CORCHA             antlr.Token
	_list_expre_vec_arr IList_expre_vec_arrContext
	exp1                IExpression_vec_ArrContext
	exp2                IExpression_vec_ArrContext
	_NEWI               antlr.Token
	_WITH_CAP           antlr.Token
	_expression_vec_Arr IExpression_vec_ArrContext
}

func NewEmptyVector_exprContext() *Vector_exprContext {
	var p = new(Vector_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_vector_expr
	return p
}

func (*Vector_exprContext) IsVector_exprContext() {}

func NewVector_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vector_exprContext {
	var p = new(Vector_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_vector_expr

	return p
}

func (s *Vector_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Vector_exprContext) Get_CORCHA() antlr.Token { return s._CORCHA }

func (s *Vector_exprContext) Get_NEWI() antlr.Token { return s._NEWI }

func (s *Vector_exprContext) Get_WITH_CAP() antlr.Token { return s._WITH_CAP }

func (s *Vector_exprContext) Set_CORCHA(v antlr.Token) { s._CORCHA = v }

func (s *Vector_exprContext) Set_NEWI(v antlr.Token) { s._NEWI = v }

func (s *Vector_exprContext) Set_WITH_CAP(v antlr.Token) { s._WITH_CAP = v }

func (s *Vector_exprContext) Get_list_expre_vec_arr() IList_expre_vec_arrContext {
	return s._list_expre_vec_arr
}

func (s *Vector_exprContext) GetExp1() IExpression_vec_ArrContext { return s.exp1 }

func (s *Vector_exprContext) GetExp2() IExpression_vec_ArrContext { return s.exp2 }

func (s *Vector_exprContext) Get_expression_vec_Arr() IExpression_vec_ArrContext {
	return s._expression_vec_Arr
}

func (s *Vector_exprContext) Set_list_expre_vec_arr(v IList_expre_vec_arrContext) {
	s._list_expre_vec_arr = v
}

func (s *Vector_exprContext) SetExp1(v IExpression_vec_ArrContext) { s.exp1 = v }

func (s *Vector_exprContext) SetExp2(v IExpression_vec_ArrContext) { s.exp2 = v }

func (s *Vector_exprContext) Set_expression_vec_Arr(v IExpression_vec_ArrContext) {
	s._expression_vec_Arr = v
}

func (s *Vector_exprContext) GetP() interfaces.Expresion { return s.p }

func (s *Vector_exprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Vector_exprContext) VEC() antlr.TerminalNode {
	return s.GetToken(InterpreteVEC, 0)
}

func (s *Vector_exprContext) EXCLA() antlr.TerminalNode {
	return s.GetToken(InterpreteEXCLA, 0)
}

func (s *Vector_exprContext) CORCHA() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHA, 0)
}

func (s *Vector_exprContext) List_expre_vec_arr() IList_expre_vec_arrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expre_vec_arrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expre_vec_arrContext)
}

func (s *Vector_exprContext) CORCHC() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHC, 0)
}

func (s *Vector_exprContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Vector_exprContext) AllExpression_vec_Arr() []IExpression_vec_ArrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem())
	var tst = make([]IExpression_vec_ArrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_vec_ArrContext)
		}
	}

	return tst
}

func (s *Vector_exprContext) Expression_vec_Arr(i int) IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Vector_exprContext) AllDPTS() []antlr.TerminalNode {
	return s.GetTokens(InterpreteDPTS)
}

func (s *Vector_exprContext) DPTS(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, i)
}

func (s *Vector_exprContext) NEWI() antlr.TerminalNode {
	return s.GetToken(InterpreteNEWI, 0)
}

func (s *Vector_exprContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *Vector_exprContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *Vector_exprContext) WITH_CAP() antlr.TerminalNode {
	return s.GetToken(InterpreteWITH_CAP, 0)
}

func (s *Vector_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vector_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vector_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterVector_expr(s)
	}
}

func (s *Vector_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitVector_expr(s)
	}
}

func (p *Interprete) Vector_expr() (localctx IVector_exprContext) {
	localctx = NewVector_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, InterpreteRULE_vector_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(698)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(665)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(666)
			p.Match(InterpreteEXCLA)
		}
		{
			p.SetState(667)

			var _m = p.Match(InterpreteCORCHA)

			localctx.(*Vector_exprContext)._CORCHA = _m
		}
		{
			p.SetState(668)

			var _x = p.list_expre_vec_arr(0)

			localctx.(*Vector_exprContext)._list_expre_vec_arr = _x
		}
		{
			p.SetState(669)
			p.Match(InterpreteCORCHC)
		}

		var a, b, c interfaces.Expresion
		localctx.(*Vector_exprContext).p = vector.NewVector(localctx.(*Vector_exprContext).Get_list_expre_vec_arr().GetL(), a, b, false, c, (func() int {
			if localctx.(*Vector_exprContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_CORCHA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_exprContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_CORCHA().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(672)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(673)
			p.Match(InterpreteEXCLA)
		}
		{
			p.SetState(674)

			var _m = p.Match(InterpreteCORCHA)

			localctx.(*Vector_exprContext)._CORCHA = _m
		}
		{
			p.SetState(675)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Vector_exprContext).exp1 = _x
		}
		{
			p.SetState(676)
			p.Match(InterpretePYC)
		}
		{
			p.SetState(677)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Vector_exprContext).exp2 = _x
		}
		{
			p.SetState(678)
			p.Match(InterpreteCORCHC)
		}

		var a interfaces.Expresion
		localctx.(*Vector_exprContext).p = vector.NewVector(arrayList.New(), localctx.(*Vector_exprContext).GetExp1().GetP(), localctx.(*Vector_exprContext).GetExp2().GetP(), false, a, (func() int {
			if localctx.(*Vector_exprContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_CORCHA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_exprContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_CORCHA().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(681)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(682)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(683)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(684)

			var _m = p.Match(InterpreteNEWI)

			localctx.(*Vector_exprContext)._NEWI = _m
		}
		{
			p.SetState(685)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(686)
			p.Match(InterpretePARC)
		}

		var a, b, c interfaces.Expresion
		localctx.(*Vector_exprContext).p = vector.NewVector(arrayList.New(), a, b, true, c, (func() int {
			if localctx.(*Vector_exprContext).Get_NEWI() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_NEWI().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_exprContext).Get_NEWI() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_NEWI().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(688)
			p.Match(InterpreteVEC)
		}
		{
			p.SetState(689)
			p.Match(InterpreteEXCLA)
		}
		{
			p.SetState(690)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(691)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(692)

			var _m = p.Match(InterpreteWITH_CAP)

			localctx.(*Vector_exprContext)._WITH_CAP = _m
		}
		{
			p.SetState(693)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(694)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Vector_exprContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(695)
			p.Match(InterpretePARC)
		}

		var a, b interfaces.Expresion
		localctx.(*Vector_exprContext).p = vector.NewVector(arrayList.New(), a, b, false, localctx.(*Vector_exprContext).Get_expression_vec_Arr().GetP(), (func() int {
			if localctx.(*Vector_exprContext).Get_WITH_CAP() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_WITH_CAP().GetLine()
			}
		}()), (func() int {
			if localctx.(*Vector_exprContext).Get_WITH_CAP() == nil {
				return 0
			} else {
				return localctx.(*Vector_exprContext).Get_WITH_CAP().GetColumn()
			}
		}()))

	}

	return localctx
}

// ISent_funciones_VecContext is an interface to support dynamic dispatch.
type ISent_funciones_VecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_PUSH returns the _PUSH token.
	Get_PUSH() antlr.Token

	// Get_INSERT returns the _INSERT token.
	Get_INSERT() antlr.Token

	// Get_REMOVE returns the _REMOVE token.
	Get_REMOVE() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_PUSH sets the _PUSH token.
	Set_PUSH(antlr.Token)

	// Set_INSERT sets the _INSERT token.
	Set_INSERT(antlr.Token)

	// Set_REMOVE sets the _REMOVE token.
	Set_REMOVE(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetExp1 returns the exp1 rule contexts.
	GetExp1() IExpressionContext

	// GetExp2 returns the exp2 rule contexts.
	GetExp2() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetExp1 sets the exp1 rule contexts.
	SetExp1(IExpressionContext)

	// SetExp2 sets the exp2 rule contexts.
	SetExp2(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_funciones_VecContext differentiates from other interfaces.
	IsSent_funciones_VecContext()
}

type Sent_funciones_VecContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruction
	_ID         antlr.Token
	_PUSH       antlr.Token
	_expression IExpressionContext
	_INSERT     antlr.Token
	exp1        IExpressionContext
	exp2        IExpressionContext
	_REMOVE     antlr.Token
}

func NewEmptySent_funciones_VecContext() *Sent_funciones_VecContext {
	var p = new(Sent_funciones_VecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_funciones_Vec
	return p
}

func (*Sent_funciones_VecContext) IsSent_funciones_VecContext() {}

func NewSent_funciones_VecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_funciones_VecContext {
	var p = new(Sent_funciones_VecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_funciones_Vec

	return p
}

func (s *Sent_funciones_VecContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_funciones_VecContext) Get_ID() antlr.Token { return s._ID }

func (s *Sent_funciones_VecContext) Get_PUSH() antlr.Token { return s._PUSH }

func (s *Sent_funciones_VecContext) Get_INSERT() antlr.Token { return s._INSERT }

func (s *Sent_funciones_VecContext) Get_REMOVE() antlr.Token { return s._REMOVE }

func (s *Sent_funciones_VecContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Sent_funciones_VecContext) Set_PUSH(v antlr.Token) { s._PUSH = v }

func (s *Sent_funciones_VecContext) Set_INSERT(v antlr.Token) { s._INSERT = v }

func (s *Sent_funciones_VecContext) Set_REMOVE(v antlr.Token) { s._REMOVE = v }

func (s *Sent_funciones_VecContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_funciones_VecContext) GetExp1() IExpressionContext { return s.exp1 }

func (s *Sent_funciones_VecContext) GetExp2() IExpressionContext { return s.exp2 }

func (s *Sent_funciones_VecContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_funciones_VecContext) SetExp1(v IExpressionContext) { s.exp1 = v }

func (s *Sent_funciones_VecContext) SetExp2(v IExpressionContext) { s.exp2 = v }

func (s *Sent_funciones_VecContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_funciones_VecContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_funciones_VecContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Sent_funciones_VecContext) PNT() antlr.TerminalNode {
	return s.GetToken(InterpretePNT, 0)
}

func (s *Sent_funciones_VecContext) PUSH() antlr.TerminalNode {
	return s.GetToken(InterpretePUSH, 0)
}

func (s *Sent_funciones_VecContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *Sent_funciones_VecContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Sent_funciones_VecContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_funciones_VecContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *Sent_funciones_VecContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Sent_funciones_VecContext) INSERT() antlr.TerminalNode {
	return s.GetToken(InterpreteINSERT, 0)
}

func (s *Sent_funciones_VecContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *Sent_funciones_VecContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(InterpreteREMOVE, 0)
}

func (s *Sent_funciones_VecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_funciones_VecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_funciones_VecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_funciones_Vec(s)
	}
}

func (s *Sent_funciones_VecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_funciones_Vec(s)
	}
}

func (p *Interprete) Sent_funciones_Vec() (localctx ISent_funciones_VecContext) {
	localctx = NewSent_funciones_VecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, InterpreteRULE_sent_funciones_Vec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(700)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funciones_VecContext)._ID = _m
		}
		{
			p.SetState(701)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(702)

			var _m = p.Match(InterpretePUSH)

			localctx.(*Sent_funciones_VecContext)._PUSH = _m
		}
		{
			p.SetState(703)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(704)

			var _x = p.expression(0)

			localctx.(*Sent_funciones_VecContext)._expression = _x
		}
		{
			p.SetState(705)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(706)
			p.Match(InterpretePYC)
		}
		localctx.(*Sent_funciones_VecContext).instr = funcionesvectores.NewPush((func() string {
			if localctx.(*Sent_funciones_VecContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funciones_VecContext).Get_expression().GetP(), (func() int {
			if localctx.(*Sent_funciones_VecContext).Get_PUSH() == nil {
				return 0
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_PUSH().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funciones_VecContext).Get_PUSH() == nil {
				return 0
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_PUSH().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(709)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funciones_VecContext)._ID = _m
		}
		{
			p.SetState(710)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(711)

			var _m = p.Match(InterpreteINSERT)

			localctx.(*Sent_funciones_VecContext)._INSERT = _m
		}
		{
			p.SetState(712)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(713)

			var _x = p.expression(0)

			localctx.(*Sent_funciones_VecContext).exp1 = _x
		}
		{
			p.SetState(714)
			p.Match(InterpreteCOMA)
		}
		{
			p.SetState(715)

			var _x = p.expression(0)

			localctx.(*Sent_funciones_VecContext).exp2 = _x
		}
		{
			p.SetState(716)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(717)
			p.Match(InterpretePYC)
		}

		localctx.(*Sent_funciones_VecContext).instr = funcionesvectores.NewInsert((func() string {
			if localctx.(*Sent_funciones_VecContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funciones_VecContext).GetExp1().GetP(), localctx.(*Sent_funciones_VecContext).GetExp2().GetP(), (func() int {
			if localctx.(*Sent_funciones_VecContext).Get_INSERT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_INSERT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funciones_VecContext).Get_INSERT() == nil {
				return 0
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_INSERT().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(720)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_funciones_VecContext)._ID = _m
		}
		{
			p.SetState(721)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(722)

			var _m = p.Match(InterpreteREMOVE)

			localctx.(*Sent_funciones_VecContext)._REMOVE = _m
		}
		{
			p.SetState(723)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(724)

			var _x = p.expression(0)

			localctx.(*Sent_funciones_VecContext)._expression = _x
		}
		{
			p.SetState(725)
			p.Match(InterpretePARC)
		}
		{
			p.SetState(726)
			p.Match(InterpretePYC)
		}

		localctx.(*Sent_funciones_VecContext).instr = funcionesvectores.NewRemove_instr((func() string {
			if localctx.(*Sent_funciones_VecContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_funciones_VecContext).Get_expression().GetP(), (func() int {
			if localctx.(*Sent_funciones_VecContext).Get_REMOVE() == nil {
				return 0
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_REMOVE().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_funciones_VecContext).Get_REMOVE() == nil {
				return 0
			} else {
				return localctx.(*Sent_funciones_VecContext).Get_REMOVE().GetColumn()
			}
		}()))

	}

	return localctx
}

// ISentencias_exprContext is an interface to support dynamic dispatch.
type ISentencias_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_sent_if_expr returns the _sent_if_expr rule contexts.
	Get_sent_if_expr() ISent_if_exprContext

	// Get_sent_loop_expr returns the _sent_loop_expr rule contexts.
	Get_sent_loop_expr() ISent_loop_exprContext

	// Get_sent_matchexpr returns the _sent_matchexpr rule contexts.
	Get_sent_matchexpr() ISent_matchexprContext

	// Set_sent_if_expr sets the _sent_if_expr rule contexts.
	Set_sent_if_expr(ISent_if_exprContext)

	// Set_sent_loop_expr sets the _sent_loop_expr rule contexts.
	Set_sent_loop_expr(ISent_loop_exprContext)

	// Set_sent_matchexpr sets the _sent_matchexpr rule contexts.
	Set_sent_matchexpr(ISent_matchexprContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsSentencias_exprContext differentiates from other interfaces.
	IsSentencias_exprContext()
}

type Sentencias_exprContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	p               interfaces.Expresion
	_sent_if_expr   ISent_if_exprContext
	_sent_loop_expr ISent_loop_exprContext
	_sent_matchexpr ISent_matchexprContext
}

func NewEmptySentencias_exprContext() *Sentencias_exprContext {
	var p = new(Sentencias_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sentencias_expr
	return p
}

func (*Sentencias_exprContext) IsSentencias_exprContext() {}

func NewSentencias_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sentencias_exprContext {
	var p = new(Sentencias_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sentencias_expr

	return p
}

func (s *Sentencias_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sentencias_exprContext) Get_sent_if_expr() ISent_if_exprContext { return s._sent_if_expr }

func (s *Sentencias_exprContext) Get_sent_loop_expr() ISent_loop_exprContext {
	return s._sent_loop_expr
}

func (s *Sentencias_exprContext) Get_sent_matchexpr() ISent_matchexprContext {
	return s._sent_matchexpr
}

func (s *Sentencias_exprContext) Set_sent_if_expr(v ISent_if_exprContext) { s._sent_if_expr = v }

func (s *Sentencias_exprContext) Set_sent_loop_expr(v ISent_loop_exprContext) { s._sent_loop_expr = v }

func (s *Sentencias_exprContext) Set_sent_matchexpr(v ISent_matchexprContext) { s._sent_matchexpr = v }

func (s *Sentencias_exprContext) GetP() interfaces.Expresion { return s.p }

func (s *Sentencias_exprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Sentencias_exprContext) Sent_if_expr() ISent_if_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_if_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_if_exprContext)
}

func (s *Sentencias_exprContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Sentencias_exprContext) Sent_loop_expr() ISent_loop_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_loop_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_loop_exprContext)
}

func (s *Sentencias_exprContext) Sent_matchexpr() ISent_matchexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_matchexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_matchexprContext)
}

func (s *Sentencias_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sentencias_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sentencias_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSentencias_expr(s)
	}
}

func (s *Sentencias_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSentencias_expr(s)
	}
}

func (p *Interprete) Sentencias_expr() (localctx ISentencias_exprContext) {
	localctx = NewSentencias_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, InterpreteRULE_sentencias_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(741)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case InterpreteIF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(731)

			var _x = p.Sent_if_expr()

			localctx.(*Sentencias_exprContext)._sent_if_expr = _x
		}
		{
			p.SetState(732)
			p.Match(InterpretePYC)
		}
		localctx.(*Sentencias_exprContext).p = localctx.(*Sentencias_exprContext).Get_sent_if_expr().GetP()

	case InterpreteLOOP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(735)

			var _x = p.Sent_loop_expr()

			localctx.(*Sentencias_exprContext)._sent_loop_expr = _x
		}
		localctx.(*Sentencias_exprContext).p = localctx.(*Sentencias_exprContext).Get_sent_loop_expr().GetP()

	case InterpreteMATCH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(738)

			var _x = p.Sent_matchexpr()

			localctx.(*Sentencias_exprContext)._sent_matchexpr = _x
		}
		localctx.(*Sentencias_exprContext).p = localctx.(*Sentencias_exprContext).Get_sent_matchexpr().GetP()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISent_matchexprContext is an interface to support dynamic dispatch.
type ISent_matchexprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_matchexpr_listbrazos returns the _matchexpr_listbrazos rule contexts.
	Get_matchexpr_listbrazos() IMatchexpr_listbrazosContext

	// Get_el_defaultexpr returns the _el_defaultexpr rule contexts.
	Get_el_defaultexpr() IEl_defaultexprContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_matchexpr_listbrazos sets the _matchexpr_listbrazos rule contexts.
	Set_matchexpr_listbrazos(IMatchexpr_listbrazosContext)

	// Set_el_defaultexpr sets the _el_defaultexpr rule contexts.
	Set_el_defaultexpr(IEl_defaultexprContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsSent_matchexprContext differentiates from other interfaces.
	IsSent_matchexprContext()
}

type Sent_matchexprContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	p                     interfaces.Expresion
	_MATCH                antlr.Token
	_expression           IExpressionContext
	_matchexpr_listbrazos IMatchexpr_listbrazosContext
	_el_defaultexpr       IEl_defaultexprContext
}

func NewEmptySent_matchexprContext() *Sent_matchexprContext {
	var p = new(Sent_matchexprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_matchexpr
	return p
}

func (*Sent_matchexprContext) IsSent_matchexprContext() {}

func NewSent_matchexprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_matchexprContext {
	var p = new(Sent_matchexprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_matchexpr

	return p
}

func (s *Sent_matchexprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_matchexprContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Sent_matchexprContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Sent_matchexprContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_matchexprContext) Get_matchexpr_listbrazos() IMatchexpr_listbrazosContext {
	return s._matchexpr_listbrazos
}

func (s *Sent_matchexprContext) Get_el_defaultexpr() IEl_defaultexprContext { return s._el_defaultexpr }

func (s *Sent_matchexprContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_matchexprContext) Set_matchexpr_listbrazos(v IMatchexpr_listbrazosContext) {
	s._matchexpr_listbrazos = v
}

func (s *Sent_matchexprContext) Set_el_defaultexpr(v IEl_defaultexprContext) { s._el_defaultexpr = v }

func (s *Sent_matchexprContext) GetP() interfaces.Expresion { return s.p }

func (s *Sent_matchexprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Sent_matchexprContext) MATCH() antlr.TerminalNode {
	return s.GetToken(InterpreteMATCH, 0)
}

func (s *Sent_matchexprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_matchexprContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_matchexprContext) Matchexpr_listbrazos() IMatchexpr_listbrazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchexpr_listbrazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchexpr_listbrazosContext)
}

func (s *Sent_matchexprContext) El_defaultexpr() IEl_defaultexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEl_defaultexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEl_defaultexprContext)
}

func (s *Sent_matchexprContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_matchexprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_matchexprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_matchexprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_matchexpr(s)
	}
}

func (s *Sent_matchexprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_matchexpr(s)
	}
}

func (p *Interprete) Sent_matchexpr() (localctx ISent_matchexprContext) {
	localctx = NewSent_matchexprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, InterpreteRULE_sent_matchexpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(765)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(743)

			var _m = p.Match(InterpreteMATCH)

			localctx.(*Sent_matchexprContext)._MATCH = _m
		}
		{
			p.SetState(744)

			var _x = p.expression(0)

			localctx.(*Sent_matchexprContext)._expression = _x
		}
		{
			p.SetState(745)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(746)

			var _x = p.matchexpr_listbrazos(0)

			localctx.(*Sent_matchexprContext)._matchexpr_listbrazos = _x
		}
		{
			p.SetState(747)

			var _x = p.El_defaultexpr()

			localctx.(*Sent_matchexprContext)._el_defaultexpr = _x
		}
		{
			p.SetState(748)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_matchexprContext).p = matchexpr.NewMatch_Expr(localctx.(*Sent_matchexprContext).Get_expression().GetP(), localctx.(*Sent_matchexprContext).Get_matchexpr_listbrazos().GetL(), localctx.(*Sent_matchexprContext).Get_el_defaultexpr().GetP(), (func() int {
			if localctx.(*Sent_matchexprContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchexprContext).Get_MATCH().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_matchexprContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchexprContext).Get_MATCH().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(751)

			var _m = p.Match(InterpreteMATCH)

			localctx.(*Sent_matchexprContext)._MATCH = _m
		}
		{
			p.SetState(752)

			var _x = p.expression(0)

			localctx.(*Sent_matchexprContext)._expression = _x
		}
		{
			p.SetState(753)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(754)

			var _x = p.matchexpr_listbrazos(0)

			localctx.(*Sent_matchexprContext)._matchexpr_listbrazos = _x
		}
		{
			p.SetState(755)
			p.Match(InterpreteLLAVEC)
		}

		var a interfaces.Expresion
		localctx.(*Sent_matchexprContext).p = matchexpr.NewMatch_Expr(localctx.(*Sent_matchexprContext).Get_expression().GetP(), localctx.(*Sent_matchexprContext).Get_matchexpr_listbrazos().GetL(), a, (func() int {
			if localctx.(*Sent_matchexprContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchexprContext).Get_MATCH().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_matchexprContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchexprContext).Get_MATCH().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(758)

			var _m = p.Match(InterpreteMATCH)

			localctx.(*Sent_matchexprContext)._MATCH = _m
		}
		{
			p.SetState(759)

			var _x = p.expression(0)

			localctx.(*Sent_matchexprContext)._expression = _x
		}
		{
			p.SetState(760)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(761)

			var _x = p.El_defaultexpr()

			localctx.(*Sent_matchexprContext)._el_defaultexpr = _x
		}
		{
			p.SetState(762)
			p.Match(InterpreteLLAVEC)
		}

		localctx.(*Sent_matchexprContext).p = matchexpr.NewMatch_Expr(localctx.(*Sent_matchexprContext).Get_expression().GetP(), arrayList.New(), localctx.(*Sent_matchexprContext).Get_el_defaultexpr().GetP(), (func() int {
			if localctx.(*Sent_matchexprContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchexprContext).Get_MATCH().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_matchexprContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchexprContext).Get_MATCH().GetColumn()
			}
		}()))

	}

	return localctx
}

// IMatchexpr_listbrazosContext is an interface to support dynamic dispatch.
type IMatchexpr_listbrazosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBrz returns the brz rule contexts.
	GetBrz() IMatchexpr_listbrazosContext

	// Get_list_brazosexpr returns the _list_brazosexpr rule contexts.
	Get_list_brazosexpr() IList_brazosexprContext

	// SetBrz sets the brz rule contexts.
	SetBrz(IMatchexpr_listbrazosContext)

	// Set_list_brazosexpr sets the _list_brazosexpr rule contexts.
	Set_list_brazosexpr(IList_brazosexprContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsMatchexpr_listbrazosContext differentiates from other interfaces.
	IsMatchexpr_listbrazosContext()
}

type Matchexpr_listbrazosContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	l                *arrayList.List
	brz              IMatchexpr_listbrazosContext
	_list_brazosexpr IList_brazosexprContext
}

func NewEmptyMatchexpr_listbrazosContext() *Matchexpr_listbrazosContext {
	var p = new(Matchexpr_listbrazosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_matchexpr_listbrazos
	return p
}

func (*Matchexpr_listbrazosContext) IsMatchexpr_listbrazosContext() {}

func NewMatchexpr_listbrazosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Matchexpr_listbrazosContext {
	var p = new(Matchexpr_listbrazosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_matchexpr_listbrazos

	return p
}

func (s *Matchexpr_listbrazosContext) GetParser() antlr.Parser { return s.parser }

func (s *Matchexpr_listbrazosContext) GetBrz() IMatchexpr_listbrazosContext { return s.brz }

func (s *Matchexpr_listbrazosContext) Get_list_brazosexpr() IList_brazosexprContext {
	return s._list_brazosexpr
}

func (s *Matchexpr_listbrazosContext) SetBrz(v IMatchexpr_listbrazosContext) { s.brz = v }

func (s *Matchexpr_listbrazosContext) Set_list_brazosexpr(v IList_brazosexprContext) {
	s._list_brazosexpr = v
}

func (s *Matchexpr_listbrazosContext) GetL() *arrayList.List { return s.l }

func (s *Matchexpr_listbrazosContext) SetL(v *arrayList.List) { s.l = v }

func (s *Matchexpr_listbrazosContext) List_brazosexpr() IList_brazosexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_brazosexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_brazosexprContext)
}

func (s *Matchexpr_listbrazosContext) Matchexpr_listbrazos() IMatchexpr_listbrazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchexpr_listbrazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchexpr_listbrazosContext)
}

func (s *Matchexpr_listbrazosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Matchexpr_listbrazosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Matchexpr_listbrazosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterMatchexpr_listbrazos(s)
	}
}

func (s *Matchexpr_listbrazosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitMatchexpr_listbrazos(s)
	}
}

func (p *Interprete) Matchexpr_listbrazos() (localctx IMatchexpr_listbrazosContext) {
	return p.matchexpr_listbrazos(0)
}

func (p *Interprete) matchexpr_listbrazos(_p int) (localctx IMatchexpr_listbrazosContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMatchexpr_listbrazosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMatchexpr_listbrazosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 46
	p.EnterRecursionRule(localctx, 46, InterpreteRULE_matchexpr_listbrazos, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)

		var _x = p.List_brazosexpr()

		localctx.(*Matchexpr_listbrazosContext)._list_brazosexpr = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Matchexpr_listbrazosContext).Get_list_brazosexpr().GetP())
	localctx.(*Matchexpr_listbrazosContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMatchexpr_listbrazosContext(p, _parentctx, _parentState)
			localctx.(*Matchexpr_listbrazosContext).brz = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_matchexpr_listbrazos)
			p.SetState(771)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(772)

				var _x = p.List_brazosexpr()

				localctx.(*Matchexpr_listbrazosContext)._list_brazosexpr = _x
			}

			localctx.(*Matchexpr_listbrazosContext).GetBrz().GetL().Add(localctx.(*Matchexpr_listbrazosContext).Get_list_brazosexpr().GetP())
			localctx.(*Matchexpr_listbrazosContext).l = localctx.(*Matchexpr_listbrazosContext).GetBrz().GetL()

		}
		p.SetState(779)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())
	}

	return localctx
}

// IList_brazosexprContext is an interface to support dynamic dispatch.
type IList_brazosexprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IGUAL returns the _IGUAL token.
	Get_IGUAL() antlr.Token

	// Set_IGUAL sets the _IGUAL token.
	Set_IGUAL(antlr.Token)

	// GetPo returns the po rule contexts.
	GetPo() IExpressionContext

	// GetPi returns the pi rule contexts.
	GetPi() IExpressionContext

	// GetExp returns the exp rule contexts.
	GetExp() IMatchexpr_listbrazosexpr_listexprContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetPo sets the po rule contexts.
	SetPo(IExpressionContext)

	// SetPi sets the pi rule contexts.
	SetPi(IExpressionContext)

	// SetExp sets the exp rule contexts.
	SetExp(IMatchexpr_listbrazosexpr_listexprContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsList_brazosexprContext differentiates from other interfaces.
	IsList_brazosexprContext()
}

type List_brazosexprContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	po          IExpressionContext
	_IGUAL      antlr.Token
	pi          IExpressionContext
	exp         IMatchexpr_listbrazosexpr_listexprContext
	_expression IExpressionContext
}

func NewEmptyList_brazosexprContext() *List_brazosexprContext {
	var p = new(List_brazosexprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_list_brazosexpr
	return p
}

func (*List_brazosexprContext) IsList_brazosexprContext() {}

func NewList_brazosexprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_brazosexprContext {
	var p = new(List_brazosexprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_list_brazosexpr

	return p
}

func (s *List_brazosexprContext) GetParser() antlr.Parser { return s.parser }

func (s *List_brazosexprContext) Get_IGUAL() antlr.Token { return s._IGUAL }

func (s *List_brazosexprContext) Set_IGUAL(v antlr.Token) { s._IGUAL = v }

func (s *List_brazosexprContext) GetPo() IExpressionContext { return s.po }

func (s *List_brazosexprContext) GetPi() IExpressionContext { return s.pi }

func (s *List_brazosexprContext) GetExp() IMatchexpr_listbrazosexpr_listexprContext { return s.exp }

func (s *List_brazosexprContext) Get_expression() IExpressionContext { return s._expression }

func (s *List_brazosexprContext) SetPo(v IExpressionContext) { s.po = v }

func (s *List_brazosexprContext) SetPi(v IExpressionContext) { s.pi = v }

func (s *List_brazosexprContext) SetExp(v IMatchexpr_listbrazosexpr_listexprContext) { s.exp = v }

func (s *List_brazosexprContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *List_brazosexprContext) GetP() interfaces.Expresion { return s.p }

func (s *List_brazosexprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *List_brazosexprContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *List_brazosexprContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *List_brazosexprContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *List_brazosexprContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *List_brazosexprContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_brazosexprContext) Matchexpr_listbrazosexpr_listexpr() IMatchexpr_listbrazosexpr_listexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchexpr_listbrazosexpr_listexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchexpr_listbrazosexpr_listexprContext)
}

func (s *List_brazosexprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_brazosexprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_brazosexprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterList_brazosexpr(s)
	}
}

func (s *List_brazosexprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitList_brazosexpr(s)
	}
}

func (p *Interprete) List_brazosexpr() (localctx IList_brazosexprContext) {
	localctx = NewList_brazosexprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, InterpreteRULE_list_brazosexpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(794)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(780)

			var _x = p.expression(0)

			localctx.(*List_brazosexprContext).po = _x
		}
		{
			p.SetState(781)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*List_brazosexprContext)._IGUAL = _m
		}
		{
			p.SetState(782)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(783)

			var _x = p.expression(0)

			localctx.(*List_brazosexprContext).pi = _x
		}
		{
			p.SetState(784)
			p.Match(InterpreteCOMA)
		}

		a := arrayList.New()
		a.Add(localctx.(*List_brazosexprContext).GetPo().GetP())
		localctx.(*List_brazosexprContext).p = matchexpr.NewBrazo_expr(a, localctx.(*List_brazosexprContext).GetPi().GetP(), (func() int {
			if localctx.(*List_brazosexprContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosexprContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*List_brazosexprContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosexprContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(787)

			var _x = p.Matchexpr_listbrazosexpr_listexpr()

			localctx.(*List_brazosexprContext).exp = _x
		}
		{
			p.SetState(788)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*List_brazosexprContext)._IGUAL = _m
		}
		{
			p.SetState(789)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(790)

			var _x = p.expression(0)

			localctx.(*List_brazosexprContext)._expression = _x
		}
		{
			p.SetState(791)
			p.Match(InterpreteCOMA)
		}
		localctx.(*List_brazosexprContext).p = matchexpr.NewBrazo_expr(localctx.(*List_brazosexprContext).GetExp().GetL(), localctx.(*List_brazosexprContext).Get_expression().GetP(), (func() int {
			if localctx.(*List_brazosexprContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosexprContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*List_brazosexprContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosexprContext).Get_IGUAL().GetColumn()
			}
		}()))

	}

	return localctx
}

// IMatchexpr_listbrazosexpr_listexprContext is an interface to support dynamic dispatch.
type IMatchexpr_listbrazosexpr_listexprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetG returns the g rule contexts.
	GetG() IMatch_listbrazos_listexprContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetG sets the g rule contexts.
	SetG(IMatch_listbrazos_listexprContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsMatchexpr_listbrazosexpr_listexprContext differentiates from other interfaces.
	IsMatchexpr_listbrazosexpr_listexprContext()
}

type Matchexpr_listbrazosexpr_listexprContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l           *arrayList.List
	g           IMatch_listbrazos_listexprContext
	_expression IExpressionContext
}

func NewEmptyMatchexpr_listbrazosexpr_listexprContext() *Matchexpr_listbrazosexpr_listexprContext {
	var p = new(Matchexpr_listbrazosexpr_listexprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_matchexpr_listbrazosexpr_listexpr
	return p
}

func (*Matchexpr_listbrazosexpr_listexprContext) IsMatchexpr_listbrazosexpr_listexprContext() {}

func NewMatchexpr_listbrazosexpr_listexprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Matchexpr_listbrazosexpr_listexprContext {
	var p = new(Matchexpr_listbrazosexpr_listexprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_matchexpr_listbrazosexpr_listexpr

	return p
}

func (s *Matchexpr_listbrazosexpr_listexprContext) GetParser() antlr.Parser { return s.parser }

func (s *Matchexpr_listbrazosexpr_listexprContext) GetG() IMatch_listbrazos_listexprContext {
	return s.g
}

func (s *Matchexpr_listbrazosexpr_listexprContext) Get_expression() IExpressionContext {
	return s._expression
}

func (s *Matchexpr_listbrazosexpr_listexprContext) SetG(v IMatch_listbrazos_listexprContext) { s.g = v }

func (s *Matchexpr_listbrazosexpr_listexprContext) Set_expression(v IExpressionContext) {
	s._expression = v
}

func (s *Matchexpr_listbrazosexpr_listexprContext) GetL() *arrayList.List { return s.l }

func (s *Matchexpr_listbrazosexpr_listexprContext) SetL(v *arrayList.List) { s.l = v }

func (s *Matchexpr_listbrazosexpr_listexprContext) OR_MATCH() antlr.TerminalNode {
	return s.GetToken(InterpreteOR_MATCH, 0)
}

func (s *Matchexpr_listbrazosexpr_listexprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Matchexpr_listbrazosexpr_listexprContext) Match_listbrazos_listexpr() IMatch_listbrazos_listexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_listbrazos_listexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_listbrazos_listexprContext)
}

func (s *Matchexpr_listbrazosexpr_listexprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Matchexpr_listbrazosexpr_listexprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Matchexpr_listbrazosexpr_listexprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterMatchexpr_listbrazosexpr_listexpr(s)
	}
}

func (s *Matchexpr_listbrazosexpr_listexprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitMatchexpr_listbrazosexpr_listexpr(s)
	}
}

func (p *Interprete) Matchexpr_listbrazosexpr_listexpr() (localctx IMatchexpr_listbrazosexpr_listexprContext) {
	localctx = NewMatchexpr_listbrazosexpr_listexprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, InterpreteRULE_matchexpr_listbrazosexpr_listexpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(804)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(796)

			var _x = p.match_listbrazos_listexpr(0)

			localctx.(*Matchexpr_listbrazosexpr_listexprContext).g = _x
		}
		{
			p.SetState(797)
			p.Match(InterpreteOR_MATCH)
		}
		{
			p.SetState(798)

			var _x = p.expression(0)

			localctx.(*Matchexpr_listbrazosexpr_listexprContext)._expression = _x
		}

		localctx.(*Matchexpr_listbrazosexpr_listexprContext).GetG().GetL().Add(localctx.(*Matchexpr_listbrazosexpr_listexprContext).Get_expression().GetP())
		localctx.(*Matchexpr_listbrazosexpr_listexprContext).l = localctx.(*Matchexpr_listbrazosexpr_listexprContext).GetG().GetL()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(801)

			var _x = p.expression(0)

			localctx.(*Matchexpr_listbrazosexpr_listexprContext)._expression = _x
		}

		a := arrayList.New()
		a.Add(localctx.(*Matchexpr_listbrazosexpr_listexprContext).Get_expression().GetP())
		localctx.(*Matchexpr_listbrazosexpr_listexprContext).l = a

	}

	return localctx
}

// IEl_defaultexprContext is an interface to support dynamic dispatch.
type IEl_defaultexprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAUL returns the _DEFAUL token.
	Get_DEFAUL() antlr.Token

	// Set_DEFAUL sets the _DEFAUL token.
	Set_DEFAUL(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsEl_defaultexprContext differentiates from other interfaces.
	IsEl_defaultexprContext()
}

type El_defaultexprContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	_DEFAUL     antlr.Token
	_expression IExpressionContext
}

func NewEmptyEl_defaultexprContext() *El_defaultexprContext {
	var p = new(El_defaultexprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_el_defaultexpr
	return p
}

func (*El_defaultexprContext) IsEl_defaultexprContext() {}

func NewEl_defaultexprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *El_defaultexprContext {
	var p = new(El_defaultexprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_el_defaultexpr

	return p
}

func (s *El_defaultexprContext) GetParser() antlr.Parser { return s.parser }

func (s *El_defaultexprContext) Get_DEFAUL() antlr.Token { return s._DEFAUL }

func (s *El_defaultexprContext) Set_DEFAUL(v antlr.Token) { s._DEFAUL = v }

func (s *El_defaultexprContext) Get_expression() IExpressionContext { return s._expression }

func (s *El_defaultexprContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *El_defaultexprContext) GetP() interfaces.Expresion { return s.p }

func (s *El_defaultexprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *El_defaultexprContext) DEFAUL() antlr.TerminalNode {
	return s.GetToken(InterpreteDEFAUL, 0)
}

func (s *El_defaultexprContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *El_defaultexprContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *El_defaultexprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *El_defaultexprContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *El_defaultexprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *El_defaultexprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *El_defaultexprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterEl_defaultexpr(s)
	}
}

func (s *El_defaultexprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitEl_defaultexpr(s)
	}
}

func (p *Interprete) El_defaultexpr() (localctx IEl_defaultexprContext) {
	localctx = NewEl_defaultexprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, InterpreteRULE_el_defaultexpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(806)

		var _m = p.Match(InterpreteDEFAUL)

		localctx.(*El_defaultexprContext)._DEFAUL = _m
	}
	{
		p.SetState(807)
		p.Match(InterpreteIGUAL)
	}
	{
		p.SetState(808)
		p.Match(InterpreteMAYOR)
	}
	{
		p.SetState(809)

		var _x = p.expression(0)

		localctx.(*El_defaultexprContext)._expression = _x
	}
	{
		p.SetState(810)
		p.Match(InterpreteCOMA)
	}
	localctx.(*El_defaultexprContext).p = matchexpr.NewDefault_Expr(localctx.(*El_defaultexprContext).Get_expression().GetP(), (func() int {
		if localctx.(*El_defaultexprContext).Get_DEFAUL() == nil {
			return 0
		} else {
			return localctx.(*El_defaultexprContext).Get_DEFAUL().GetLine()
		}
	}()), (func() int {
		if localctx.(*El_defaultexprContext).Get_DEFAUL() == nil {
			return 0
		} else {
			return localctx.(*El_defaultexprContext).Get_DEFAUL().GetColumn()
		}
	}()))

	return localctx
}

// ITipoContext is an interface to support dynamic dispatch.
type ITipoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTe returns the te attribute.
	GetTe() interfaces.TipoExpresion

	// SetTe sets the te attribute.
	SetTe(interfaces.TipoExpresion)

	// IsTipoContext differentiates from other interfaces.
	IsTipoContext()
}

type TipoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	te     interfaces.TipoExpresion
}

func NewEmptyTipoContext() *TipoContext {
	var p = new(TipoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_tipo
	return p
}

func (*TipoContext) IsTipoContext() {}

func NewTipoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TipoContext {
	var p = new(TipoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_tipo

	return p
}

func (s *TipoContext) GetParser() antlr.Parser { return s.parser }

func (s *TipoContext) GetTe() interfaces.TipoExpresion { return s.te }

func (s *TipoContext) SetTe(v interfaces.TipoExpresion) { s.te = v }

func (s *TipoContext) INT() antlr.TerminalNode {
	return s.GetToken(InterpreteINT, 0)
}

func (s *TipoContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(InterpreteFLOAT, 0)
}

func (s *TipoContext) STR() antlr.TerminalNode {
	return s.GetToken(InterpreteSTR, 0)
}

func (s *TipoContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(InterpreteBOOLEAN, 0)
}

func (s *TipoContext) CHAR() antlr.TerminalNode {
	return s.GetToken(InterpreteCHAR, 0)
}

func (s *TipoContext) STRING() antlr.TerminalNode {
	return s.GetToken(InterpreteSTRING, 0)
}

func (s *TipoContext) USIZE() antlr.TerminalNode {
	return s.GetToken(InterpreteUSIZE, 0)
}

func (s *TipoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TipoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TipoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterTipo(s)
	}
}

func (s *TipoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitTipo(s)
	}
}

func (p *Interprete) Tipo() (localctx ITipoContext) {
	localctx = NewTipoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, InterpreteRULE_tipo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(827)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case InterpreteINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(813)
			p.Match(InterpreteINT)
		}
		localctx.(*TipoContext).te = 0

	case InterpreteFLOAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(815)
			p.Match(InterpreteFLOAT)
		}
		localctx.(*TipoContext).te = 1

	case InterpreteSTR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(817)
			p.Match(InterpreteSTR)
		}
		localctx.(*TipoContext).te = 2

	case InterpreteBOOLEAN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(819)
			p.Match(InterpreteBOOLEAN)
		}
		localctx.(*TipoContext).te = 3

	case InterpreteCHAR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(821)
			p.Match(InterpreteCHAR)
		}
		localctx.(*TipoContext).te = 7

	case InterpreteSTRING:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(823)
			p.Match(InterpreteSTRING)
		}
		localctx.(*TipoContext).te = 8

	case InterpreteUSIZE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(825)
			p.Match(InterpreteUSIZE)
		}
		localctx.(*TipoContext).te = 13

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// GetId1 returns the id1 token.
	GetId1() antlr.Token

	// GetId2 returns the id2 token.
	GetId2() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// SetId1 sets the id1 token.
	SetId1(antlr.Token)

	// SetId2 sets the id2 token.
	SetId2(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruction
	_ID         antlr.Token
	_expression IExpressionContext
	id1         antlr.Token
	id2         antlr.Token
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_asignacion
	return p
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) Get_ID() antlr.Token { return s._ID }

func (s *AsignacionContext) GetId1() antlr.Token { return s.id1 }

func (s *AsignacionContext) GetId2() antlr.Token { return s.id2 }

func (s *AsignacionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *AsignacionContext) SetId1(v antlr.Token) { s.id1 = v }

func (s *AsignacionContext) SetId2(v antlr.Token) { s.id2 = v }

func (s *AsignacionContext) Get_expression() IExpressionContext { return s._expression }

func (s *AsignacionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *AsignacionContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *AsignacionContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *AsignacionContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(InterpreteID)
}

func (s *AsignacionContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteID, i)
}

func (s *AsignacionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *AsignacionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AsignacionContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *AsignacionContext) PNT() antlr.TerminalNode {
	return s.GetToken(InterpretePNT, 0)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsignacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterAsignacion(s)
	}
}

func (s *AsignacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitAsignacion(s)
	}
}

func (p *Interprete) Asignacion() (localctx IAsignacionContext) {
	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, InterpreteRULE_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(829)

			var _m = p.Match(InterpreteID)

			localctx.(*AsignacionContext)._ID = _m
		}
		{
			p.SetState(830)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(831)

			var _x = p.expression(0)

			localctx.(*AsignacionContext)._expression = _x
		}
		{
			p.SetState(832)
			p.Match(InterpretePYC)
		}
		localctx.(*AsignacionContext).instr = instruction.NewAsignacion((func() string {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetText()
			}
		}()), localctx.(*AsignacionContext).Get_expression().GetP(), "", (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(835)

			var _m = p.Match(InterpreteID)

			localctx.(*AsignacionContext).id1 = _m
		}
		{
			p.SetState(836)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(837)

			var _m = p.Match(InterpreteID)

			localctx.(*AsignacionContext).id2 = _m
		}
		{
			p.SetState(838)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(839)

			var _x = p.expression(0)

			localctx.(*AsignacionContext)._expression = _x
		}
		{
			p.SetState(840)
			p.Match(InterpretePYC)
		}
		localctx.(*AsignacionContext).instr = instruction.NewAsignacion((func() string {
			if localctx.(*AsignacionContext).GetId1() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).GetId1().GetText()
			}
		}()), localctx.(*AsignacionContext).Get_expression().GetP(), (func() string {
			if localctx.(*AsignacionContext).GetId2() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).GetId2().GetText()
			}
		}()), (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetLine()
			}
		}()), (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetColumn()
			}
		}()))

	}

	return localctx
}

// ISent_if_exprContext is an interface to support dynamic dispatch.
type ISent_if_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// GetIni returns the ini rule contexts.
	GetIni() IExpressionContext

	// GetExp1 returns the exp1 rule contexts.
	GetExp1() IExpressionContext

	// GetExp2 returns the exp2 rule contexts.
	GetExp2() IExpressionContext

	// GetSent returns the sent rule contexts.
	GetSent() ISent_if_exprContext

	// SetIni sets the ini rule contexts.
	SetIni(IExpressionContext)

	// SetExp1 sets the exp1 rule contexts.
	SetExp1(IExpressionContext)

	// SetExp2 sets the exp2 rule contexts.
	SetExp2(IExpressionContext)

	// SetSent sets the sent rule contexts.
	SetSent(ISent_if_exprContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsSent_if_exprContext differentiates from other interfaces.
	IsSent_if_exprContext()
}

type Sent_if_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      interfaces.Expresion
	_IF    antlr.Token
	ini    IExpressionContext
	exp1   IExpressionContext
	exp2   IExpressionContext
	sent   ISent_if_exprContext
}

func NewEmptySent_if_exprContext() *Sent_if_exprContext {
	var p = new(Sent_if_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_if_expr
	return p
}

func (*Sent_if_exprContext) IsSent_if_exprContext() {}

func NewSent_if_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_if_exprContext {
	var p = new(Sent_if_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_if_expr

	return p
}

func (s *Sent_if_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_if_exprContext) Get_IF() antlr.Token { return s._IF }

func (s *Sent_if_exprContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Sent_if_exprContext) GetIni() IExpressionContext { return s.ini }

func (s *Sent_if_exprContext) GetExp1() IExpressionContext { return s.exp1 }

func (s *Sent_if_exprContext) GetExp2() IExpressionContext { return s.exp2 }

func (s *Sent_if_exprContext) GetSent() ISent_if_exprContext { return s.sent }

func (s *Sent_if_exprContext) SetIni(v IExpressionContext) { s.ini = v }

func (s *Sent_if_exprContext) SetExp1(v IExpressionContext) { s.exp1 = v }

func (s *Sent_if_exprContext) SetExp2(v IExpressionContext) { s.exp2 = v }

func (s *Sent_if_exprContext) SetSent(v ISent_if_exprContext) { s.sent = v }

func (s *Sent_if_exprContext) GetP() interfaces.Expresion { return s.p }

func (s *Sent_if_exprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Sent_if_exprContext) IF() antlr.TerminalNode {
	return s.GetToken(InterpreteIF, 0)
}

func (s *Sent_if_exprContext) AllLLAVEA() []antlr.TerminalNode {
	return s.GetTokens(InterpreteLLAVEA)
}

func (s *Sent_if_exprContext) LLAVEA(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, i)
}

func (s *Sent_if_exprContext) AllLLAVEC() []antlr.TerminalNode {
	return s.GetTokens(InterpreteLLAVEC)
}

func (s *Sent_if_exprContext) LLAVEC(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, i)
}

func (s *Sent_if_exprContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Sent_if_exprContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_if_exprContext) ELSE() antlr.TerminalNode {
	return s.GetToken(InterpreteELSE, 0)
}

func (s *Sent_if_exprContext) Sent_if_expr() ISent_if_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_if_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_if_exprContext)
}

func (s *Sent_if_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_if_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_if_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_if_expr(s)
	}
}

func (s *Sent_if_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_if_expr(s)
	}
}

func (p *Interprete) Sent_if_expr() (localctx ISent_if_exprContext) {
	localctx = NewSent_if_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, InterpreteRULE_sent_if_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(845)

			var _m = p.Match(InterpreteIF)

			localctx.(*Sent_if_exprContext)._IF = _m
		}
		{
			p.SetState(846)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).ini = _x
		}
		{
			p.SetState(847)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(848)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).exp1 = _x
		}
		{
			p.SetState(849)
			p.Match(InterpreteLLAVEC)
		}

		var a interfaces.Expresion
		localctx.(*Sent_if_exprContext).p = sentenciasexpr.NewIf_expr(localctx.(*Sent_if_exprContext).GetIni().GetP(), localctx.(*Sent_if_exprContext).GetExp1().GetP(), a, (func() int {
			if localctx.(*Sent_if_exprContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_if_exprContext).Get_IF().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_if_exprContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_if_exprContext).Get_IF().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(852)

			var _m = p.Match(InterpreteIF)

			localctx.(*Sent_if_exprContext)._IF = _m
		}
		{
			p.SetState(853)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).ini = _x
		}
		{
			p.SetState(854)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(855)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).exp1 = _x
		}
		{
			p.SetState(856)
			p.Match(InterpreteLLAVEC)
		}
		{
			p.SetState(857)
			p.Match(InterpreteELSE)
		}
		{
			p.SetState(858)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(859)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).exp2 = _x
		}
		{
			p.SetState(860)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_if_exprContext).p = sentenciasexpr.NewIf_expr(localctx.(*Sent_if_exprContext).GetIni().GetP(), localctx.(*Sent_if_exprContext).GetExp1().GetP(), localctx.(*Sent_if_exprContext).GetExp2().GetP(), (func() int {
			if localctx.(*Sent_if_exprContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_if_exprContext).Get_IF().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_if_exprContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_if_exprContext).Get_IF().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(863)

			var _m = p.Match(InterpreteIF)

			localctx.(*Sent_if_exprContext)._IF = _m
		}
		{
			p.SetState(864)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).ini = _x
		}
		{
			p.SetState(865)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(866)

			var _x = p.expression(0)

			localctx.(*Sent_if_exprContext).exp1 = _x
		}
		{
			p.SetState(867)
			p.Match(InterpreteLLAVEC)
		}
		{
			p.SetState(868)
			p.Match(InterpreteELSE)
		}
		{
			p.SetState(869)

			var _x = p.Sent_if_expr()

			localctx.(*Sent_if_exprContext).sent = _x
		}
		localctx.(*Sent_if_exprContext).p = sentenciasexpr.NewIf_expr(localctx.(*Sent_if_exprContext).GetIni().GetP(), localctx.(*Sent_if_exprContext).GetExp1().GetP(), localctx.(*Sent_if_exprContext).GetSent().GetP(), (func() int {
			if localctx.(*Sent_if_exprContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_if_exprContext).Get_IF().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_if_exprContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_if_exprContext).Get_IF().GetColumn()
			}
		}()))

	}

	return localctx
}

// ISent_loop_exprContext is an interface to support dynamic dispatch.
type ISent_loop_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsSent_loop_exprContext differentiates from other interfaces.
	IsSent_loop_exprContext()
}

type Sent_loop_exprContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	p              interfaces.Expresion
	_LOOP          antlr.Token
	_instrucciones IInstruccionesContext
}

func NewEmptySent_loop_exprContext() *Sent_loop_exprContext {
	var p = new(Sent_loop_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_loop_expr
	return p
}

func (*Sent_loop_exprContext) IsSent_loop_exprContext() {}

func NewSent_loop_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_loop_exprContext {
	var p = new(Sent_loop_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_loop_expr

	return p
}

func (s *Sent_loop_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_loop_exprContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Sent_loop_exprContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Sent_loop_exprContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Sent_loop_exprContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Sent_loop_exprContext) GetP() interfaces.Expresion { return s.p }

func (s *Sent_loop_exprContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Sent_loop_exprContext) LOOP() antlr.TerminalNode {
	return s.GetToken(InterpreteLOOP, 0)
}

func (s *Sent_loop_exprContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_loop_exprContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Sent_loop_exprContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_loop_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_loop_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_loop_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_loop_expr(s)
	}
}

func (s *Sent_loop_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_loop_expr(s)
	}
}

func (p *Interprete) Sent_loop_expr() (localctx ISent_loop_exprContext) {
	localctx = NewSent_loop_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, InterpreteRULE_sent_loop_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)

		var _m = p.Match(InterpreteLOOP)

		localctx.(*Sent_loop_exprContext)._LOOP = _m
	}
	{
		p.SetState(875)
		p.Match(InterpreteLLAVEA)
	}
	{
		p.SetState(876)

		var _x = p.Instrucciones()

		localctx.(*Sent_loop_exprContext)._instrucciones = _x
	}
	{
		p.SetState(877)
		p.Match(InterpreteLLAVEC)
	}
	localctx.(*Sent_loop_exprContext).p = sentenciasexpr.NewLoop_expr(localctx.(*Sent_loop_exprContext).Get_instrucciones().GetL(), (func() int {
		if localctx.(*Sent_loop_exprContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Sent_loop_exprContext).Get_LOOP().GetLine()
		}
	}()), (func() int {
		if localctx.(*Sent_loop_exprContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Sent_loop_exprContext).Get_LOOP().GetColumn()
		}
	}()))

	return localctx
}

// IPrintasoContext is an interface to support dynamic dispatch.
type IPrintasoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetLi returns the li rule contexts.
	GetLi() IList_expre_printContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetLi sets the li rule contexts.
	SetLi(IList_expre_printContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsPrintasoContext differentiates from other interfaces.
	IsPrintasoContext()
}

type PrintasoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruction
	_PRINT      antlr.Token
	_expression IExpressionContext
	li          IList_expre_printContext
}

func NewEmptyPrintasoContext() *PrintasoContext {
	var p = new(PrintasoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_printaso
	return p
}

func (*PrintasoContext) IsPrintasoContext() {}

func NewPrintasoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintasoContext {
	var p = new(PrintasoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_printaso

	return p
}

func (s *PrintasoContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintasoContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintasoContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintasoContext) Get_expression() IExpressionContext { return s._expression }

func (s *PrintasoContext) GetLi() IList_expre_printContext { return s.li }

func (s *PrintasoContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *PrintasoContext) SetLi(v IList_expre_printContext) { s.li = v }

func (s *PrintasoContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *PrintasoContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *PrintasoContext) PRINT() antlr.TerminalNode {
	return s.GetToken(InterpretePRINT, 0)
}

func (s *PrintasoContext) EXCLA() antlr.TerminalNode {
	return s.GetToken(InterpreteEXCLA, 0)
}

func (s *PrintasoContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *PrintasoContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrintasoContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *PrintasoContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *PrintasoContext) List_expre_print() IList_expre_printContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expre_printContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expre_printContext)
}

func (s *PrintasoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintasoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrintasoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterPrintaso(s)
	}
}

func (s *PrintasoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitPrintaso(s)
	}
}

func (p *Interprete) Printaso() (localctx IPrintasoContext) {
	localctx = NewPrintasoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, InterpreteRULE_printaso)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(880)

			var _m = p.Match(InterpretePRINT)

			localctx.(*PrintasoContext)._PRINT = _m
		}
		{
			p.SetState(881)
			p.Match(InterpreteEXCLA)
		}
		{
			p.SetState(882)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(883)

			var _x = p.expression(0)

			localctx.(*PrintasoContext)._expression = _x
		}
		{
			p.SetState(884)
			p.Match(InterpretePARC)
		}

		a := arrayList.New()
		localctx.(*PrintasoContext).instr = instruction.NewImprimir(localctx.(*PrintasoContext).Get_expression().GetP(), a, (func() int {
			if localctx.(*PrintasoContext).Get_PRINT() == nil {
				return 0
			} else {
				return localctx.(*PrintasoContext).Get_PRINT().GetLine()
			}
		}()), (func() int {
			if localctx.(*PrintasoContext).Get_PRINT() == nil {
				return 0
			} else {
				return localctx.(*PrintasoContext).Get_PRINT().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(887)

			var _m = p.Match(InterpretePRINT)

			localctx.(*PrintasoContext)._PRINT = _m
		}
		{
			p.SetState(888)
			p.Match(InterpreteEXCLA)
		}
		{
			p.SetState(889)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(890)

			var _x = p.expression(0)

			localctx.(*PrintasoContext)._expression = _x
		}
		{
			p.SetState(891)
			p.Match(InterpreteCOMA)
		}
		{
			p.SetState(892)

			var _x = p.list_expre_print(0)

			localctx.(*PrintasoContext).li = _x
		}
		{
			p.SetState(893)
			p.Match(InterpretePARC)
		}
		localctx.(*PrintasoContext).instr = instruction.NewImprimir(localctx.(*PrintasoContext).Get_expression().GetP(), localctx.(*PrintasoContext).GetLi().GetL(), (func() int {
			if localctx.(*PrintasoContext).Get_PRINT() == nil {
				return 0
			} else {
				return localctx.(*PrintasoContext).Get_PRINT().GetLine()
			}
		}()), (func() int {
			if localctx.(*PrintasoContext).Get_PRINT() == nil {
				return 0
			} else {
				return localctx.(*PrintasoContext).Get_PRINT().GetColumn()
			}
		}()))

	}

	return localctx
}

// IList_expre_printContext is an interface to support dynamic dispatch.
type IList_expre_printContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IList_expre_printContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetLi sets the li rule contexts.
	SetLi(IList_expre_printContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsList_expre_printContext differentiates from other interfaces.
	IsList_expre_printContext()
}

type List_expre_printContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l           *arrayList.List
	li          IList_expre_printContext
	_expression IExpressionContext
}

func NewEmptyList_expre_printContext() *List_expre_printContext {
	var p = new(List_expre_printContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_list_expre_print
	return p
}

func (*List_expre_printContext) IsList_expre_printContext() {}

func NewList_expre_printContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_expre_printContext {
	var p = new(List_expre_printContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_list_expre_print

	return p
}

func (s *List_expre_printContext) GetParser() antlr.Parser { return s.parser }

func (s *List_expre_printContext) GetLi() IList_expre_printContext { return s.li }

func (s *List_expre_printContext) Get_expression() IExpressionContext { return s._expression }

func (s *List_expre_printContext) SetLi(v IList_expre_printContext) { s.li = v }

func (s *List_expre_printContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *List_expre_printContext) GetL() *arrayList.List { return s.l }

func (s *List_expre_printContext) SetL(v *arrayList.List) { s.l = v }

func (s *List_expre_printContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_expre_printContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *List_expre_printContext) List_expre_print() IList_expre_printContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expre_printContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expre_printContext)
}

func (s *List_expre_printContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_expre_printContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_expre_printContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterList_expre_print(s)
	}
}

func (s *List_expre_printContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitList_expre_print(s)
	}
}

func (p *Interprete) List_expre_print() (localctx IList_expre_printContext) {
	return p.list_expre_print(0)
}

func (p *Interprete) list_expre_print(_p int) (localctx IList_expre_printContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewList_expre_printContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IList_expre_printContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 64
	p.EnterRecursionRule(localctx, 64, InterpreteRULE_list_expre_print, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(899)

		var _x = p.expression(0)

		localctx.(*List_expre_printContext)._expression = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*List_expre_printContext).Get_expression().GetP())
	localctx.(*List_expre_printContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewList_expre_printContext(p, _parentctx, _parentState)
			localctx.(*List_expre_printContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_list_expre_print)
			p.SetState(902)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(903)
				p.Match(InterpreteCOMA)
			}
			{
				p.SetState(904)

				var _x = p.expression(0)

				localctx.(*List_expre_printContext)._expression = _x
			}

			localctx.(*List_expre_printContext).GetLi().GetL().Add(localctx.(*List_expre_printContext).Get_expression().GetP())
			localctx.(*List_expre_printContext).l = localctx.(*List_expre_printContext).GetLi().GetL()

		}
		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())
	}

	return localctx
}

// IList_expre_vec_arrContext is an interface to support dynamic dispatch.
type IList_expre_vec_arrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IList_expre_vec_arrContext

	// Get_expression_vec_Arr returns the _expression_vec_Arr rule contexts.
	Get_expression_vec_Arr() IExpression_vec_ArrContext

	// SetLi sets the li rule contexts.
	SetLi(IList_expre_vec_arrContext)

	// Set_expression_vec_Arr sets the _expression_vec_Arr rule contexts.
	Set_expression_vec_Arr(IExpression_vec_ArrContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsList_expre_vec_arrContext differentiates from other interfaces.
	IsList_expre_vec_arrContext()
}

type List_expre_vec_arrContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	l                   *arrayList.List
	li                  IList_expre_vec_arrContext
	_expression_vec_Arr IExpression_vec_ArrContext
}

func NewEmptyList_expre_vec_arrContext() *List_expre_vec_arrContext {
	var p = new(List_expre_vec_arrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_list_expre_vec_arr
	return p
}

func (*List_expre_vec_arrContext) IsList_expre_vec_arrContext() {}

func NewList_expre_vec_arrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_expre_vec_arrContext {
	var p = new(List_expre_vec_arrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_list_expre_vec_arr

	return p
}

func (s *List_expre_vec_arrContext) GetParser() antlr.Parser { return s.parser }

func (s *List_expre_vec_arrContext) GetLi() IList_expre_vec_arrContext { return s.li }

func (s *List_expre_vec_arrContext) Get_expression_vec_Arr() IExpression_vec_ArrContext {
	return s._expression_vec_Arr
}

func (s *List_expre_vec_arrContext) SetLi(v IList_expre_vec_arrContext) { s.li = v }

func (s *List_expre_vec_arrContext) Set_expression_vec_Arr(v IExpression_vec_ArrContext) {
	s._expression_vec_Arr = v
}

func (s *List_expre_vec_arrContext) GetL() *arrayList.List { return s.l }

func (s *List_expre_vec_arrContext) SetL(v *arrayList.List) { s.l = v }

func (s *List_expre_vec_arrContext) Expression_vec_Arr() IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *List_expre_vec_arrContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *List_expre_vec_arrContext) List_expre_vec_arr() IList_expre_vec_arrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expre_vec_arrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expre_vec_arrContext)
}

func (s *List_expre_vec_arrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_expre_vec_arrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_expre_vec_arrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterList_expre_vec_arr(s)
	}
}

func (s *List_expre_vec_arrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitList_expre_vec_arr(s)
	}
}

func (p *Interprete) List_expre_vec_arr() (localctx IList_expre_vec_arrContext) {
	return p.list_expre_vec_arr(0)
}

func (p *Interprete) list_expre_vec_arr(_p int) (localctx IList_expre_vec_arrContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewList_expre_vec_arrContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IList_expre_vec_arrContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 66
	p.EnterRecursionRule(localctx, 66, InterpreteRULE_list_expre_vec_arr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(913)

		var _x = p.expression_vec_Arr(0)

		localctx.(*List_expre_vec_arrContext)._expression_vec_Arr = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*List_expre_vec_arrContext).Get_expression_vec_Arr().GetP())
	localctx.(*List_expre_vec_arrContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(923)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewList_expre_vec_arrContext(p, _parentctx, _parentState)
			localctx.(*List_expre_vec_arrContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_list_expre_vec_arr)
			p.SetState(916)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(917)
				p.Match(InterpreteCOMA)
			}
			{
				p.SetState(918)

				var _x = p.expression_vec_Arr(0)

				localctx.(*List_expre_vec_arrContext)._expression_vec_Arr = _x
			}

			localctx.(*List_expre_vec_arrContext).GetLi().GetL().Add(localctx.(*List_expre_vec_arrContext).Get_expression_vec_Arr().GetP())
			localctx.(*List_expre_vec_arrContext).l = localctx.(*List_expre_vec_arrContext).GetLi().GetL()

		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())
	}

	return localctx
}

// ISent_ifContext is an interface to support dynamic dispatch.
type ISent_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// GetIns1 returns the ins1 rule contexts.
	GetIns1() IInstruccionesContext

	// GetIns2 returns the ins2 rule contexts.
	GetIns2() IInstruccionesContext

	// GetSent returns the sent rule contexts.
	GetSent() ISent_ifContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// SetIns1 sets the ins1 rule contexts.
	SetIns1(IInstruccionesContext)

	// SetIns2 sets the ins2 rule contexts.
	SetIns2(IInstruccionesContext)

	// SetSent sets the sent rule contexts.
	SetSent(ISent_ifContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_ifContext differentiates from other interfaces.
	IsSent_ifContext()
}

type Sent_ifContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_IF            antlr.Token
	_expression    IExpressionContext
	_instrucciones IInstruccionesContext
	ins1           IInstruccionesContext
	ins2           IInstruccionesContext
	sent           ISent_ifContext
}

func NewEmptySent_ifContext() *Sent_ifContext {
	var p = new(Sent_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_if
	return p
}

func (*Sent_ifContext) IsSent_ifContext() {}

func NewSent_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_ifContext {
	var p = new(Sent_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_if

	return p
}

func (s *Sent_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_ifContext) Get_IF() antlr.Token { return s._IF }

func (s *Sent_ifContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Sent_ifContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_ifContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Sent_ifContext) GetIns1() IInstruccionesContext { return s.ins1 }

func (s *Sent_ifContext) GetIns2() IInstruccionesContext { return s.ins2 }

func (s *Sent_ifContext) GetSent() ISent_ifContext { return s.sent }

func (s *Sent_ifContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_ifContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Sent_ifContext) SetIns1(v IInstruccionesContext) { s.ins1 = v }

func (s *Sent_ifContext) SetIns2(v IInstruccionesContext) { s.ins2 = v }

func (s *Sent_ifContext) SetSent(v ISent_ifContext) { s.sent = v }

func (s *Sent_ifContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_ifContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(InterpreteIF, 0)
}

func (s *Sent_ifContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_ifContext) AllLLAVEA() []antlr.TerminalNode {
	return s.GetTokens(InterpreteLLAVEA)
}

func (s *Sent_ifContext) LLAVEA(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, i)
}

func (s *Sent_ifContext) AllInstrucciones() []IInstruccionesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem())
	var tst = make([]IInstruccionesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionesContext)
		}
	}

	return tst
}

func (s *Sent_ifContext) Instrucciones(i int) IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Sent_ifContext) AllLLAVEC() []antlr.TerminalNode {
	return s.GetTokens(InterpreteLLAVEC)
}

func (s *Sent_ifContext) LLAVEC(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, i)
}

func (s *Sent_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(InterpreteELSE, 0)
}

func (s *Sent_ifContext) Sent_if() ISent_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ifContext)
}

func (s *Sent_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_ifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_if(s)
	}
}

func (s *Sent_ifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_if(s)
	}
}

func (p *Interprete) Sent_if() (localctx ISent_ifContext) {
	localctx = NewSent_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, InterpreteRULE_sent_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(926)

			var _m = p.Match(InterpreteIF)

			localctx.(*Sent_ifContext)._IF = _m
		}
		{
			p.SetState(927)

			var _x = p.expression(0)

			localctx.(*Sent_ifContext)._expression = _x
		}
		{
			p.SetState(928)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(929)

			var _x = p.Instrucciones()

			localctx.(*Sent_ifContext)._instrucciones = _x
		}
		{
			p.SetState(930)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_ifContext).instr = sentenciacontrol.NewIf(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).Get_instrucciones().GetL(), arrayList.New(), (func() int {
			if localctx.(*Sent_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_ifContext).Get_IF().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_ifContext).Get_IF().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(933)

			var _m = p.Match(InterpreteIF)

			localctx.(*Sent_ifContext)._IF = _m
		}
		{
			p.SetState(934)

			var _x = p.expression(0)

			localctx.(*Sent_ifContext)._expression = _x
		}
		{
			p.SetState(935)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(936)

			var _x = p.Instrucciones()

			localctx.(*Sent_ifContext).ins1 = _x
		}
		{
			p.SetState(937)
			p.Match(InterpreteLLAVEC)
		}
		{
			p.SetState(938)
			p.Match(InterpreteELSE)
		}
		{
			p.SetState(939)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(940)

			var _x = p.Instrucciones()

			localctx.(*Sent_ifContext).ins2 = _x
		}
		{
			p.SetState(941)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_ifContext).instr = sentenciacontrol.NewIf(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).GetIns1().GetL(), localctx.(*Sent_ifContext).GetIns2().GetL(), (func() int {
			if localctx.(*Sent_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_ifContext).Get_IF().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_ifContext).Get_IF().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(944)

			var _m = p.Match(InterpreteIF)

			localctx.(*Sent_ifContext)._IF = _m
		}
		{
			p.SetState(945)

			var _x = p.expression(0)

			localctx.(*Sent_ifContext)._expression = _x
		}
		{
			p.SetState(946)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(947)

			var _x = p.Instrucciones()

			localctx.(*Sent_ifContext).ins1 = _x
		}
		{
			p.SetState(948)
			p.Match(InterpreteLLAVEC)
		}
		{
			p.SetState(949)
			p.Match(InterpreteELSE)
		}
		{
			p.SetState(950)

			var _x = p.Sent_if()

			localctx.(*Sent_ifContext).sent = _x
		}

		a := arrayList.New()
		a.Add(localctx.(*Sent_ifContext).GetSent().GetInstr())
		localctx.(*Sent_ifContext).instr = sentenciacontrol.NewIf(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).GetIns1().GetL(), a, (func() int {
			if localctx.(*Sent_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_ifContext).Get_IF().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Sent_ifContext).Get_IF().GetColumn()
			}
		}()))

	}

	return localctx
}

// ISent_matchContext is an interface to support dynamic dispatch.
type ISent_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_match_listbrazos returns the _match_listbrazos rule contexts.
	Get_match_listbrazos() IMatch_listbrazosContext

	// Get_el_default returns the _el_default rule contexts.
	Get_el_default() IEl_defaultContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_match_listbrazos sets the _match_listbrazos rule contexts.
	Set_match_listbrazos(IMatch_listbrazosContext)

	// Set_el_default sets the _el_default rule contexts.
	Set_el_default(IEl_defaultContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_matchContext differentiates from other interfaces.
	IsSent_matchContext()
}

type Sent_matchContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruction
	_MATCH            antlr.Token
	_expression       IExpressionContext
	_match_listbrazos IMatch_listbrazosContext
	_el_default       IEl_defaultContext
}

func NewEmptySent_matchContext() *Sent_matchContext {
	var p = new(Sent_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_match
	return p
}

func (*Sent_matchContext) IsSent_matchContext() {}

func NewSent_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_matchContext {
	var p = new(Sent_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_match

	return p
}

func (s *Sent_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_matchContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Sent_matchContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Sent_matchContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_matchContext) Get_match_listbrazos() IMatch_listbrazosContext {
	return s._match_listbrazos
}

func (s *Sent_matchContext) Get_el_default() IEl_defaultContext { return s._el_default }

func (s *Sent_matchContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_matchContext) Set_match_listbrazos(v IMatch_listbrazosContext) { s._match_listbrazos = v }

func (s *Sent_matchContext) Set_el_default(v IEl_defaultContext) { s._el_default = v }

func (s *Sent_matchContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_matchContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_matchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(InterpreteMATCH, 0)
}

func (s *Sent_matchContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_matchContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_matchContext) Match_listbrazos() IMatch_listbrazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_listbrazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_listbrazosContext)
}

func (s *Sent_matchContext) El_default() IEl_defaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEl_defaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEl_defaultContext)
}

func (s *Sent_matchContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_match(s)
	}
}

func (s *Sent_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_match(s)
	}
}

func (p *Interprete) Sent_match() (localctx ISent_matchContext) {
	localctx = NewSent_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, InterpreteRULE_sent_match)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(970)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(955)

			var _m = p.Match(InterpreteMATCH)

			localctx.(*Sent_matchContext)._MATCH = _m
		}
		{
			p.SetState(956)

			var _x = p.expression(0)

			localctx.(*Sent_matchContext)._expression = _x
		}
		{
			p.SetState(957)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(958)

			var _x = p.match_listbrazos(0)

			localctx.(*Sent_matchContext)._match_listbrazos = _x
		}
		{
			p.SetState(959)

			var _x = p.El_default()

			localctx.(*Sent_matchContext)._el_default = _x
		}
		{
			p.SetState(960)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_matchContext).instr = match.NewMatch(localctx.(*Sent_matchContext).Get_expression().GetP(), localctx.(*Sent_matchContext).Get_match_listbrazos().GetL(), localctx.(*Sent_matchContext).Get_el_default().GetInstr(), (func() int {
			if localctx.(*Sent_matchContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchContext).Get_MATCH().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_matchContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchContext).Get_MATCH().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(963)

			var _m = p.Match(InterpreteMATCH)

			localctx.(*Sent_matchContext)._MATCH = _m
		}
		{
			p.SetState(964)

			var _x = p.expression(0)

			localctx.(*Sent_matchContext)._expression = _x
		}
		{
			p.SetState(965)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(966)

			var _x = p.El_default()

			localctx.(*Sent_matchContext)._el_default = _x
		}
		{
			p.SetState(967)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*Sent_matchContext).instr = match.NewMatch(localctx.(*Sent_matchContext).Get_expression().GetP(), arrayList.New(), localctx.(*Sent_matchContext).Get_el_default().GetInstr(), (func() int {
			if localctx.(*Sent_matchContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchContext).Get_MATCH().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_matchContext).Get_MATCH() == nil {
				return 0
			} else {
				return localctx.(*Sent_matchContext).Get_MATCH().GetColumn()
			}
		}()))

	}

	return localctx
}

// IMatch_listbrazosContext is an interface to support dynamic dispatch.
type IMatch_listbrazosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBraz returns the braz rule contexts.
	GetBraz() IMatch_listbrazosContext

	// Get_list_brazos returns the _list_brazos rule contexts.
	Get_list_brazos() IList_brazosContext

	// SetBraz sets the braz rule contexts.
	SetBraz(IMatch_listbrazosContext)

	// Set_list_brazos sets the _list_brazos rule contexts.
	Set_list_brazos(IList_brazosContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsMatch_listbrazosContext differentiates from other interfaces.
	IsMatch_listbrazosContext()
}

type Match_listbrazosContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	l            *arrayList.List
	braz         IMatch_listbrazosContext
	_list_brazos IList_brazosContext
}

func NewEmptyMatch_listbrazosContext() *Match_listbrazosContext {
	var p = new(Match_listbrazosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_match_listbrazos
	return p
}

func (*Match_listbrazosContext) IsMatch_listbrazosContext() {}

func NewMatch_listbrazosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_listbrazosContext {
	var p = new(Match_listbrazosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_match_listbrazos

	return p
}

func (s *Match_listbrazosContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_listbrazosContext) GetBraz() IMatch_listbrazosContext { return s.braz }

func (s *Match_listbrazosContext) Get_list_brazos() IList_brazosContext { return s._list_brazos }

func (s *Match_listbrazosContext) SetBraz(v IMatch_listbrazosContext) { s.braz = v }

func (s *Match_listbrazosContext) Set_list_brazos(v IList_brazosContext) { s._list_brazos = v }

func (s *Match_listbrazosContext) GetL() *arrayList.List { return s.l }

func (s *Match_listbrazosContext) SetL(v *arrayList.List) { s.l = v }

func (s *Match_listbrazosContext) List_brazos() IList_brazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_brazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_brazosContext)
}

func (s *Match_listbrazosContext) Match_listbrazos() IMatch_listbrazosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_listbrazosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_listbrazosContext)
}

func (s *Match_listbrazosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_listbrazosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_listbrazosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterMatch_listbrazos(s)
	}
}

func (s *Match_listbrazosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitMatch_listbrazos(s)
	}
}

func (p *Interprete) Match_listbrazos() (localctx IMatch_listbrazosContext) {
	return p.match_listbrazos(0)
}

func (p *Interprete) match_listbrazos(_p int) (localctx IMatch_listbrazosContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMatch_listbrazosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMatch_listbrazosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 72
	p.EnterRecursionRule(localctx, 72, InterpreteRULE_match_listbrazos, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(973)

		var _x = p.List_brazos()

		localctx.(*Match_listbrazosContext)._list_brazos = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Match_listbrazosContext).Get_list_brazos().GetInstr())
	localctx.(*Match_listbrazosContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(982)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMatch_listbrazosContext(p, _parentctx, _parentState)
			localctx.(*Match_listbrazosContext).braz = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_match_listbrazos)
			p.SetState(976)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(977)

				var _x = p.List_brazos()

				localctx.(*Match_listbrazosContext)._list_brazos = _x
			}

			localctx.(*Match_listbrazosContext).GetBraz().GetL().Add(localctx.(*Match_listbrazosContext).Get_list_brazos().GetInstr())
			localctx.(*Match_listbrazosContext).l = localctx.(*Match_listbrazosContext).GetBraz().GetL()

		}
		p.SetState(984)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
	}

	return localctx
}

// IList_brazosContext is an interface to support dynamic dispatch.
type IList_brazosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IGUAL returns the _IGUAL token.
	Get_IGUAL() antlr.Token

	// Set_IGUAL sets the _IGUAL token.
	Set_IGUAL(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// GetExprs returns the exprs rule contexts.
	GetExprs() IMatch_listbrazos_listexprContext

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// SetExprs sets the exprs rule contexts.
	SetExprs(IMatch_listbrazos_listexprContext)

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsList_brazosContext differentiates from other interfaces.
	IsList_brazosContext()
}

type List_brazosContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_expression    IExpressionContext
	_IGUAL         antlr.Token
	_instrucciones IInstruccionesContext
	exprs          IMatch_listbrazos_listexprContext
	_instruccion   IInstruccionContext
}

func NewEmptyList_brazosContext() *List_brazosContext {
	var p = new(List_brazosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_list_brazos
	return p
}

func (*List_brazosContext) IsList_brazosContext() {}

func NewList_brazosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_brazosContext {
	var p = new(List_brazosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_list_brazos

	return p
}

func (s *List_brazosContext) GetParser() antlr.Parser { return s.parser }

func (s *List_brazosContext) Get_IGUAL() antlr.Token { return s._IGUAL }

func (s *List_brazosContext) Set_IGUAL(v antlr.Token) { s._IGUAL = v }

func (s *List_brazosContext) Get_expression() IExpressionContext { return s._expression }

func (s *List_brazosContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *List_brazosContext) GetExprs() IMatch_listbrazos_listexprContext { return s.exprs }

func (s *List_brazosContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *List_brazosContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *List_brazosContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *List_brazosContext) SetExprs(v IMatch_listbrazos_listexprContext) { s.exprs = v }

func (s *List_brazosContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *List_brazosContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *List_brazosContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *List_brazosContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_brazosContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *List_brazosContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *List_brazosContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *List_brazosContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *List_brazosContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *List_brazosContext) Match_listbrazos_listexpr() IMatch_listbrazos_listexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_listbrazos_listexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_listbrazos_listexprContext)
}

func (s *List_brazosContext) Instruccion() IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *List_brazosContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *List_brazosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_brazosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_brazosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterList_brazos(s)
	}
}

func (s *List_brazosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitList_brazos(s)
	}
}

func (p *Interprete) List_brazos() (localctx IList_brazosContext) {
	localctx = NewList_brazosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, InterpreteRULE_list_brazos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1015)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(985)

			var _x = p.expression(0)

			localctx.(*List_brazosContext)._expression = _x
		}
		{
			p.SetState(986)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*List_brazosContext)._IGUAL = _m
		}
		{
			p.SetState(987)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(988)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(989)

			var _x = p.Instrucciones()

			localctx.(*List_brazosContext)._instrucciones = _x
		}
		{
			p.SetState(990)
			p.Match(InterpreteLLAVEC)
		}

		a := arrayList.New()
		a.Add(localctx.(*List_brazosContext).Get_expression().GetP())
		localctx.(*List_brazosContext).instr = match.NewBrazo(a, localctx.(*List_brazosContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(993)

			var _x = p.match_listbrazos_listexpr(0)

			localctx.(*List_brazosContext).exprs = _x
		}
		{
			p.SetState(994)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*List_brazosContext)._IGUAL = _m
		}
		{
			p.SetState(995)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(996)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(997)

			var _x = p.Instrucciones()

			localctx.(*List_brazosContext)._instrucciones = _x
		}
		{
			p.SetState(998)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*List_brazosContext).instr = match.NewBrazo(localctx.(*List_brazosContext).GetExprs().GetL(), localctx.(*List_brazosContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1001)

			var _x = p.expression(0)

			localctx.(*List_brazosContext)._expression = _x
		}
		{
			p.SetState(1002)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*List_brazosContext)._IGUAL = _m
		}
		{
			p.SetState(1003)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(1004)

			var _x = p.Instruccion()

			localctx.(*List_brazosContext)._instruccion = _x
		}
		{
			p.SetState(1005)
			p.Match(InterpreteCOMA)
		}

		a := arrayList.New()
		a.Add(localctx.(*List_brazosContext).Get_expression().GetP())
		b := arrayList.New()
		b.Add(localctx.(*List_brazosContext).Get_instruccion().GetInstr())
		localctx.(*List_brazosContext).instr = match.NewBrazo(a, b, (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetColumn()
			}
		}()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1008)

			var _x = p.match_listbrazos_listexpr(0)

			localctx.(*List_brazosContext).exprs = _x
		}
		{
			p.SetState(1009)

			var _m = p.Match(InterpreteIGUAL)

			localctx.(*List_brazosContext)._IGUAL = _m
		}
		{
			p.SetState(1010)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(1011)

			var _x = p.Instruccion()

			localctx.(*List_brazosContext)._instruccion = _x
		}
		{
			p.SetState(1012)
			p.Match(InterpreteCOMA)
		}

		b := arrayList.New()
		b.Add(localctx.(*List_brazosContext).Get_instruccion().GetInstr())
		localctx.(*List_brazosContext).instr = match.NewBrazo(localctx.(*List_brazosContext).GetExprs().GetL(), b, (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetLine()
			}
		}()), (func() int {
			if localctx.(*List_brazosContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*List_brazosContext).Get_IGUAL().GetColumn()
			}
		}()))

	}

	return localctx
}

// IMatch_listbrazos_listexprContext is an interface to support dynamic dispatch.
type IMatch_listbrazos_listexprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetH returns the h rule contexts.
	GetH() IMatch_listbrazos_listexprContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetH sets the h rule contexts.
	SetH(IMatch_listbrazos_listexprContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsMatch_listbrazos_listexprContext differentiates from other interfaces.
	IsMatch_listbrazos_listexprContext()
}

type Match_listbrazos_listexprContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	l           *arrayList.List
	h           IMatch_listbrazos_listexprContext
	_expression IExpressionContext
}

func NewEmptyMatch_listbrazos_listexprContext() *Match_listbrazos_listexprContext {
	var p = new(Match_listbrazos_listexprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_match_listbrazos_listexpr
	return p
}

func (*Match_listbrazos_listexprContext) IsMatch_listbrazos_listexprContext() {}

func NewMatch_listbrazos_listexprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_listbrazos_listexprContext {
	var p = new(Match_listbrazos_listexprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_match_listbrazos_listexpr

	return p
}

func (s *Match_listbrazos_listexprContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_listbrazos_listexprContext) GetH() IMatch_listbrazos_listexprContext { return s.h }

func (s *Match_listbrazos_listexprContext) Get_expression() IExpressionContext { return s._expression }

func (s *Match_listbrazos_listexprContext) SetH(v IMatch_listbrazos_listexprContext) { s.h = v }

func (s *Match_listbrazos_listexprContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Match_listbrazos_listexprContext) GetL() *arrayList.List { return s.l }

func (s *Match_listbrazos_listexprContext) SetL(v *arrayList.List) { s.l = v }

func (s *Match_listbrazos_listexprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Match_listbrazos_listexprContext) OR_MATCH() antlr.TerminalNode {
	return s.GetToken(InterpreteOR_MATCH, 0)
}

func (s *Match_listbrazos_listexprContext) Match_listbrazos_listexpr() IMatch_listbrazos_listexprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatch_listbrazos_listexprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatch_listbrazos_listexprContext)
}

func (s *Match_listbrazos_listexprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_listbrazos_listexprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_listbrazos_listexprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterMatch_listbrazos_listexpr(s)
	}
}

func (s *Match_listbrazos_listexprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitMatch_listbrazos_listexpr(s)
	}
}

func (p *Interprete) Match_listbrazos_listexpr() (localctx IMatch_listbrazos_listexprContext) {
	return p.match_listbrazos_listexpr(0)
}

func (p *Interprete) match_listbrazos_listexpr(_p int) (localctx IMatch_listbrazos_listexprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMatch_listbrazos_listexprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMatch_listbrazos_listexprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, InterpreteRULE_match_listbrazos_listexpr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1018)

		var _x = p.expression(0)

		localctx.(*Match_listbrazos_listexprContext)._expression = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Match_listbrazos_listexprContext).Get_expression().GetP())
	localctx.(*Match_listbrazos_listexprContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1028)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMatch_listbrazos_listexprContext(p, _parentctx, _parentState)
			localctx.(*Match_listbrazos_listexprContext).h = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_match_listbrazos_listexpr)
			p.SetState(1021)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1022)
				p.Match(InterpreteOR_MATCH)
			}
			{
				p.SetState(1023)

				var _x = p.expression(0)

				localctx.(*Match_listbrazos_listexprContext)._expression = _x
			}

			localctx.(*Match_listbrazos_listexprContext).GetH().GetL().Add(localctx.(*Match_listbrazos_listexprContext).Get_expression().GetP())
			localctx.(*Match_listbrazos_listexprContext).l = localctx.(*Match_listbrazos_listexprContext).GetH().GetL()

		}
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}

	return localctx
}

// IEl_defaultContext is an interface to support dynamic dispatch.
type IEl_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAUL returns the _DEFAUL token.
	Get_DEFAUL() antlr.Token

	// Set_DEFAUL sets the _DEFAUL token.
	Set_DEFAUL(antlr.Token)

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsEl_defaultContext differentiates from other interfaces.
	IsEl_defaultContext()
}

type El_defaultContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_DEFAUL        antlr.Token
	_instrucciones IInstruccionesContext
	_instruccion   IInstruccionContext
}

func NewEmptyEl_defaultContext() *El_defaultContext {
	var p = new(El_defaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_el_default
	return p
}

func (*El_defaultContext) IsEl_defaultContext() {}

func NewEl_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *El_defaultContext {
	var p = new(El_defaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_el_default

	return p
}

func (s *El_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *El_defaultContext) Get_DEFAUL() antlr.Token { return s._DEFAUL }

func (s *El_defaultContext) Set_DEFAUL(v antlr.Token) { s._DEFAUL = v }

func (s *El_defaultContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *El_defaultContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *El_defaultContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *El_defaultContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *El_defaultContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *El_defaultContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *El_defaultContext) DEFAUL() antlr.TerminalNode {
	return s.GetToken(InterpreteDEFAUL, 0)
}

func (s *El_defaultContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUAL, 0)
}

func (s *El_defaultContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *El_defaultContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *El_defaultContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *El_defaultContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *El_defaultContext) Instruccion() IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *El_defaultContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *El_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *El_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *El_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterEl_default(s)
	}
}

func (s *El_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitEl_default(s)
	}
}

func (p *Interprete) El_default() (localctx IEl_defaultContext) {
	localctx = NewEl_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, InterpreteRULE_el_default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1046)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1031)

			var _m = p.Match(InterpreteDEFAUL)

			localctx.(*El_defaultContext)._DEFAUL = _m
		}
		{
			p.SetState(1032)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(1033)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(1034)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(1035)

			var _x = p.Instrucciones()

			localctx.(*El_defaultContext)._instrucciones = _x
		}
		{
			p.SetState(1036)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*El_defaultContext).instr = match.NewDefault(localctx.(*El_defaultContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*El_defaultContext).Get_DEFAUL() == nil {
				return 0
			} else {
				return localctx.(*El_defaultContext).Get_DEFAUL().GetLine()
			}
		}()), (func() int {
			if localctx.(*El_defaultContext).Get_DEFAUL() == nil {
				return 0
			} else {
				return localctx.(*El_defaultContext).Get_DEFAUL().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1039)

			var _m = p.Match(InterpreteDEFAUL)

			localctx.(*El_defaultContext)._DEFAUL = _m
		}
		{
			p.SetState(1040)
			p.Match(InterpreteIGUAL)
		}
		{
			p.SetState(1041)
			p.Match(InterpreteMAYOR)
		}
		{
			p.SetState(1042)

			var _x = p.Instruccion()

			localctx.(*El_defaultContext)._instruccion = _x
		}
		{
			p.SetState(1043)
			p.Match(InterpreteCOMA)
		}

		a := arrayList.New()
		a.Add(localctx.(*El_defaultContext).Get_instruccion().GetInstr())
		localctx.(*El_defaultContext).instr = match.NewDefault(a, (func() int {
			if localctx.(*El_defaultContext).Get_DEFAUL() == nil {
				return 0
			} else {
				return localctx.(*El_defaultContext).Get_DEFAUL().GetLine()
			}
		}()), (func() int {
			if localctx.(*El_defaultContext).Get_DEFAUL() == nil {
				return 0
			} else {
				return localctx.(*El_defaultContext).Get_DEFAUL().GetColumn()
			}
		}()))

	}

	return localctx
}

// ISent_loopContext is an interface to support dynamic dispatch.
type ISent_loopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_loopContext differentiates from other interfaces.
	IsSent_loopContext()
}

type Sent_loopContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_LOOP          antlr.Token
	_instrucciones IInstruccionesContext
}

func NewEmptySent_loopContext() *Sent_loopContext {
	var p = new(Sent_loopContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_loop
	return p
}

func (*Sent_loopContext) IsSent_loopContext() {}

func NewSent_loopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_loopContext {
	var p = new(Sent_loopContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_loop

	return p
}

func (s *Sent_loopContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_loopContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Sent_loopContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Sent_loopContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Sent_loopContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Sent_loopContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_loopContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_loopContext) LOOP() antlr.TerminalNode {
	return s.GetToken(InterpreteLOOP, 0)
}

func (s *Sent_loopContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_loopContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Sent_loopContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_loopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_loopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_loopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_loop(s)
	}
}

func (s *Sent_loopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_loop(s)
	}
}

func (p *Interprete) Sent_loop() (localctx ISent_loopContext) {
	localctx = NewSent_loopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, InterpreteRULE_sent_loop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1048)

		var _m = p.Match(InterpreteLOOP)

		localctx.(*Sent_loopContext)._LOOP = _m
	}
	{
		p.SetState(1049)
		p.Match(InterpreteLLAVEA)
	}
	{
		p.SetState(1050)

		var _x = p.Instrucciones()

		localctx.(*Sent_loopContext)._instrucciones = _x
	}
	{
		p.SetState(1051)
		p.Match(InterpreteLLAVEC)
	}
	localctx.(*Sent_loopContext).instr = sentenciaciclica.NewLoop(localctx.(*Sent_loopContext).Get_instrucciones().GetL(), (func() int {
		if localctx.(*Sent_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Sent_loopContext).Get_LOOP().GetLine()
		}
	}()), (func() int {
		if localctx.(*Sent_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Sent_loopContext).Get_LOOP().GetColumn()
		}
	}()))

	return localctx
}

// ISent_whileContext is an interface to support dynamic dispatch.
type ISent_whileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_WHILE returns the _WHILE token.
	Get_WHILE() antlr.Token

	// Set_WHILE sets the _WHILE token.
	Set_WHILE(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_whileContext differentiates from other interfaces.
	IsSent_whileContext()
}

type Sent_whileContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_WHILE         antlr.Token
	_expression    IExpressionContext
	_instrucciones IInstruccionesContext
}

func NewEmptySent_whileContext() *Sent_whileContext {
	var p = new(Sent_whileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_while
	return p
}

func (*Sent_whileContext) IsSent_whileContext() {}

func NewSent_whileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_whileContext {
	var p = new(Sent_whileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_while

	return p
}

func (s *Sent_whileContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_whileContext) Get_WHILE() antlr.Token { return s._WHILE }

func (s *Sent_whileContext) Set_WHILE(v antlr.Token) { s._WHILE = v }

func (s *Sent_whileContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_whileContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Sent_whileContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_whileContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Sent_whileContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_whileContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_whileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(InterpreteWHILE, 0)
}

func (s *Sent_whileContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_whileContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_whileContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Sent_whileContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_whileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_whileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_whileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_while(s)
	}
}

func (s *Sent_whileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_while(s)
	}
}

func (p *Interprete) Sent_while() (localctx ISent_whileContext) {
	localctx = NewSent_whileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, InterpreteRULE_sent_while)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1054)

		var _m = p.Match(InterpreteWHILE)

		localctx.(*Sent_whileContext)._WHILE = _m
	}
	{
		p.SetState(1055)

		var _x = p.expression(0)

		localctx.(*Sent_whileContext)._expression = _x
	}
	{
		p.SetState(1056)
		p.Match(InterpreteLLAVEA)
	}
	{
		p.SetState(1057)

		var _x = p.Instrucciones()

		localctx.(*Sent_whileContext)._instrucciones = _x
	}
	{
		p.SetState(1058)
		p.Match(InterpreteLLAVEC)
	}
	localctx.(*Sent_whileContext).instr = sentenciaciclica.NewWhile(localctx.(*Sent_whileContext).Get_expression().GetP(), localctx.(*Sent_whileContext).Get_instrucciones().GetL(), (func() int {
		if localctx.(*Sent_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Sent_whileContext).Get_WHILE().GetLine()
		}
	}()), (func() int {
		if localctx.(*Sent_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Sent_whileContext).Get_WHILE().GetColumn()
		}
	}()))

	return localctx
}

// ISent_ForInContext is an interface to support dynamic dispatch.
type ISent_ForInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_IN returns the _IN token.
	Get_IN() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_IN sets the _IN token.
	Set_IN(antlr.Token)

	// GetExp1 returns the exp1 rule contexts.
	GetExp1() IExpressionContext

	// GetExp2 returns the exp2 rule contexts.
	GetExp2() IExpressionContext

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpression_vec_ArrContext

	// SetExp1 sets the exp1 rule contexts.
	SetExp1(IExpressionContext)

	// SetExp2 sets the exp2 rule contexts.
	SetExp2(IExpressionContext)

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpression_vec_ArrContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruction

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruction)

	// IsSent_ForInContext differentiates from other interfaces.
	IsSent_ForInContext()
}

type Sent_ForInContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	instr          interfaces.Instruction
	_ID            antlr.Token
	_IN            antlr.Token
	exp1           IExpressionContext
	exp2           IExpressionContext
	_instrucciones IInstruccionesContext
	exp            IExpression_vec_ArrContext
}

func NewEmptySent_ForInContext() *Sent_ForInContext {
	var p = new(Sent_ForInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_sent_ForIn
	return p
}

func (*Sent_ForInContext) IsSent_ForInContext() {}

func NewSent_ForInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_ForInContext {
	var p = new(Sent_ForInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_sent_ForIn

	return p
}

func (s *Sent_ForInContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_ForInContext) Get_ID() antlr.Token { return s._ID }

func (s *Sent_ForInContext) Get_IN() antlr.Token { return s._IN }

func (s *Sent_ForInContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Sent_ForInContext) Set_IN(v antlr.Token) { s._IN = v }

func (s *Sent_ForInContext) GetExp1() IExpressionContext { return s.exp1 }

func (s *Sent_ForInContext) GetExp2() IExpressionContext { return s.exp2 }

func (s *Sent_ForInContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *Sent_ForInContext) GetExp() IExpression_vec_ArrContext { return s.exp }

func (s *Sent_ForInContext) SetExp1(v IExpressionContext) { s.exp1 = v }

func (s *Sent_ForInContext) SetExp2(v IExpressionContext) { s.exp2 = v }

func (s *Sent_ForInContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *Sent_ForInContext) SetExp(v IExpression_vec_ArrContext) { s.exp = v }

func (s *Sent_ForInContext) GetInstr() interfaces.Instruction { return s.instr }

func (s *Sent_ForInContext) SetInstr(v interfaces.Instruction) { s.instr = v }

func (s *Sent_ForInContext) FOR() antlr.TerminalNode {
	return s.GetToken(InterpreteFOR, 0)
}

func (s *Sent_ForInContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Sent_ForInContext) IN() antlr.TerminalNode {
	return s.GetToken(InterpreteIN, 0)
}

func (s *Sent_ForInContext) AllPNT() []antlr.TerminalNode {
	return s.GetTokens(InterpretePNT)
}

func (s *Sent_ForInContext) PNT(i int) antlr.TerminalNode {
	return s.GetToken(InterpretePNT, i)
}

func (s *Sent_ForInContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *Sent_ForInContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *Sent_ForInContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *Sent_ForInContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Sent_ForInContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_ForInContext) Expression_vec_Arr() IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Sent_ForInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_ForInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_ForInContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterSent_ForIn(s)
	}
}

func (s *Sent_ForInContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitSent_ForIn(s)
	}
}

func (p *Interprete) Sent_ForIn() (localctx ISent_ForInContext) {
	localctx = NewSent_ForInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, InterpreteRULE_sent_ForIn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1061)
			p.Match(InterpreteFOR)
		}
		{
			p.SetState(1062)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_ForInContext)._ID = _m
		}
		{
			p.SetState(1063)

			var _m = p.Match(InterpreteIN)

			localctx.(*Sent_ForInContext)._IN = _m
		}
		{
			p.SetState(1064)

			var _x = p.expression(0)

			localctx.(*Sent_ForInContext).exp1 = _x
		}
		{
			p.SetState(1065)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(1066)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(1067)

			var _x = p.expression(0)

			localctx.(*Sent_ForInContext).exp2 = _x
		}
		{
			p.SetState(1068)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(1069)

			var _x = p.Instrucciones()

			localctx.(*Sent_ForInContext)._instrucciones = _x
		}
		{
			p.SetState(1070)
			p.Match(InterpreteLLAVEC)
		}

		var a interfaces.Expresion
		localctx.(*Sent_ForInContext).instr = sentenciaciclica.NewForIn((func() string {
			if localctx.(*Sent_ForInContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_ForInContext).Get_ID().GetText()
			}
		}()), localctx.(*Sent_ForInContext).GetExp1().GetP(), localctx.(*Sent_ForInContext).GetExp2().GetP(), a, localctx.(*Sent_ForInContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_ForInContext).Get_IN() == nil {
				return 0
			} else {
				return localctx.(*Sent_ForInContext).Get_IN().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ForInContext).Get_IN() == nil {
				return 0
			} else {
				return localctx.(*Sent_ForInContext).Get_IN().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1073)
			p.Match(InterpreteFOR)
		}
		{
			p.SetState(1074)

			var _m = p.Match(InterpreteID)

			localctx.(*Sent_ForInContext)._ID = _m
		}
		{
			p.SetState(1075)

			var _m = p.Match(InterpreteIN)

			localctx.(*Sent_ForInContext)._IN = _m
		}
		{
			p.SetState(1076)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Sent_ForInContext).exp = _x
		}
		{
			p.SetState(1077)
			p.Match(InterpreteLLAVEA)
		}
		{
			p.SetState(1078)

			var _x = p.Instrucciones()

			localctx.(*Sent_ForInContext)._instrucciones = _x
		}
		{
			p.SetState(1079)
			p.Match(InterpreteLLAVEC)
		}

		var a, b interfaces.Expresion
		localctx.(*Sent_ForInContext).instr = sentenciaciclica.NewForIn((func() string {
			if localctx.(*Sent_ForInContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Sent_ForInContext).Get_ID().GetText()
			}
		}()), a, b, localctx.(*Sent_ForInContext).GetExp().GetP(), localctx.(*Sent_ForInContext).Get_instrucciones().GetL(), (func() int {
			if localctx.(*Sent_ForInContext).Get_IN() == nil {
				return 0
			} else {
				return localctx.(*Sent_ForInContext).Get_IN().GetLine()
			}
		}()), (func() int {
			if localctx.(*Sent_ForInContext).Get_IN() == nil {
				return 0
			} else {
				return localctx.(*Sent_ForInContext).Get_IN().GetColumn()
			}
		}()))

	}

	return localctx
}

// IExpression_vec_ArrContext is an interface to support dynamic dispatch.
type IExpression_vec_ArrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_INT returns the _INT token.
	Get_INT() antlr.Token

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_FLOAT returns the _FLOAT token.
	Get_FLOAT() antlr.Token

	// Get_CORCHA returns the _CORCHA token.
	Get_CORCHA() antlr.Token

	// Get_TOCHARS returns the _TOCHARS token.
	Get_TOCHARS() antlr.Token

	// GetOpe returns the ope token.
	GetOpe() antlr.Token

	// Set_INT sets the _INT token.
	Set_INT(antlr.Token)

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_FLOAT sets the _FLOAT token.
	Set_FLOAT(antlr.Token)

	// Set_CORCHA sets the _CORCHA token.
	Set_CORCHA(antlr.Token)

	// Set_TOCHARS sets the _TOCHARS token.
	Set_TOCHARS(antlr.Token)

	// SetOpe sets the ope token.
	SetOpe(antlr.Token)

	// GetOpIz returns the opIz rule contexts.
	GetOpIz() IExpression_vec_ArrContext

	// Get_expression_vec_Arr returns the _expression_vec_Arr rule contexts.
	Get_expression_vec_Arr() IExpression_vec_ArrContext

	// GetOpDe returns the opDe rule contexts.
	GetOpDe() IExpression_vec_ArrContext

	// GetOperador returns the operador rule contexts.
	GetOperador() IExpression_vec_ArrContext

	// Get_list_expre_vec_arr returns the _list_expre_vec_arr rule contexts.
	Get_list_expre_vec_arr() IList_expre_vec_arrContext

	// GetExp1 returns the exp1 rule contexts.
	GetExp1() IExpression_vec_ArrContext

	// GetExp2 returns the exp2 rule contexts.
	GetExp2() IExpression_vec_ArrContext

	// GetExp4 returns the exp4 rule contexts.
	GetExp4() IExpressionContext

	// Get_vector_expr returns the _vector_expr rule contexts.
	Get_vector_expr() IVector_exprContext

	// Get_primitivo returns the _primitivo rule contexts.
	Get_primitivo() IPrimitivoContext

	// SetOpIz sets the opIz rule contexts.
	SetOpIz(IExpression_vec_ArrContext)

	// Set_expression_vec_Arr sets the _expression_vec_Arr rule contexts.
	Set_expression_vec_Arr(IExpression_vec_ArrContext)

	// SetOpDe sets the opDe rule contexts.
	SetOpDe(IExpression_vec_ArrContext)

	// SetOperador sets the operador rule contexts.
	SetOperador(IExpression_vec_ArrContext)

	// Set_list_expre_vec_arr sets the _list_expre_vec_arr rule contexts.
	Set_list_expre_vec_arr(IList_expre_vec_arrContext)

	// SetExp1 sets the exp1 rule contexts.
	SetExp1(IExpression_vec_ArrContext)

	// SetExp2 sets the exp2 rule contexts.
	SetExp2(IExpression_vec_ArrContext)

	// SetExp4 sets the exp4 rule contexts.
	SetExp4(IExpressionContext)

	// Set_vector_expr sets the _vector_expr rule contexts.
	Set_vector_expr(IVector_exprContext)

	// Set_primitivo sets the _primitivo rule contexts.
	Set_primitivo(IPrimitivoContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpression_vec_ArrContext differentiates from other interfaces.
	IsExpression_vec_ArrContext()
}

type Expression_vec_ArrContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	p                   interfaces.Expresion
	opIz                IExpression_vec_ArrContext
	_INT                antlr.Token
	op                  antlr.Token
	_expression_vec_Arr IExpression_vec_ArrContext
	opDe                IExpression_vec_ArrContext
	_FLOAT              antlr.Token
	operador            IExpression_vec_ArrContext
	_CORCHA             antlr.Token
	_list_expre_vec_arr IList_expre_vec_arrContext
	exp1                IExpression_vec_ArrContext
	exp2                IExpression_vec_ArrContext
	exp4                IExpressionContext
	_TOCHARS            antlr.Token
	_vector_expr        IVector_exprContext
	_primitivo          IPrimitivoContext
	ope                 antlr.Token
}

func NewEmptyExpression_vec_ArrContext() *Expression_vec_ArrContext {
	var p = new(Expression_vec_ArrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_expression_vec_Arr
	return p
}

func (*Expression_vec_ArrContext) IsExpression_vec_ArrContext() {}

func NewExpression_vec_ArrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_vec_ArrContext {
	var p = new(Expression_vec_ArrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_expression_vec_Arr

	return p
}

func (s *Expression_vec_ArrContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_vec_ArrContext) Get_INT() antlr.Token { return s._INT }

func (s *Expression_vec_ArrContext) GetOp() antlr.Token { return s.op }

func (s *Expression_vec_ArrContext) Get_FLOAT() antlr.Token { return s._FLOAT }

func (s *Expression_vec_ArrContext) Get_CORCHA() antlr.Token { return s._CORCHA }

func (s *Expression_vec_ArrContext) Get_TOCHARS() antlr.Token { return s._TOCHARS }

func (s *Expression_vec_ArrContext) GetOpe() antlr.Token { return s.ope }

func (s *Expression_vec_ArrContext) Set_INT(v antlr.Token) { s._INT = v }

func (s *Expression_vec_ArrContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expression_vec_ArrContext) Set_FLOAT(v antlr.Token) { s._FLOAT = v }

func (s *Expression_vec_ArrContext) Set_CORCHA(v antlr.Token) { s._CORCHA = v }

func (s *Expression_vec_ArrContext) Set_TOCHARS(v antlr.Token) { s._TOCHARS = v }

func (s *Expression_vec_ArrContext) SetOpe(v antlr.Token) { s.ope = v }

func (s *Expression_vec_ArrContext) GetOpIz() IExpression_vec_ArrContext { return s.opIz }

func (s *Expression_vec_ArrContext) Get_expression_vec_Arr() IExpression_vec_ArrContext {
	return s._expression_vec_Arr
}

func (s *Expression_vec_ArrContext) GetOpDe() IExpression_vec_ArrContext { return s.opDe }

func (s *Expression_vec_ArrContext) GetOperador() IExpression_vec_ArrContext { return s.operador }

func (s *Expression_vec_ArrContext) Get_list_expre_vec_arr() IList_expre_vec_arrContext {
	return s._list_expre_vec_arr
}

func (s *Expression_vec_ArrContext) GetExp1() IExpression_vec_ArrContext { return s.exp1 }

func (s *Expression_vec_ArrContext) GetExp2() IExpression_vec_ArrContext { return s.exp2 }

func (s *Expression_vec_ArrContext) GetExp4() IExpressionContext { return s.exp4 }

func (s *Expression_vec_ArrContext) Get_vector_expr() IVector_exprContext { return s._vector_expr }

func (s *Expression_vec_ArrContext) Get_primitivo() IPrimitivoContext { return s._primitivo }

func (s *Expression_vec_ArrContext) SetOpIz(v IExpression_vec_ArrContext) { s.opIz = v }

func (s *Expression_vec_ArrContext) Set_expression_vec_Arr(v IExpression_vec_ArrContext) {
	s._expression_vec_Arr = v
}

func (s *Expression_vec_ArrContext) SetOpDe(v IExpression_vec_ArrContext) { s.opDe = v }

func (s *Expression_vec_ArrContext) SetOperador(v IExpression_vec_ArrContext) { s.operador = v }

func (s *Expression_vec_ArrContext) Set_list_expre_vec_arr(v IList_expre_vec_arrContext) {
	s._list_expre_vec_arr = v
}

func (s *Expression_vec_ArrContext) SetExp1(v IExpression_vec_ArrContext) { s.exp1 = v }

func (s *Expression_vec_ArrContext) SetExp2(v IExpression_vec_ArrContext) { s.exp2 = v }

func (s *Expression_vec_ArrContext) SetExp4(v IExpressionContext) { s.exp4 = v }

func (s *Expression_vec_ArrContext) Set_vector_expr(v IVector_exprContext) { s._vector_expr = v }

func (s *Expression_vec_ArrContext) Set_primitivo(v IPrimitivoContext) { s._primitivo = v }

func (s *Expression_vec_ArrContext) GetP() interfaces.Expresion { return s.p }

func (s *Expression_vec_ArrContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Expression_vec_ArrContext) INT() antlr.TerminalNode {
	return s.GetToken(InterpreteINT, 0)
}

func (s *Expression_vec_ArrContext) AllDPTS() []antlr.TerminalNode {
	return s.GetTokens(InterpreteDPTS)
}

func (s *Expression_vec_ArrContext) DPTS(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, i)
}

func (s *Expression_vec_ArrContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *Expression_vec_ArrContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *Expression_vec_ArrContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *Expression_vec_ArrContext) POW() antlr.TerminalNode {
	return s.GetToken(InterpretePOW, 0)
}

func (s *Expression_vec_ArrContext) AllExpression_vec_Arr() []IExpression_vec_ArrContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem())
	var tst = make([]IExpression_vec_ArrContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_vec_ArrContext)
		}
	}

	return tst
}

func (s *Expression_vec_ArrContext) Expression_vec_Arr(i int) IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Expression_vec_ArrContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(InterpreteFLOAT, 0)
}

func (s *Expression_vec_ArrContext) POWF() antlr.TerminalNode {
	return s.GetToken(InterpretePOWF, 0)
}

func (s *Expression_vec_ArrContext) EXCLA() antlr.TerminalNode {
	return s.GetToken(InterpreteEXCLA, 0)
}

func (s *Expression_vec_ArrContext) CORCHA() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHA, 0)
}

func (s *Expression_vec_ArrContext) List_expre_vec_arr() IList_expre_vec_arrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expre_vec_arrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expre_vec_arrContext)
}

func (s *Expression_vec_ArrContext) CORCHC() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHC, 0)
}

func (s *Expression_vec_ArrContext) PYC() antlr.TerminalNode {
	return s.GetToken(InterpretePYC, 0)
}

func (s *Expression_vec_ArrContext) PNT() antlr.TerminalNode {
	return s.GetToken(InterpretePNT, 0)
}

func (s *Expression_vec_ArrContext) TOCHARS() antlr.TerminalNode {
	return s.GetToken(InterpreteTOCHARS, 0)
}

func (s *Expression_vec_ArrContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_vec_ArrContext) Vector_expr() IVector_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVector_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVector_exprContext)
}

func (s *Expression_vec_ArrContext) Primitivo() IPrimitivoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitivoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitivoContext)
}

func (s *Expression_vec_ArrContext) MODUL() antlr.TerminalNode {
	return s.GetToken(InterpreteMODUL, 0)
}

func (s *Expression_vec_ArrContext) MUL() antlr.TerminalNode {
	return s.GetToken(InterpreteMUL, 0)
}

func (s *Expression_vec_ArrContext) DIV() antlr.TerminalNode {
	return s.GetToken(InterpreteDIV, 0)
}

func (s *Expression_vec_ArrContext) SUM() antlr.TerminalNode {
	return s.GetToken(InterpreteSUM, 0)
}

func (s *Expression_vec_ArrContext) REST() antlr.TerminalNode {
	return s.GetToken(InterpreteREST, 0)
}

func (s *Expression_vec_ArrContext) MENOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMENOR, 0)
}

func (s *Expression_vec_ArrContext) MENORIGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteMENORIGUAL, 0)
}

func (s *Expression_vec_ArrContext) MAYORIGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYORIGUAL, 0)
}

func (s *Expression_vec_ArrContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *Expression_vec_ArrContext) IGUALACION() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUALACION, 0)
}

func (s *Expression_vec_ArrContext) DIFERENCIACION() antlr.TerminalNode {
	return s.GetToken(InterpreteDIFERENCIACION, 0)
}

func (s *Expression_vec_ArrContext) AND() antlr.TerminalNode {
	return s.GetToken(InterpreteAND, 0)
}

func (s *Expression_vec_ArrContext) OR() antlr.TerminalNode {
	return s.GetToken(InterpreteOR, 0)
}

func (s *Expression_vec_ArrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_vec_ArrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_vec_ArrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterExpression_vec_Arr(s)
	}
}

func (s *Expression_vec_ArrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitExpression_vec_Arr(s)
	}
}

func (p *Interprete) Expression_vec_Arr() (localctx IExpression_vec_ArrContext) {
	return p.expression_vec_Arr(0)
}

func (p *Interprete) expression_vec_Arr(_p int) (localctx IExpression_vec_ArrContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_vec_ArrContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_vec_ArrContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 86
	p.EnterRecursionRule(localctx, 86, InterpreteRULE_expression_vec_Arr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1085)

			var _m = p.Match(InterpreteINT)

			localctx.(*Expression_vec_ArrContext)._INT = _m
		}
		{
			p.SetState(1086)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1087)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1088)

			var _m = p.Match(InterpretePOW)

			localctx.(*Expression_vec_ArrContext).op = _m
		}
		{
			p.SetState(1089)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1090)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext).opIz = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1091)
			p.Match(InterpreteCOMA)
		}
		{
			p.SetState(1092)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext).opDe = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1093)
			p.Match(InterpretePARC)
		}
		localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Arit(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
			if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*Expression_vec_ArrContext).GetOp().GetText()
			}
		}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_INT() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_INT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_INT() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_INT().GetColumn()
			}
		}()))

	case 2:
		{
			p.SetState(1096)

			var _m = p.Match(InterpreteFLOAT)

			localctx.(*Expression_vec_ArrContext)._FLOAT = _m
		}
		{
			p.SetState(1097)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1098)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1099)

			var _m = p.Match(InterpretePOWF)

			localctx.(*Expression_vec_ArrContext).op = _m
		}
		{
			p.SetState(1100)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1101)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext).opIz = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1102)
			p.Match(InterpreteCOMA)
		}
		{
			p.SetState(1103)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext).opDe = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1104)
			p.Match(InterpretePARC)
		}
		localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Arit(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
			if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*Expression_vec_ArrContext).GetOp().GetText()
			}
		}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_FLOAT() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_FLOAT().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_FLOAT() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_FLOAT().GetColumn()
			}
		}()))

	case 3:
		{
			p.SetState(1107)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1108)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1109)
			p.Match(InterpretePARC)
		}
		localctx.(*Expression_vec_ArrContext).p = localctx.(*Expression_vec_ArrContext).Get_expression_vec_Arr().GetP()

	case 4:
		{
			p.SetState(1112)

			var _m = p.Match(InterpreteEXCLA)

			localctx.(*Expression_vec_ArrContext).op = _m
		}
		{
			p.SetState(1113)

			var _x = p.expression_vec_Arr(6)

			localctx.(*Expression_vec_ArrContext).operador = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Logica(localctx.(*Expression_vec_ArrContext).GetOperador().GetP(), (func() string {
			if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*Expression_vec_ArrContext).GetOp().GetText()
			}
		}()), nil, true, (func() int {
			if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).GetOp().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).GetOp().GetColumn()
			}
		}()))

	case 5:
		{
			p.SetState(1116)

			var _m = p.Match(InterpreteCORCHA)

			localctx.(*Expression_vec_ArrContext)._CORCHA = _m
		}
		{
			p.SetState(1117)

			var _x = p.list_expre_vec_arr(0)

			localctx.(*Expression_vec_ArrContext)._list_expre_vec_arr = _x
		}
		{
			p.SetState(1118)
			p.Match(InterpreteCORCHC)
		}

		var a interfaces.Expresion
		var b interfaces.Expresion
		localctx.(*Expression_vec_ArrContext).p = arrays.NewArray(localctx.(*Expression_vec_ArrContext).Get_list_expre_vec_arr().GetL(), a, b, (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_CORCHA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_CORCHA().GetColumn()
			}
		}()))

	case 6:
		{
			p.SetState(1121)

			var _m = p.Match(InterpreteCORCHA)

			localctx.(*Expression_vec_ArrContext)._CORCHA = _m
		}
		{
			p.SetState(1122)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext).exp1 = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1123)
			p.Match(InterpretePYC)
		}
		{
			p.SetState(1124)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Expression_vec_ArrContext).exp2 = _x
			localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
		}
		{
			p.SetState(1125)
			p.Match(InterpreteCORCHC)
		}
		localctx.(*Expression_vec_ArrContext).p = arrays.NewArray(arrayList.New(), localctx.(*Expression_vec_ArrContext).GetExp1().GetP(), localctx.(*Expression_vec_ArrContext).GetExp2().GetP(), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_CORCHA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_CORCHA() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_CORCHA().GetColumn()
			}
		}()))

	case 7:
		{
			p.SetState(1128)

			var _x = p.expression(0)

			localctx.(*Expression_vec_ArrContext).exp4 = _x
		}
		{
			p.SetState(1129)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(1130)

			var _m = p.Match(InterpreteTOCHARS)

			localctx.(*Expression_vec_ArrContext)._TOCHARS = _m
		}
		{
			p.SetState(1131)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1132)
			p.Match(InterpretePARC)
		}
		localctx.(*Expression_vec_ArrContext).p = funcionesnativas.NewToChar(localctx.(*Expression_vec_ArrContext).GetExp4().GetP(), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_TOCHARS() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_TOCHARS().GetLine()
			}
		}()), (func() int {
			if localctx.(*Expression_vec_ArrContext).Get_TOCHARS() == nil {
				return 0
			} else {
				return localctx.(*Expression_vec_ArrContext).Get_TOCHARS().GetColumn()
			}
		}()))

	case 8:
		{
			p.SetState(1135)

			var _x = p.Vector_expr()

			localctx.(*Expression_vec_ArrContext)._vector_expr = _x
		}
		localctx.(*Expression_vec_ArrContext).p = localctx.(*Expression_vec_ArrContext).Get_vector_expr().GetP()

	case 9:
		{
			p.SetState(1138)

			var _x = p.Primitivo()

			localctx.(*Expression_vec_ArrContext)._primitivo = _x
		}
		localctx.(*Expression_vec_ArrContext).p = localctx.(*Expression_vec_ArrContext).Get_primitivo().GetP()

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1170)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1168)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpression_vec_ArrContext(p, _parentctx, _parentState)
				localctx.(*Expression_vec_ArrContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression_vec_Arr)
				p.SetState(1143)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1144)

					var _m = p.Match(InterpreteMODUL)

					localctx.(*Expression_vec_ArrContext).op = _m
				}
				{
					p.SetState(1145)

					var _x = p.expression_vec_Arr(13)

					localctx.(*Expression_vec_ArrContext).opDe = _x
					localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
				}
				localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Arit(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOp().GetText()
					}
				}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOp().GetLine()
					}
				}()), (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOp().GetColumn()
					}
				}()))

			case 2:
				localctx = NewExpression_vec_ArrContext(p, _parentctx, _parentState)
				localctx.(*Expression_vec_ArrContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression_vec_Arr)
				p.SetState(1148)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1149)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expression_vec_ArrContext).ope = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == InterpreteMUL || _la == InterpreteDIV) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expression_vec_ArrContext).ope = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1150)

					var _x = p.expression_vec_Arr(12)

					localctx.(*Expression_vec_ArrContext).opDe = _x
					localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
				}
				localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Arit(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return ""
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetText()
					}
				}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetLine()
					}
				}()), (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetColumn()
					}
				}()))

			case 3:
				localctx = NewExpression_vec_ArrContext(p, _parentctx, _parentState)
				localctx.(*Expression_vec_ArrContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression_vec_Arr)
				p.SetState(1153)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1154)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expression_vec_ArrContext).ope = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == InterpreteSUM || _la == InterpreteREST) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expression_vec_ArrContext).ope = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1155)

					var _x = p.expression_vec_Arr(11)

					localctx.(*Expression_vec_ArrContext).opDe = _x
					localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
				}
				localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Arit(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return ""
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetText()
					}
				}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetLine()
					}
				}()), (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetColumn()
					}
				}()))

			case 4:
				localctx = NewExpression_vec_ArrContext(p, _parentctx, _parentState)
				localctx.(*Expression_vec_ArrContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression_vec_Arr)
				p.SetState(1158)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1159)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expression_vec_ArrContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(InterpreteDIFERENCIACION-27))|(1<<(InterpreteIGUALACION-27))|(1<<(InterpreteMAYORIGUAL-27))|(1<<(InterpreteMENORIGUAL-27))|(1<<(InterpreteMAYOR-27))|(1<<(InterpreteMENOR-27)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expression_vec_ArrContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1160)

					var _x = p.expression_vec_Arr(10)

					localctx.(*Expression_vec_ArrContext).opDe = _x
					localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
				}
				localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Relacional(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOp().GetText()
					}
				}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOp().GetLine()
					}
				}()), (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOp().GetColumn()
					}
				}()))

			case 5:
				localctx = NewExpression_vec_ArrContext(p, _parentctx, _parentState)
				localctx.(*Expression_vec_ArrContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression_vec_Arr)
				p.SetState(1163)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1164)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expression_vec_ArrContext).ope = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == InterpreteAND || _la == InterpreteOR) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expression_vec_ArrContext).ope = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1165)

					var _x = p.expression_vec_Arr(8)

					localctx.(*Expression_vec_ArrContext).opDe = _x
					localctx.(*Expression_vec_ArrContext)._expression_vec_Arr = _x
				}
				localctx.(*Expression_vec_ArrContext).p = Operacion.NewOperacion_Logica(localctx.(*Expression_vec_ArrContext).GetOpIz().GetP(), (func() string {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return ""
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetText()
					}
				}()), localctx.(*Expression_vec_ArrContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetLine()
					}
				}()), (func() int {
					if localctx.(*Expression_vec_ArrContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*Expression_vec_ArrContext).GetOpe().GetColumn()
					}
				}()))

			}

		}
		p.SetState(1172)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributos_struct_expContext is an interface to support dynamic dispatch.
type IAtributos_struct_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLi returns the li rule contexts.
	GetLi() IAtributos_struct_expContext

	// Get_atributos_struct_decl_exp returns the _atributos_struct_decl_exp rule contexts.
	Get_atributos_struct_decl_exp() IAtributos_struct_decl_expContext

	// GetAsd returns the asd rule contexts.
	GetAsd() IAtributos_struct_decl_expContext

	// SetLi sets the li rule contexts.
	SetLi(IAtributos_struct_expContext)

	// Set_atributos_struct_decl_exp sets the _atributos_struct_decl_exp rule contexts.
	Set_atributos_struct_decl_exp(IAtributos_struct_decl_expContext)

	// SetAsd sets the asd rule contexts.
	SetAsd(IAtributos_struct_decl_expContext)

	// GetL returns the l attribute.
	GetL() *arrayList.List

	// SetL sets the l attribute.
	SetL(*arrayList.List)

	// IsAtributos_struct_expContext differentiates from other interfaces.
	IsAtributos_struct_expContext()
}

type Atributos_struct_expContext struct {
	*antlr.BaseParserRuleContext
	parser                     antlr.Parser
	l                          *arrayList.List
	li                         IAtributos_struct_expContext
	_atributos_struct_decl_exp IAtributos_struct_decl_expContext
	asd                        IAtributos_struct_decl_expContext
}

func NewEmptyAtributos_struct_expContext() *Atributos_struct_expContext {
	var p = new(Atributos_struct_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_atributos_struct_exp
	return p
}

func (*Atributos_struct_expContext) IsAtributos_struct_expContext() {}

func NewAtributos_struct_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_expContext {
	var p = new(Atributos_struct_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_atributos_struct_exp

	return p
}

func (s *Atributos_struct_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_expContext) GetLi() IAtributos_struct_expContext { return s.li }

func (s *Atributos_struct_expContext) Get_atributos_struct_decl_exp() IAtributos_struct_decl_expContext {
	return s._atributos_struct_decl_exp
}

func (s *Atributos_struct_expContext) GetAsd() IAtributos_struct_decl_expContext { return s.asd }

func (s *Atributos_struct_expContext) SetLi(v IAtributos_struct_expContext) { s.li = v }

func (s *Atributos_struct_expContext) Set_atributos_struct_decl_exp(v IAtributos_struct_decl_expContext) {
	s._atributos_struct_decl_exp = v
}

func (s *Atributos_struct_expContext) SetAsd(v IAtributos_struct_decl_expContext) { s.asd = v }

func (s *Atributos_struct_expContext) GetL() *arrayList.List { return s.l }

func (s *Atributos_struct_expContext) SetL(v *arrayList.List) { s.l = v }

func (s *Atributos_struct_expContext) Atributos_struct_decl_exp() IAtributos_struct_decl_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_decl_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_decl_expContext)
}

func (s *Atributos_struct_expContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *Atributos_struct_expContext) Atributos_struct_exp() IAtributos_struct_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_expContext)
}

func (s *Atributos_struct_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributos_struct_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterAtributos_struct_exp(s)
	}
}

func (s *Atributos_struct_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitAtributos_struct_exp(s)
	}
}

func (p *Interprete) Atributos_struct_exp() (localctx IAtributos_struct_expContext) {
	return p.atributos_struct_exp(0)
}

func (p *Interprete) atributos_struct_exp(_p int) (localctx IAtributos_struct_expContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAtributos_struct_expContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAtributos_struct_expContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 88
	p.EnterRecursionRule(localctx, 88, InterpreteRULE_atributos_struct_exp, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1174)

		var _x = p.Atributos_struct_decl_exp()

		localctx.(*Atributos_struct_expContext)._atributos_struct_decl_exp = _x
	}

	a := arrayList.New()
	a.Add(localctx.(*Atributos_struct_expContext).Get_atributos_struct_decl_exp().GetS())
	localctx.(*Atributos_struct_expContext).l = a

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1184)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAtributos_struct_expContext(p, _parentctx, _parentState)
			localctx.(*Atributos_struct_expContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_atributos_struct_exp)
			p.SetState(1177)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1178)
				p.Match(InterpreteCOMA)
			}
			{
				p.SetState(1179)

				var _x = p.Atributos_struct_decl_exp()

				localctx.(*Atributos_struct_expContext).asd = _x
				localctx.(*Atributos_struct_expContext)._atributos_struct_decl_exp = _x
			}

			localctx.(*Atributos_struct_expContext).GetLi().GetL().Add(localctx.(*Atributos_struct_expContext).GetAsd().GetS())
			localctx.(*Atributos_struct_expContext).l = localctx.(*Atributos_struct_expContext).GetLi().GetL()

		}
		p.SetState(1186)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributos_struct_decl_expContext is an interface to support dynamic dispatch.
type IAtributos_struct_decl_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetExp2 returns the exp2 rule contexts.
	GetExp2() IExpressionContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpression_vec_ArrContext

	// SetExp2 sets the exp2 rule contexts.
	SetExp2(IExpressionContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpression_vec_ArrContext)

	// GetS returns the s attribute.
	GetS() interfaces.Symbol

	// SetS sets the s attribute.
	SetS(interfaces.Symbol)

	// IsAtributos_struct_decl_expContext differentiates from other interfaces.
	IsAtributos_struct_decl_expContext()
}

type Atributos_struct_decl_expContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	s      interfaces.Symbol
	_ID    antlr.Token
	exp2   IExpressionContext
	exp    IExpression_vec_ArrContext
}

func NewEmptyAtributos_struct_decl_expContext() *Atributos_struct_decl_expContext {
	var p = new(Atributos_struct_decl_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_atributos_struct_decl_exp
	return p
}

func (*Atributos_struct_decl_expContext) IsAtributos_struct_decl_expContext() {}

func NewAtributos_struct_decl_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_decl_expContext {
	var p = new(Atributos_struct_decl_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_atributos_struct_decl_exp

	return p
}

func (s *Atributos_struct_decl_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_decl_expContext) Get_ID() antlr.Token { return s._ID }

func (s *Atributos_struct_decl_expContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Atributos_struct_decl_expContext) GetExp2() IExpressionContext { return s.exp2 }

func (s *Atributos_struct_decl_expContext) GetExp() IExpression_vec_ArrContext { return s.exp }

func (s *Atributos_struct_decl_expContext) SetExp2(v IExpressionContext) { s.exp2 = v }

func (s *Atributos_struct_decl_expContext) SetExp(v IExpression_vec_ArrContext) { s.exp = v }

func (s *Atributos_struct_decl_expContext) GetS() interfaces.Symbol { return s.s }

func (s *Atributos_struct_decl_expContext) SetS(v interfaces.Symbol) { s.s = v }

func (s *Atributos_struct_decl_expContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Atributos_struct_decl_expContext) DPTS() antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, 0)
}

func (s *Atributos_struct_decl_expContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Atributos_struct_decl_expContext) Expression_vec_Arr() IExpression_vec_ArrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_vec_ArrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_vec_ArrContext)
}

func (s *Atributos_struct_decl_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_decl_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributos_struct_decl_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterAtributos_struct_decl_exp(s)
	}
}

func (s *Atributos_struct_decl_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitAtributos_struct_decl_exp(s)
	}
}

func (p *Interprete) Atributos_struct_decl_exp() (localctx IAtributos_struct_decl_expContext) {
	localctx = NewAtributos_struct_decl_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, InterpreteRULE_atributos_struct_decl_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1187)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_decl_expContext)._ID = _m
		}
		{
			p.SetState(1188)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1189)

			var _x = p.expression(0)

			localctx.(*Atributos_struct_decl_expContext).exp2 = _x
		}
		localctx.(*Atributos_struct_decl_expContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Atributos_struct_decl_expContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_decl_expContext).Get_ID().GetText()
			}
		}()), Valor: localctx.(*Atributos_struct_decl_expContext).GetExp2().GetP()}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1192)

			var _m = p.Match(InterpreteID)

			localctx.(*Atributos_struct_decl_expContext)._ID = _m
		}
		{
			p.SetState(1193)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1194)

			var _x = p.expression_vec_Arr(0)

			localctx.(*Atributos_struct_decl_expContext).exp = _x
		}
		localctx.(*Atributos_struct_decl_expContext).s = interfaces.Symbol{Id: (func() string {
			if localctx.(*Atributos_struct_decl_expContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributos_struct_decl_expContext).Get_ID().GetText()
			}
		}()), Valor: localctx.(*Atributos_struct_decl_expContext).GetExp().GetP()}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_INT returns the _INT token.
	Get_INT() antlr.Token

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_FLOAT returns the _FLOAT token.
	Get_FLOAT() antlr.Token

	// GetOpe returns the ope token.
	GetOpe() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_REMOVE returns the _REMOVE token.
	Get_REMOVE() antlr.Token

	// Get_LLAVEA returns the _LLAVEA token.
	Get_LLAVEA() antlr.Token

	// Get_LEN returns the _LEN token.
	Get_LEN() antlr.Token

	// Get_CONTAINS returns the _CONTAINS token.
	Get_CONTAINS() antlr.Token

	// Get_TOCHARS returns the _TOCHARS token.
	Get_TOCHARS() antlr.Token

	// Get_TOSTRING returns the _TOSTRING token.
	Get_TOSTRING() antlr.Token

	// Get_TOOWNED returns the _TOOWNED token.
	Get_TOOWNED() antlr.Token

	// Get_CASTEO returns the _CASTEO token.
	Get_CASTEO() antlr.Token

	// Get_ABOSLU returns the _ABOSLU token.
	Get_ABOSLU() antlr.Token

	// Get_CLONATION returns the _CLONATION token.
	Get_CLONATION() antlr.Token

	// Set_INT sets the _INT token.
	Set_INT(antlr.Token)

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_FLOAT sets the _FLOAT token.
	Set_FLOAT(antlr.Token)

	// SetOpe sets the ope token.
	SetOpe(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_REMOVE sets the _REMOVE token.
	Set_REMOVE(antlr.Token)

	// Set_LLAVEA sets the _LLAVEA token.
	Set_LLAVEA(antlr.Token)

	// Set_LEN sets the _LEN token.
	Set_LEN(antlr.Token)

	// Set_CONTAINS sets the _CONTAINS token.
	Set_CONTAINS(antlr.Token)

	// Set_TOCHARS sets the _TOCHARS token.
	Set_TOCHARS(antlr.Token)

	// Set_TOSTRING sets the _TOSTRING token.
	Set_TOSTRING(antlr.Token)

	// Set_TOOWNED sets the _TOOWNED token.
	Set_TOOWNED(antlr.Token)

	// Set_CASTEO sets the _CASTEO token.
	Set_CASTEO(antlr.Token)

	// Set_ABOSLU sets the _ABOSLU token.
	Set_ABOSLU(antlr.Token)

	// Set_CLONATION sets the _CLONATION token.
	Set_CLONATION(antlr.Token)

	// GetExp8 returns the exp8 rule contexts.
	GetExp8() IExpressionContext

	// GetOpIz returns the opIz rule contexts.
	GetOpIz() IExpressionContext

	// GetExp4 returns the exp4 rule contexts.
	GetExp4() IExpressionContext

	// GetExp5 returns the exp5 rule contexts.
	GetExp5() IExpressionContext

	// GetExp6 returns the exp6 rule contexts.
	GetExp6() IExpressionContext

	// GetExp7 returns the exp7 rule contexts.
	GetExp7() IExpressionContext

	// GetExp9 returns the exp9 rule contexts.
	GetExp9() IExpressionContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetOpDe returns the opDe rule contexts.
	GetOpDe() IExpressionContext

	// GetOperador returns the operador rule contexts.
	GetOperador() IExpressionContext

	// GetLi returns the li rule contexts.
	GetLi() IAtributos_struct_expContext

	// Get_llamadas_structs returns the _llamadas_structs rule contexts.
	Get_llamadas_structs() ILlamadas_structsContext

	// Get_llamada_expre returns the _llamada_expre rule contexts.
	Get_llamada_expre() ILlamada_expreContext

	// Get_primitivo returns the _primitivo rule contexts.
	Get_primitivo() IPrimitivoContext

	// Get_tipo returns the _tipo rule contexts.
	Get_tipo() ITipoContext

	// SetExp8 sets the exp8 rule contexts.
	SetExp8(IExpressionContext)

	// SetOpIz sets the opIz rule contexts.
	SetOpIz(IExpressionContext)

	// SetExp4 sets the exp4 rule contexts.
	SetExp4(IExpressionContext)

	// SetExp5 sets the exp5 rule contexts.
	SetExp5(IExpressionContext)

	// SetExp6 sets the exp6 rule contexts.
	SetExp6(IExpressionContext)

	// SetExp7 sets the exp7 rule contexts.
	SetExp7(IExpressionContext)

	// SetExp9 sets the exp9 rule contexts.
	SetExp9(IExpressionContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetOpDe sets the opDe rule contexts.
	SetOpDe(IExpressionContext)

	// SetOperador sets the operador rule contexts.
	SetOperador(IExpressionContext)

	// SetLi sets the li rule contexts.
	SetLi(IAtributos_struct_expContext)

	// Set_llamadas_structs sets the _llamadas_structs rule contexts.
	Set_llamadas_structs(ILlamadas_structsContext)

	// Set_llamada_expre sets the _llamada_expre rule contexts.
	Set_llamada_expre(ILlamada_expreContext)

	// Set_primitivo sets the _primitivo rule contexts.
	Set_primitivo(IPrimitivoContext)

	// Set_tipo sets the _tipo rule contexts.
	Set_tipo(ITipoContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	exp8              IExpressionContext
	opIz              IExpressionContext
	exp4              IExpressionContext
	exp5              IExpressionContext
	exp6              IExpressionContext
	exp7              IExpressionContext
	exp9              IExpressionContext
	_INT              antlr.Token
	op                antlr.Token
	_expression       IExpressionContext
	opDe              IExpressionContext
	_FLOAT            antlr.Token
	ope               antlr.Token
	operador          IExpressionContext
	_ID               antlr.Token
	_REMOVE           antlr.Token
	_LLAVEA           antlr.Token
	li                IAtributos_struct_expContext
	_llamadas_structs ILlamadas_structsContext
	_llamada_expre    ILlamada_expreContext
	_primitivo        IPrimitivoContext
	_LEN              antlr.Token
	_CONTAINS         antlr.Token
	_TOCHARS          antlr.Token
	_TOSTRING         antlr.Token
	_TOOWNED          antlr.Token
	_CASTEO           antlr.Token
	_tipo             ITipoContext
	_ABOSLU           antlr.Token
	_CLONATION        antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Get_INT() antlr.Token { return s._INT }

func (s *ExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ExpressionContext) Get_FLOAT() antlr.Token { return s._FLOAT }

func (s *ExpressionContext) GetOpe() antlr.Token { return s.ope }

func (s *ExpressionContext) Get_ID() antlr.Token { return s._ID }

func (s *ExpressionContext) Get_REMOVE() antlr.Token { return s._REMOVE }

func (s *ExpressionContext) Get_LLAVEA() antlr.Token { return s._LLAVEA }

func (s *ExpressionContext) Get_LEN() antlr.Token { return s._LEN }

func (s *ExpressionContext) Get_CONTAINS() antlr.Token { return s._CONTAINS }

func (s *ExpressionContext) Get_TOCHARS() antlr.Token { return s._TOCHARS }

func (s *ExpressionContext) Get_TOSTRING() antlr.Token { return s._TOSTRING }

func (s *ExpressionContext) Get_TOOWNED() antlr.Token { return s._TOOWNED }

func (s *ExpressionContext) Get_CASTEO() antlr.Token { return s._CASTEO }

func (s *ExpressionContext) Get_ABOSLU() antlr.Token { return s._ABOSLU }

func (s *ExpressionContext) Get_CLONATION() antlr.Token { return s._CLONATION }

func (s *ExpressionContext) Set_INT(v antlr.Token) { s._INT = v }

func (s *ExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpressionContext) Set_FLOAT(v antlr.Token) { s._FLOAT = v }

func (s *ExpressionContext) SetOpe(v antlr.Token) { s.ope = v }

func (s *ExpressionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ExpressionContext) Set_REMOVE(v antlr.Token) { s._REMOVE = v }

func (s *ExpressionContext) Set_LLAVEA(v antlr.Token) { s._LLAVEA = v }

func (s *ExpressionContext) Set_LEN(v antlr.Token) { s._LEN = v }

func (s *ExpressionContext) Set_CONTAINS(v antlr.Token) { s._CONTAINS = v }

func (s *ExpressionContext) Set_TOCHARS(v antlr.Token) { s._TOCHARS = v }

func (s *ExpressionContext) Set_TOSTRING(v antlr.Token) { s._TOSTRING = v }

func (s *ExpressionContext) Set_TOOWNED(v antlr.Token) { s._TOOWNED = v }

func (s *ExpressionContext) Set_CASTEO(v antlr.Token) { s._CASTEO = v }

func (s *ExpressionContext) Set_ABOSLU(v antlr.Token) { s._ABOSLU = v }

func (s *ExpressionContext) Set_CLONATION(v antlr.Token) { s._CLONATION = v }

func (s *ExpressionContext) GetExp8() IExpressionContext { return s.exp8 }

func (s *ExpressionContext) GetOpIz() IExpressionContext { return s.opIz }

func (s *ExpressionContext) GetExp4() IExpressionContext { return s.exp4 }

func (s *ExpressionContext) GetExp5() IExpressionContext { return s.exp5 }

func (s *ExpressionContext) GetExp6() IExpressionContext { return s.exp6 }

func (s *ExpressionContext) GetExp7() IExpressionContext { return s.exp7 }

func (s *ExpressionContext) GetExp9() IExpressionContext { return s.exp9 }

func (s *ExpressionContext) Get_expression() IExpressionContext { return s._expression }

func (s *ExpressionContext) GetOpDe() IExpressionContext { return s.opDe }

func (s *ExpressionContext) GetOperador() IExpressionContext { return s.operador }

func (s *ExpressionContext) GetLi() IAtributos_struct_expContext { return s.li }

func (s *ExpressionContext) Get_llamadas_structs() ILlamadas_structsContext {
	return s._llamadas_structs
}

func (s *ExpressionContext) Get_llamada_expre() ILlamada_expreContext { return s._llamada_expre }

func (s *ExpressionContext) Get_primitivo() IPrimitivoContext { return s._primitivo }

func (s *ExpressionContext) Get_tipo() ITipoContext { return s._tipo }

func (s *ExpressionContext) SetExp8(v IExpressionContext) { s.exp8 = v }

func (s *ExpressionContext) SetOpIz(v IExpressionContext) { s.opIz = v }

func (s *ExpressionContext) SetExp4(v IExpressionContext) { s.exp4 = v }

func (s *ExpressionContext) SetExp5(v IExpressionContext) { s.exp5 = v }

func (s *ExpressionContext) SetExp6(v IExpressionContext) { s.exp6 = v }

func (s *ExpressionContext) SetExp7(v IExpressionContext) { s.exp7 = v }

func (s *ExpressionContext) SetExp9(v IExpressionContext) { s.exp9 = v }

func (s *ExpressionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ExpressionContext) SetOpDe(v IExpressionContext) { s.opDe = v }

func (s *ExpressionContext) SetOperador(v IExpressionContext) { s.operador = v }

func (s *ExpressionContext) SetLi(v IAtributos_struct_expContext) { s.li = v }

func (s *ExpressionContext) Set_llamadas_structs(v ILlamadas_structsContext) { s._llamadas_structs = v }

func (s *ExpressionContext) Set_llamada_expre(v ILlamada_expreContext) { s._llamada_expre = v }

func (s *ExpressionContext) Set_primitivo(v IPrimitivoContext) { s._primitivo = v }

func (s *ExpressionContext) Set_tipo(v ITipoContext) { s._tipo = v }

func (s *ExpressionContext) GetP() interfaces.Expresion { return s.p }

func (s *ExpressionContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *ExpressionContext) INT() antlr.TerminalNode {
	return s.GetToken(InterpreteINT, 0)
}

func (s *ExpressionContext) AllDPTS() []antlr.TerminalNode {
	return s.GetTokens(InterpreteDPTS)
}

func (s *ExpressionContext) DPTS(i int) antlr.TerminalNode {
	return s.GetToken(InterpreteDPTS, i)
}

func (s *ExpressionContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *ExpressionContext) COMA() antlr.TerminalNode {
	return s.GetToken(InterpreteCOMA, 0)
}

func (s *ExpressionContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *ExpressionContext) POW() antlr.TerminalNode {
	return s.GetToken(InterpretePOW, 0)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(InterpreteFLOAT, 0)
}

func (s *ExpressionContext) POWF() antlr.TerminalNode {
	return s.GetToken(InterpretePOWF, 0)
}

func (s *ExpressionContext) REST() antlr.TerminalNode {
	return s.GetToken(InterpreteREST, 0)
}

func (s *ExpressionContext) EXCLA() antlr.TerminalNode {
	return s.GetToken(InterpreteEXCLA, 0)
}

func (s *ExpressionContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *ExpressionContext) PNT() antlr.TerminalNode {
	return s.GetToken(InterpretePNT, 0)
}

func (s *ExpressionContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(InterpreteREMOVE, 0)
}

func (s *ExpressionContext) LLAVEA() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEA, 0)
}

func (s *ExpressionContext) LLAVEC() antlr.TerminalNode {
	return s.GetToken(InterpreteLLAVEC, 0)
}

func (s *ExpressionContext) Atributos_struct_exp() IAtributos_struct_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_expContext)
}

func (s *ExpressionContext) Llamadas_structs() ILlamadas_structsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamadas_structsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamadas_structsContext)
}

func (s *ExpressionContext) Llamada_expre() ILlamada_expreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_expreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_expreContext)
}

func (s *ExpressionContext) Primitivo() IPrimitivoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitivoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitivoContext)
}

func (s *ExpressionContext) MODUL() antlr.TerminalNode {
	return s.GetToken(InterpreteMODUL, 0)
}

func (s *ExpressionContext) MUL() antlr.TerminalNode {
	return s.GetToken(InterpreteMUL, 0)
}

func (s *ExpressionContext) DIV() antlr.TerminalNode {
	return s.GetToken(InterpreteDIV, 0)
}

func (s *ExpressionContext) SUM() antlr.TerminalNode {
	return s.GetToken(InterpreteSUM, 0)
}

func (s *ExpressionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMENOR, 0)
}

func (s *ExpressionContext) MENORIGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteMENORIGUAL, 0)
}

func (s *ExpressionContext) MAYORIGUAL() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYORIGUAL, 0)
}

func (s *ExpressionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(InterpreteMAYOR, 0)
}

func (s *ExpressionContext) IGUALACION() antlr.TerminalNode {
	return s.GetToken(InterpreteIGUALACION, 0)
}

func (s *ExpressionContext) DIFERENCIACION() antlr.TerminalNode {
	return s.GetToken(InterpreteDIFERENCIACION, 0)
}

func (s *ExpressionContext) AND() antlr.TerminalNode {
	return s.GetToken(InterpreteAND, 0)
}

func (s *ExpressionContext) OR() antlr.TerminalNode {
	return s.GetToken(InterpreteOR, 0)
}

func (s *ExpressionContext) LEN() antlr.TerminalNode {
	return s.GetToken(InterpreteLEN, 0)
}

func (s *ExpressionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(InterpreteCONTAINS, 0)
}

func (s *ExpressionContext) PUNTERO() antlr.TerminalNode {
	return s.GetToken(InterpretePUNTERO, 0)
}

func (s *ExpressionContext) TOCHARS() antlr.TerminalNode {
	return s.GetToken(InterpreteTOCHARS, 0)
}

func (s *ExpressionContext) TOSTRING() antlr.TerminalNode {
	return s.GetToken(InterpreteTOSTRING, 0)
}

func (s *ExpressionContext) TOOWNED() antlr.TerminalNode {
	return s.GetToken(InterpreteTOOWNED, 0)
}

func (s *ExpressionContext) CASTEO() antlr.TerminalNode {
	return s.GetToken(InterpreteCASTEO, 0)
}

func (s *ExpressionContext) Tipo() ITipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipoContext)
}

func (s *ExpressionContext) ABOSLU() antlr.TerminalNode {
	return s.GetToken(InterpreteABOSLU, 0)
}

func (s *ExpressionContext) RAIZITA() antlr.TerminalNode {
	return s.GetToken(InterpreteRAIZITA, 0)
}

func (s *ExpressionContext) CLONATION() antlr.TerminalNode {
	return s.GetToken(InterpreteCLONATION, 0)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *Interprete) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *Interprete) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 92
	p.EnterRecursionRule(localctx, 92, InterpreteRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1200)

			var _m = p.Match(InterpreteINT)

			localctx.(*ExpressionContext)._INT = _m
		}
		{
			p.SetState(1201)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1202)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1203)

			var _m = p.Match(InterpretePOW)

			localctx.(*ExpressionContext).op = _m
		}
		{
			p.SetState(1204)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1205)

			var _x = p.expression(0)

			localctx.(*ExpressionContext).opIz = _x
			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1206)
			p.Match(InterpreteCOMA)
		}
		{
			p.SetState(1207)

			var _x = p.expression(0)

			localctx.(*ExpressionContext).opDe = _x
			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1208)
			p.Match(InterpretePARC)
		}
		localctx.(*ExpressionContext).p = Operacion.NewOperacion_Arit(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
			if localctx.(*ExpressionContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).GetOp().GetText()
			}
		}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
			if localctx.(*ExpressionContext).Get_INT() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_INT().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_INT() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_INT().GetColumn()
			}
		}()))

	case 2:
		{
			p.SetState(1211)

			var _m = p.Match(InterpreteFLOAT)

			localctx.(*ExpressionContext)._FLOAT = _m
		}
		{
			p.SetState(1212)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1213)
			p.Match(InterpreteDPTS)
		}
		{
			p.SetState(1214)

			var _m = p.Match(InterpretePOWF)

			localctx.(*ExpressionContext).op = _m
		}
		{
			p.SetState(1215)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1216)

			var _x = p.expression(0)

			localctx.(*ExpressionContext).opIz = _x
			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1217)
			p.Match(InterpreteCOMA)
		}
		{
			p.SetState(1218)

			var _x = p.expression(0)

			localctx.(*ExpressionContext).opDe = _x
			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1219)
			p.Match(InterpretePARC)
		}
		localctx.(*ExpressionContext).p = Operacion.NewOperacion_Arit(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
			if localctx.(*ExpressionContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).GetOp().GetText()
			}
		}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
			if localctx.(*ExpressionContext).Get_FLOAT() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_FLOAT().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_FLOAT() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_FLOAT().GetColumn()
			}
		}()))

	case 3:
		{
			p.SetState(1222)

			var _m = p.Match(InterpreteREST)

			localctx.(*ExpressionContext).ope = _m
		}
		{
			p.SetState(1223)

			var _x = p.expression(19)

			localctx.(*ExpressionContext).opDe = _x
			localctx.(*ExpressionContext)._expression = _x
		}
		localctx.(*ExpressionContext).p = Operacion.NewOperacion_Arit(localctx.(*ExpressionContext).GetOpDe().GetP(), (func() string {
			if localctx.(*ExpressionContext).GetOpe() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).GetOpe().GetText()
			}
		}()), nil, true, (func() int {
			if localctx.(*ExpressionContext).GetOpe() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).GetOpe().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).GetOpe() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).GetOpe().GetColumn()
			}
		}()))

	case 4:
		{
			p.SetState(1226)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1227)

			var _x = p.expression(0)

			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1228)
			p.Match(InterpretePARC)
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expression().GetP()

	case 5:
		{
			p.SetState(1231)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1232)

			var _x = p.expression(0)

			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1233)
			p.Match(InterpretePARC)
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expression().GetP()

	case 6:
		{
			p.SetState(1236)

			var _m = p.Match(InterpreteEXCLA)

			localctx.(*ExpressionContext).op = _m
		}
		{
			p.SetState(1237)

			var _x = p.expression(14)

			localctx.(*ExpressionContext).operador = _x
			localctx.(*ExpressionContext)._expression = _x
		}
		localctx.(*ExpressionContext).p = Operacion.NewOperacion_Logica(localctx.(*ExpressionContext).GetOperador().GetP(), (func() string {
			if localctx.(*ExpressionContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).GetOp().GetText()
			}
		}()), nil, true, (func() int {
			if localctx.(*ExpressionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).GetOp().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).GetOp().GetColumn()
			}
		}()))

	case 7:
		{
			p.SetState(1240)

			var _m = p.Match(InterpreteID)

			localctx.(*ExpressionContext)._ID = _m
		}
		{
			p.SetState(1241)
			p.Match(InterpretePNT)
		}
		{
			p.SetState(1242)

			var _m = p.Match(InterpreteREMOVE)

			localctx.(*ExpressionContext)._REMOVE = _m
		}
		{
			p.SetState(1243)
			p.Match(InterpretePARA)
		}
		{
			p.SetState(1244)

			var _x = p.expression(0)

			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(1245)
			p.Match(InterpretePARC)
		}
		localctx.(*ExpressionContext).p = funcionesvectores.NewRemove_exp((func() string {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetText()
			}
		}()), localctx.(*ExpressionContext).Get_expression().GetP(), (func() int {
			if localctx.(*ExpressionContext).Get_REMOVE() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_REMOVE().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_REMOVE() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_REMOVE().GetColumn()
			}
		}()))

	case 8:
		{
			p.SetState(1248)

			var _m = p.Match(InterpreteID)

			localctx.(*ExpressionContext)._ID = _m
		}
		{
			p.SetState(1249)

			var _m = p.Match(InterpreteLLAVEA)

			localctx.(*ExpressionContext)._LLAVEA = _m
		}
		{
			p.SetState(1250)

			var _x = p.atributos_struct_exp(0)

			localctx.(*ExpressionContext).li = _x
		}
		{
			p.SetState(1251)
			p.Match(InterpreteLLAVEC)
		}
		localctx.(*ExpressionContext).p = structs.NewStruct((func() string {
			if localctx.(*ExpressionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpressionContext).Get_ID().GetText()
			}
		}()), localctx.(*ExpressionContext).GetLi().GetL(), (func() int {
			if localctx.(*ExpressionContext).Get_LLAVEA() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_LLAVEA().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpressionContext).Get_LLAVEA() == nil {
				return 0
			} else {
				return localctx.(*ExpressionContext).Get_LLAVEA().GetColumn()
			}
		}()))

	case 9:
		{
			p.SetState(1254)

			var _x = p.llamadas_structs(0)

			localctx.(*ExpressionContext)._llamadas_structs = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_llamadas_structs().GetP()

	case 10:
		{
			p.SetState(1257)

			var _x = p.Llamada_expre()

			localctx.(*ExpressionContext)._llamada_expre = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_llamada_expre().GetP()

	case 11:
		{
			p.SetState(1260)

			var _x = p.Primitivo()

			localctx.(*ExpressionContext)._primitivo = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_primitivo().GetP()

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1348)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1346)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1265)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(1266)

					var _m = p.Match(InterpreteMODUL)

					localctx.(*ExpressionContext).op = _m
				}
				{
					p.SetState(1267)

					var _x = p.expression(23)

					localctx.(*ExpressionContext).opDe = _x
					localctx.(*ExpressionContext)._expression = _x
				}
				localctx.(*ExpressionContext).p = Operacion.NewOperacion_Arit(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
					if localctx.(*ExpressionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpressionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*ExpressionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOp().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOp().GetColumn()
					}
				}()))

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1270)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(1271)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).ope = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == InterpreteMUL || _la == InterpreteDIV) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).ope = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1272)

					var _x = p.expression(22)

					localctx.(*ExpressionContext).opDe = _x
					localctx.(*ExpressionContext)._expression = _x
				}
				localctx.(*ExpressionContext).p = Operacion.NewOperacion_Arit(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return ""
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetText()
					}
				}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetColumn()
					}
				}()))

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1275)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1276)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).ope = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == InterpreteSUM || _la == InterpreteREST) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).ope = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1277)

					var _x = p.expression(21)

					localctx.(*ExpressionContext).opDe = _x
					localctx.(*ExpressionContext)._expression = _x
				}
				localctx.(*ExpressionContext).p = Operacion.NewOperacion_Arit(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return ""
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetText()
					}
				}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetColumn()
					}
				}()))

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1280)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1281)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(InterpreteDIFERENCIACION-27))|(1<<(InterpreteIGUALACION-27))|(1<<(InterpreteMAYORIGUAL-27))|(1<<(InterpreteMENORIGUAL-27))|(1<<(InterpreteMAYOR-27))|(1<<(InterpreteMENOR-27)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1282)

					var _x = p.expression(18)

					localctx.(*ExpressionContext).opDe = _x
					localctx.(*ExpressionContext)._expression = _x
				}
				localctx.(*ExpressionContext).p = Operacion.NewOperacion_Relacional(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
					if localctx.(*ExpressionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpressionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*ExpressionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOp().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOp().GetColumn()
					}
				}()))

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1285)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(1286)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpressionContext).ope = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == InterpreteAND || _la == InterpreteOR) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpressionContext).ope = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1287)

					var _x = p.expression(16)

					localctx.(*ExpressionContext).opDe = _x
					localctx.(*ExpressionContext)._expression = _x
				}
				localctx.(*ExpressionContext).p = Operacion.NewOperacion_Logica(localctx.(*ExpressionContext).GetOpIz().GetP(), (func() string {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return ""
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetText()
					}
				}()), localctx.(*ExpressionContext).GetOpDe().GetP(), false, (func() int {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).GetOpe() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).GetOpe().GetColumn()
					}
				}()))

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp8 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1290)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(1291)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1292)

					var _m = p.Match(InterpreteLEN)

					localctx.(*ExpressionContext)._LEN = _m
				}
				{
					p.SetState(1293)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1294)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesvectores.NewLen(localctx.(*ExpressionContext).GetExp8().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_LEN() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_LEN().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_LEN() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_LEN().GetColumn()
					}
				}()))

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp8 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1296)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1297)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1298)

					var _m = p.Match(InterpreteCONTAINS)

					localctx.(*ExpressionContext)._CONTAINS = _m
				}
				{
					p.SetState(1299)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1300)
					p.Match(InterpretePUNTERO)
				}
				{
					p.SetState(1301)

					var _x = p.expression(0)

					localctx.(*ExpressionContext)._expression = _x
				}
				{
					p.SetState(1302)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesvectores.NewContains(localctx.(*ExpressionContext).GetExp8().GetP(), localctx.(*ExpressionContext).Get_expression().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_CONTAINS() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_CONTAINS().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_CONTAINS() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_CONTAINS().GetColumn()
					}
				}()))

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp4 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1305)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1306)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1307)

					var _m = p.Match(InterpreteTOCHARS)

					localctx.(*ExpressionContext)._TOCHARS = _m
				}
				{
					p.SetState(1308)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1309)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesnativas.NewToChar(localctx.(*ExpressionContext).GetExp4().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_TOCHARS() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_TOCHARS().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_TOCHARS() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_TOCHARS().GetColumn()
					}
				}()))

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp4 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1311)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1312)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1313)

					var _m = p.Match(InterpreteTOSTRING)

					localctx.(*ExpressionContext)._TOSTRING = _m
				}
				{
					p.SetState(1314)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1315)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesnativas.NewToString(localctx.(*ExpressionContext).GetExp4().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_TOSTRING() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_TOSTRING().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_TOSTRING() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_TOSTRING().GetColumn()
					}
				}()))

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp4 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1317)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1318)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1319)

					var _m = p.Match(InterpreteTOOWNED)

					localctx.(*ExpressionContext)._TOOWNED = _m
				}
				{
					p.SetState(1320)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1321)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesnativas.NewToString(localctx.(*ExpressionContext).GetExp4().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_TOOWNED() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_TOOWNED().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_TOOWNED() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_TOOWNED().GetColumn()
					}
				}()))

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp5 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1323)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1324)

					var _m = p.Match(InterpreteCASTEO)

					localctx.(*ExpressionContext)._CASTEO = _m
				}
				{
					p.SetState(1325)

					var _x = p.Tipo()

					localctx.(*ExpressionContext)._tipo = _x
				}
				localctx.(*ExpressionContext).p = casteos.NewCasteo(localctx.(*ExpressionContext).GetExp5().GetP(), localctx.(*ExpressionContext).Get_tipo().GetTe(), (func() int {
					if localctx.(*ExpressionContext).Get_CASTEO() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_CASTEO().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_CASTEO() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_CASTEO().GetColumn()
					}
				}()))

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp6 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1328)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1329)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1330)

					var _m = p.Match(InterpreteABOSLU)

					localctx.(*ExpressionContext)._ABOSLU = _m
				}
				{
					p.SetState(1331)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1332)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesnativas.NewAbsoluto(localctx.(*ExpressionContext).GetExp6().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_ABOSLU() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_ABOSLU().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_ABOSLU() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_ABOSLU().GetColumn()
					}
				}()))

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp7 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1334)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1335)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1336)
					p.Match(InterpreteRAIZITA)
				}
				{
					p.SetState(1337)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1338)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesnativas.NewRaizCuadrada(localctx.(*ExpressionContext).GetExp7().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_ABOSLU() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_ABOSLU().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_ABOSLU() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_ABOSLU().GetColumn()
					}
				}()))

			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				localctx.(*ExpressionContext).exp9 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_expression)
				p.SetState(1340)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1341)
					p.Match(InterpretePNT)
				}
				{
					p.SetState(1342)

					var _m = p.Match(InterpreteCLONATION)

					localctx.(*ExpressionContext)._CLONATION = _m
				}
				{
					p.SetState(1343)
					p.Match(InterpretePARA)
				}
				{
					p.SetState(1344)
					p.Match(InterpretePARC)
				}
				localctx.(*ExpressionContext).p = funcionesnativas.NewClone(localctx.(*ExpressionContext).GetExp9().GetP(), (func() int {
					if localctx.(*ExpressionContext).Get_CLONATION() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_CLONATION().GetLine()
					}
				}()), (func() int {
					if localctx.(*ExpressionContext).Get_CLONATION() == nil {
						return 0
					} else {
						return localctx.(*ExpressionContext).Get_CLONATION().GetColumn()
					}
				}()))

			}

		}
		p.SetState(1350)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())
	}

	return localctx
}

// ILlamada_expreContext is an interface to support dynamic dispatch.
type ILlamada_expreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_PARA returns the _PARA token.
	Get_PARA() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_PARA sets the _PARA token.
	Set_PARA(antlr.Token)

	// GetLi returns the li rule contexts.
	GetLi() IParams_llamadaContext

	// SetLi sets the li rule contexts.
	SetLi(IParams_llamadaContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsLlamada_expreContext differentiates from other interfaces.
	IsLlamada_expreContext()
}

type Llamada_expreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      interfaces.Expresion
	_ID    antlr.Token
	_PARA  antlr.Token
	li     IParams_llamadaContext
}

func NewEmptyLlamada_expreContext() *Llamada_expreContext {
	var p = new(Llamada_expreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_llamada_expre
	return p
}

func (*Llamada_expreContext) IsLlamada_expreContext() {}

func NewLlamada_expreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Llamada_expreContext {
	var p = new(Llamada_expreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_llamada_expre

	return p
}

func (s *Llamada_expreContext) GetParser() antlr.Parser { return s.parser }

func (s *Llamada_expreContext) Get_ID() antlr.Token { return s._ID }

func (s *Llamada_expreContext) Get_PARA() antlr.Token { return s._PARA }

func (s *Llamada_expreContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Llamada_expreContext) Set_PARA(v antlr.Token) { s._PARA = v }

func (s *Llamada_expreContext) GetLi() IParams_llamadaContext { return s.li }

func (s *Llamada_expreContext) SetLi(v IParams_llamadaContext) { s.li = v }

func (s *Llamada_expreContext) GetP() interfaces.Expresion { return s.p }

func (s *Llamada_expreContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Llamada_expreContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Llamada_expreContext) PARA() antlr.TerminalNode {
	return s.GetToken(InterpretePARA, 0)
}

func (s *Llamada_expreContext) PARC() antlr.TerminalNode {
	return s.GetToken(InterpretePARC, 0)
}

func (s *Llamada_expreContext) Params_llamada() IParams_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParams_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParams_llamadaContext)
}

func (s *Llamada_expreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Llamada_expreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Llamada_expreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterLlamada_expre(s)
	}
}

func (s *Llamada_expreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitLlamada_expre(s)
	}
}

func (p *Interprete) Llamada_expre() (localctx ILlamada_expreContext) {
	localctx = NewLlamada_expreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, InterpreteRULE_llamada_expre)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1361)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1351)

			var _m = p.Match(InterpreteID)

			localctx.(*Llamada_expreContext)._ID = _m
		}
		{
			p.SetState(1352)

			var _m = p.Match(InterpretePARA)

			localctx.(*Llamada_expreContext)._PARA = _m
		}
		{
			p.SetState(1353)
			p.Match(InterpretePARC)
		}
		localctx.(*Llamada_expreContext).p = instruction.NewLlamada((func() string {
			if localctx.(*Llamada_expreContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_expreContext).Get_ID().GetText()
			}
		}()), arrayList.New(), (func() int {
			if localctx.(*Llamada_expreContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Llamada_expreContext).Get_PARA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Llamada_expreContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Llamada_expreContext).Get_PARA().GetColumn()
			}
		}()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1355)

			var _m = p.Match(InterpreteID)

			localctx.(*Llamada_expreContext)._ID = _m
		}
		{
			p.SetState(1356)

			var _m = p.Match(InterpretePARA)

			localctx.(*Llamada_expreContext)._PARA = _m
		}
		{
			p.SetState(1357)

			var _x = p.params_llamada(0)

			localctx.(*Llamada_expreContext).li = _x
		}
		{
			p.SetState(1358)
			p.Match(InterpretePARC)
		}
		localctx.(*Llamada_expreContext).p = instruction.NewLlamada((func() string {
			if localctx.(*Llamada_expreContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_expreContext).Get_ID().GetText()
			}
		}()), localctx.(*Llamada_expreContext).GetLi().GetL(), (func() int {
			if localctx.(*Llamada_expreContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Llamada_expreContext).Get_PARA().GetLine()
			}
		}()), (func() int {
			if localctx.(*Llamada_expreContext).Get_PARA() == nil {
				return 0
			} else {
				return localctx.(*Llamada_expreContext).Get_PARA().GetColumn()
			}
		}()))

	}

	return localctx
}

// IPrimitivoContext is an interface to support dynamic dispatch.
type IPrimitivoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_NUMBER returns the _NUMBER token.
	Get_NUMBER() antlr.Token

	// Get_FLOAT_NUM returns the _FLOAT_NUM token.
	Get_FLOAT_NUM() antlr.Token

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Get_CHAR_2 returns the _CHAR_2 token.
	Get_CHAR_2() antlr.Token

	// Set_NUMBER sets the _NUMBER token.
	Set_NUMBER(antlr.Token)

	// Set_FLOAT_NUM sets the _FLOAT_NUM token.
	Set_FLOAT_NUM(antlr.Token)

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// Set_CHAR_2 sets the _CHAR_2 token.
	Set_CHAR_2(antlr.Token)

	// Get_list_array returns the _list_array rule contexts.
	Get_list_array() IList_arrayContext

	// Set_list_array sets the _list_array rule contexts.
	Set_list_array(IList_arrayContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsPrimitivoContext differentiates from other interfaces.
	IsPrimitivoContext()
}

type PrimitivoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	_NUMBER     antlr.Token
	_FLOAT_NUM  antlr.Token
	op          antlr.Token
	_CADENA     antlr.Token
	_CHAR_2     antlr.Token
	_list_array IList_arrayContext
}

func NewEmptyPrimitivoContext() *PrimitivoContext {
	var p = new(PrimitivoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_primitivo
	return p
}

func (*PrimitivoContext) IsPrimitivoContext() {}

func NewPrimitivoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitivoContext {
	var p = new(PrimitivoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_primitivo

	return p
}

func (s *PrimitivoContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitivoContext) Get_NUMBER() antlr.Token { return s._NUMBER }

func (s *PrimitivoContext) Get_FLOAT_NUM() antlr.Token { return s._FLOAT_NUM }

func (s *PrimitivoContext) GetOp() antlr.Token { return s.op }

func (s *PrimitivoContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *PrimitivoContext) Get_CHAR_2() antlr.Token { return s._CHAR_2 }

func (s *PrimitivoContext) Set_NUMBER(v antlr.Token) { s._NUMBER = v }

func (s *PrimitivoContext) Set_FLOAT_NUM(v antlr.Token) { s._FLOAT_NUM = v }

func (s *PrimitivoContext) SetOp(v antlr.Token) { s.op = v }

func (s *PrimitivoContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *PrimitivoContext) Set_CHAR_2(v antlr.Token) { s._CHAR_2 = v }

func (s *PrimitivoContext) Get_list_array() IList_arrayContext { return s._list_array }

func (s *PrimitivoContext) Set_list_array(v IList_arrayContext) { s._list_array = v }

func (s *PrimitivoContext) GetP() interfaces.Expresion { return s.p }

func (s *PrimitivoContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *PrimitivoContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(InterpreteNUMBER, 0)
}

func (s *PrimitivoContext) FLOAT_NUM() antlr.TerminalNode {
	return s.GetToken(InterpreteFLOAT_NUM, 0)
}

func (s *PrimitivoContext) TRUE() antlr.TerminalNode {
	return s.GetToken(InterpreteTRUE, 0)
}

func (s *PrimitivoContext) FALSE() antlr.TerminalNode {
	return s.GetToken(InterpreteFALSE, 0)
}

func (s *PrimitivoContext) CADENA() antlr.TerminalNode {
	return s.GetToken(InterpreteCADENA, 0)
}

func (s *PrimitivoContext) CHAR_2() antlr.TerminalNode {
	return s.GetToken(InterpreteCHAR_2, 0)
}

func (s *PrimitivoContext) List_array() IList_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_arrayContext)
}

func (s *PrimitivoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitivoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitivoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterPrimitivo(s)
	}
}

func (s *PrimitivoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitPrimitivo(s)
	}
}

func (p *Interprete) Primitivo() (localctx IPrimitivoContext) {
	localctx = NewPrimitivoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, InterpreteRULE_primitivo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1376)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case InterpreteNUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1363)

			var _m = p.Match(InterpreteNUMBER)

			localctx.(*PrimitivoContext)._NUMBER = _m
		}

		num, err := strconv.Atoi((func() string {
			if localctx.(*PrimitivoContext).Get_NUMBER() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_NUMBER().GetText()
			}
		}()))
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(num, interfaces.INTEGER)

	case InterpreteFLOAT_NUM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1365)

			var _m = p.Match(InterpreteFLOAT_NUM)

			localctx.(*PrimitivoContext)._FLOAT_NUM = _m
		}

		num, err := strconv.ParseFloat((func() string {
			if localctx.(*PrimitivoContext).Get_FLOAT_NUM() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_FLOAT_NUM().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(num, interfaces.FLOAT)

	case InterpreteTRUE, InterpreteFALSE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1367)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*PrimitivoContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == InterpreteTRUE || _la == InterpreteFALSE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*PrimitivoContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		num, err := strconv.ParseBool((func() string {
			if localctx.(*PrimitivoContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).GetOp().GetText()
			}
		}()))
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)

	case InterpreteCADENA:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1369)

			var _m = p.Match(InterpreteCADENA)

			localctx.(*PrimitivoContext)._CADENA = _m
		}

		str := (func() string {
			if localctx.(*PrimitivoContext).Get_CADENA() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_CADENA().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*PrimitivoContext).Get_CADENA() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_CADENA().GetText()
			}
		}()))-1]
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(str, interfaces.STR)

	case InterpreteCHAR_2:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1371)

			var _m = p.Match(InterpreteCHAR_2)

			localctx.(*PrimitivoContext)._CHAR_2 = _m
		}

		str := (func() string {
			if localctx.(*PrimitivoContext).Get_CHAR_2() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_CHAR_2().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*PrimitivoContext).Get_CHAR_2() == nil {
				return ""
			} else {
				return localctx.(*PrimitivoContext).Get_CHAR_2().GetText()
			}
		}()))-1]
		localctx.(*PrimitivoContext).p = expresion.NewPrimitivo(str, interfaces.CHAR)

	case InterpreteID:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1373)

			var _x = p.list_array(0)

			localctx.(*PrimitivoContext)._list_array = _x
		}
		localctx.(*PrimitivoContext).p = localctx.(*PrimitivoContext).Get_list_array().GetP()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IList_arrayContext is an interface to support dynamic dispatch.
type IList_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_CORCHA returns the _CORCHA token.
	Get_CORCHA() antlr.Token

	// Get_CORCHC returns the _CORCHC token.
	Get_CORCHC() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_CORCHA sets the _CORCHA token.
	Set_CORCHA(antlr.Token)

	// Set_CORCHC sets the _CORCHC token.
	Set_CORCHC(antlr.Token)

	// GetLi returns the li rule contexts.
	GetLi() IList_arrayContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetLi sets the li rule contexts.
	SetLi(IList_arrayContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsList_arrayContext differentiates from other interfaces.
	IsList_arrayContext()
}

type List_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	li          IList_arrayContext
	_ID         antlr.Token
	_CORCHA     antlr.Token
	_expression IExpressionContext
	_CORCHC     antlr.Token
}

func NewEmptyList_arrayContext() *List_arrayContext {
	var p = new(List_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_list_array
	return p
}

func (*List_arrayContext) IsList_arrayContext() {}

func NewList_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_arrayContext {
	var p = new(List_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_list_array

	return p
}

func (s *List_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *List_arrayContext) Get_ID() antlr.Token { return s._ID }

func (s *List_arrayContext) Get_CORCHA() antlr.Token { return s._CORCHA }

func (s *List_arrayContext) Get_CORCHC() antlr.Token { return s._CORCHC }

func (s *List_arrayContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *List_arrayContext) Set_CORCHA(v antlr.Token) { s._CORCHA = v }

func (s *List_arrayContext) Set_CORCHC(v antlr.Token) { s._CORCHC = v }

func (s *List_arrayContext) GetLi() IList_arrayContext { return s.li }

func (s *List_arrayContext) Get_expression() IExpressionContext { return s._expression }

func (s *List_arrayContext) SetLi(v IList_arrayContext) { s.li = v }

func (s *List_arrayContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *List_arrayContext) GetP() interfaces.Expresion { return s.p }

func (s *List_arrayContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *List_arrayContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *List_arrayContext) CORCHA() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHA, 0)
}

func (s *List_arrayContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_arrayContext) CORCHC() antlr.TerminalNode {
	return s.GetToken(InterpreteCORCHC, 0)
}

func (s *List_arrayContext) List_array() IList_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_arrayContext)
}

func (s *List_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterList_array(s)
	}
}

func (s *List_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitList_array(s)
	}
}

func (p *Interprete) List_array() (localctx IList_arrayContext) {
	return p.list_array(0)
}

func (p *Interprete) list_array(_p int) (localctx IList_arrayContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewList_arrayContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IList_arrayContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 98
	p.EnterRecursionRule(localctx, 98, InterpreteRULE_list_array, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1379)

		var _m = p.Match(InterpreteID)

		localctx.(*List_arrayContext)._ID = _m
	}
	localctx.(*List_arrayContext).p = expresion.NewCallVariable((func() string {
		if localctx.(*List_arrayContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*List_arrayContext).Get_ID().GetText()
		}
	}()), (func() int {
		if localctx.(*List_arrayContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*List_arrayContext).Get_ID().GetLine()
		}
	}()), (func() int {
		if localctx.(*List_arrayContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*List_arrayContext).Get_ID().GetColumn()
		}
	}()))

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1390)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewList_arrayContext(p, _parentctx, _parentState)
			localctx.(*List_arrayContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_list_array)
			p.SetState(1382)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1383)

				var _m = p.Match(InterpreteCORCHA)

				localctx.(*List_arrayContext)._CORCHA = _m
			}
			{
				p.SetState(1384)

				var _x = p.expression(0)

				localctx.(*List_arrayContext)._expression = _x
			}
			{
				p.SetState(1385)

				var _m = p.Match(InterpreteCORCHC)

				localctx.(*List_arrayContext)._CORCHC = _m
			}
			localctx.(*List_arrayContext).p = arrays.NewArrayAccess(localctx.(*List_arrayContext).GetLi().GetP(), localctx.(*List_arrayContext).Get_expression().GetP(), (func() int {
				if localctx.(*List_arrayContext).Get_CORCHA() == nil {
					return 0
				} else {
					return localctx.(*List_arrayContext).Get_CORCHA().GetLine()
				}
			}()), (func() int {
				if localctx.(*List_arrayContext).Get_CORCHC() == nil {
					return 0
				} else {
					return localctx.(*List_arrayContext).Get_CORCHC().GetColumn()
				}
			}()))

		}
		p.SetState(1392)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())
	}

	return localctx
}

// ILlamadas_structsContext is an interface to support dynamic dispatch.
type ILlamadas_structsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_PNT returns the _PNT token.
	Get_PNT() antlr.Token

	// GetId2 returns the id2 token.
	GetId2() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_PNT sets the _PNT token.
	Set_PNT(antlr.Token)

	// SetId2 sets the id2 token.
	SetId2(antlr.Token)

	// GetLi returns the li rule contexts.
	GetLi() ILlamadas_structsContext

	// SetLi sets the li rule contexts.
	SetLi(ILlamadas_structsContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsLlamadas_structsContext differentiates from other interfaces.
	IsLlamadas_structsContext()
}

type Llamadas_structsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      interfaces.Expresion
	li     ILlamadas_structsContext
	_ID    antlr.Token
	_PNT   antlr.Token
	id2    antlr.Token
}

func NewEmptyLlamadas_structsContext() *Llamadas_structsContext {
	var p = new(Llamadas_structsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = InterpreteRULE_llamadas_structs
	return p
}

func (*Llamadas_structsContext) IsLlamadas_structsContext() {}

func NewLlamadas_structsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Llamadas_structsContext {
	var p = new(Llamadas_structsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = InterpreteRULE_llamadas_structs

	return p
}

func (s *Llamadas_structsContext) GetParser() antlr.Parser { return s.parser }

func (s *Llamadas_structsContext) Get_ID() antlr.Token { return s._ID }

func (s *Llamadas_structsContext) Get_PNT() antlr.Token { return s._PNT }

func (s *Llamadas_structsContext) GetId2() antlr.Token { return s.id2 }

func (s *Llamadas_structsContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Llamadas_structsContext) Set_PNT(v antlr.Token) { s._PNT = v }

func (s *Llamadas_structsContext) SetId2(v antlr.Token) { s.id2 = v }

func (s *Llamadas_structsContext) GetLi() ILlamadas_structsContext { return s.li }

func (s *Llamadas_structsContext) SetLi(v ILlamadas_structsContext) { s.li = v }

func (s *Llamadas_structsContext) GetP() interfaces.Expresion { return s.p }

func (s *Llamadas_structsContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Llamadas_structsContext) ID() antlr.TerminalNode {
	return s.GetToken(InterpreteID, 0)
}

func (s *Llamadas_structsContext) PNT() antlr.TerminalNode {
	return s.GetToken(InterpretePNT, 0)
}

func (s *Llamadas_structsContext) Llamadas_structs() ILlamadas_structsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamadas_structsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamadas_structsContext)
}

func (s *Llamadas_structsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Llamadas_structsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Llamadas_structsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.EnterLlamadas_structs(s)
	}
}

func (s *Llamadas_structsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(InterpreteListener); ok {
		listenerT.ExitLlamadas_structs(s)
	}
}

func (p *Interprete) Llamadas_structs() (localctx ILlamadas_structsContext) {
	return p.llamadas_structs(0)
}

func (p *Interprete) llamadas_structs(_p int) (localctx ILlamadas_structsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLlamadas_structsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILlamadas_structsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 100
	p.EnterRecursionRule(localctx, 100, InterpreteRULE_llamadas_structs, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1394)

		var _m = p.Match(InterpreteID)

		localctx.(*Llamadas_structsContext)._ID = _m
	}
	localctx.(*Llamadas_structsContext).p = expresion.NewCallVariable((func() string {
		if localctx.(*Llamadas_structsContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*Llamadas_structsContext).Get_ID().GetText()
		}
	}()), (func() int {
		if localctx.(*Llamadas_structsContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*Llamadas_structsContext).Get_ID().GetLine()
		}
	}()), (func() int {
		if localctx.(*Llamadas_structsContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*Llamadas_structsContext).Get_ID().GetColumn()
		}
	}()))

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1403)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLlamadas_structsContext(p, _parentctx, _parentState)
			localctx.(*Llamadas_structsContext).li = _prevctx
			p.PushNewRecursionContext(localctx, _startState, InterpreteRULE_llamadas_structs)
			p.SetState(1397)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1398)

				var _m = p.Match(InterpretePNT)

				localctx.(*Llamadas_structsContext)._PNT = _m
			}
			{
				p.SetState(1399)

				var _m = p.Match(InterpreteID)

				localctx.(*Llamadas_structsContext).id2 = _m
			}
			localctx.(*Llamadas_structsContext).p = structs.NewStruct_Acces(localctx.(*Llamadas_structsContext).GetLi().GetP(), (func() string {
				if localctx.(*Llamadas_structsContext).GetId2() == nil {
					return ""
				} else {
					return localctx.(*Llamadas_structsContext).GetId2().GetText()
				}
			}()), (func() int {
				if localctx.(*Llamadas_structsContext).Get_PNT() == nil {
					return 0
				} else {
					return localctx.(*Llamadas_structsContext).Get_PNT().GetLine()
				}
			}()), (func() int {
				if localctx.(*Llamadas_structsContext).Get_PNT() == nil {
					return 0
				} else {
					return localctx.(*Llamadas_structsContext).Get_PNT().GetColumn()
				}
			}()))

		}
		p.SetState(1405)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())
	}

	return localctx
}

func (p *Interprete) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 4:
		var t *Intructions_modulosContext = nil
		if localctx != nil {
			t = localctx.(*Intructions_modulosContext)
		}
		return p.Intructions_modulos_Sempred(t, predIndex)

	case 7:
		var t *Atributos_structContext = nil
		if localctx != nil {
			t = localctx.(*Atributos_structContext)
		}
		return p.Atributos_struct_Sempred(t, predIndex)

	case 10:
		var t *Params_funcionContext = nil
		if localctx != nil {
			t = localctx.(*Params_funcionContext)
		}
		return p.Params_funcion_Sempred(t, predIndex)

	case 13:
		var t *Params_llamadaContext = nil
		if localctx != nil {
			t = localctx.(*Params_llamadaContext)
		}
		return p.Params_llamada_Sempred(t, predIndex)

	case 23:
		var t *Matchexpr_listbrazosContext = nil
		if localctx != nil {
			t = localctx.(*Matchexpr_listbrazosContext)
		}
		return p.Matchexpr_listbrazos_Sempred(t, predIndex)

	case 32:
		var t *List_expre_printContext = nil
		if localctx != nil {
			t = localctx.(*List_expre_printContext)
		}
		return p.List_expre_print_Sempred(t, predIndex)

	case 33:
		var t *List_expre_vec_arrContext = nil
		if localctx != nil {
			t = localctx.(*List_expre_vec_arrContext)
		}
		return p.List_expre_vec_arr_Sempred(t, predIndex)

	case 36:
		var t *Match_listbrazosContext = nil
		if localctx != nil {
			t = localctx.(*Match_listbrazosContext)
		}
		return p.Match_listbrazos_Sempred(t, predIndex)

	case 38:
		var t *Match_listbrazos_listexprContext = nil
		if localctx != nil {
			t = localctx.(*Match_listbrazos_listexprContext)
		}
		return p.Match_listbrazos_listexpr_Sempred(t, predIndex)

	case 43:
		var t *Expression_vec_ArrContext = nil
		if localctx != nil {
			t = localctx.(*Expression_vec_ArrContext)
		}
		return p.Expression_vec_Arr_Sempred(t, predIndex)

	case 44:
		var t *Atributos_struct_expContext = nil
		if localctx != nil {
			t = localctx.(*Atributos_struct_expContext)
		}
		return p.Atributos_struct_exp_Sempred(t, predIndex)

	case 46:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 49:
		var t *List_arrayContext = nil
		if localctx != nil {
			t = localctx.(*List_arrayContext)
		}
		return p.List_array_Sempred(t, predIndex)

	case 50:
		var t *Llamadas_structsContext = nil
		if localctx != nil {
			t = localctx.(*Llamadas_structsContext)
		}
		return p.Llamadas_structs_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *Interprete) Intructions_modulos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Atributos_struct_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Params_funcion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Params_llamada_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Matchexpr_listbrazos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) List_expre_print_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) List_expre_vec_arr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Match_listbrazos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Match_listbrazos_listexpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Expression_vec_Arr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 7)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Atributos_struct_exp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 15:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 16:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 28:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 29:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) List_array_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 30:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Interprete) Llamadas_structs_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 31:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
