2022-05-03 11:39:53:828 grammar LogManager.java:25 before: (PARSER_GRAMMAR Interprete (OPTIONS (= tokenVocab Interprete_lex)) (@ header { 
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
        $l = arrayList.New()   
    }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
            listInt := localctx.(*InstruccionesContext).GetE()
                for _, e := range listInt { 
                    $l.Add(e.GetInstr())
                 }
            }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printaso PYC { $instr = $printaso.instr }) (ALT printaso { $instr = $printaso.instr }) (ALT declaracion { $instr = $declaracion.instr }) (ALT vector_decl { $instr = $vector_decl.instr }) (ALT array_decl { $instr = $array_decl.instr }) (ALT asignacion { $instr = $asignacion.instr }) (ALT sent_if { $instr = $sent_if.instr }) (ALT sent_loop { $instr = $sent_loop.instr }) (ALT sent_while { $instr = $sent_while.instr }) (ALT sent_match { $instr = $sent_match.instr }) (ALT sent_funciones_Vec { $instr = $sent_funciones_Vec.instr }) (ALT sent_ForIn { $instr = $sent_ForIn.instr }) (ALT funciones_Trans { $instr = $funciones_Trans.instr }) (ALT sent_funcion { $instr = $sent_funcion.instr }) (ALT sent_Llamada { $instr = $sent_Llamada.instr }) (ALT sent_struct { $instr = $sent_struct.instr }) (ALT sent_Modulos { $instr = $sent_Modulos.instr }))) (RULE sent_Modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT PUBLI MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PUBLICO, $li.l, $MODULO.line, $MODULO.pos) }) (ALT MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PRIVADO, $li.l, $MODULO.line, $MODULO.pos) }))) (RULE intructions_modulos (returns  *arrayList.List l ) (BLOCK (ALT (= li intructions_modulos) instruct_modulos { 
        $li.l.Add($instruct_modulos.instr)  
        $l = $li.l
     }) (ALT instruct_modulos { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     }))) (RULE instruct_modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT sent_Modulos { $instr = $sent_Modulos.instr }) (ALT PUBLI sent_funcion { $instr = modulos.NewFuncion_Mod( $sent_funcion.instr, interfaces.PUBLICO, $PUBLI.line, $PUBLI.pos ) }) (ALT (= sf sent_funcion) { $instr = modulos.NewFuncion_Mod( $sf.instr, interfaces.PRIVADO, 0, 0 ) }) (ALT PUBLI sent_struct { $instr = modulos.NewStruct_Mod( $sent_struct.instr, interfaces.PUBLICO , $PUBLI.line, $PUBLI.pos ) }) (ALT (= ss sent_struct) { $instr = modulos.NewStruct_Mod( $ss.instr, interfaces.PUBLICO , 0, 0 ) }))) (RULE sent_struct (returns  interfaces.Instruction instr ) (BLOCK (ALT STRUCT ID LLAVEA atributos_struct LLAVEC { $instr = structs.NewStruct($ID.text, $atributos_struct.l,$STRUCT.line,$STRUCT.pos) }))) (RULE atributos_struct (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct) COMA (= asd atributos_struct_decl) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    }))) (RULE atributos_struct_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS array_decl_array {$s = interfaces.Symbol{ Id: $ID.text, Tipo: 6}}) (ALT ID DPTS vector_decl { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te} }) (ALT (= id1 ID) DPTS (= id2 ID) { $s = interfaces.Symbol{ Id: $id1.text, Tipo: 9, Valor: $id2.text} }))) (RULE sent_funcion (returns  interfaces.Instruction instr ) (BLOCK (ALT FUNCT ID PARA PARC LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($id1.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA params_funcion PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($id1.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }))) (RULE params_funcion (returns  *arrayList.List l ) (BLOCK (ALT (= li params_funcion) COMA params_funcion_decl {
        $li.l.Add($params_funcion_decl.s)  
        $l = $li.l
    }) (ALT params_funcion_decl { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     }))) (RULE params_funcion_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS PUNTERO MUT array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: true} }) (ALT ID DPTS PUNTERO array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: false} }) (ALT ID DPTS PUNTERO MUT vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: true} }) (ALT ID DPTS PUNTERO vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: false} }) (ALT ID DPTS MUT tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: true} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: false} }))) (RULE sent_Llamada (returns  interfaces.Instruction instr ) (BLOCK (ALT ID PARA PARC PYC { $instr = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC PYC { $instr = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE params_llamada (returns  *arrayList.List l ) (BLOCK (ALT (= li params_llamada) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT (= li params_llamada) COMA PUNTERO MUT expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }) (ALT PUNTERO MUT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE funciones_Trans (returns interfaces.Instruction instr) (BLOCK (ALT BRE PYC { $instr = sentenciatransferencia.NewBreak( nil, $BRE.line, $BRE.pos ) }) (ALT BRE expression PYC { $instr = sentenciatransferencia.NewBreak( $expression.p, $BRE.line, $BRE.pos ) }) (ALT CONTINIU PYC { $instr = sentenciatransferencia.NewContinue($CONTINIU.line, $CONTINIU.pos) }) (ALT RETURNASO PYC { $instr = sentenciatransferencia.NewReturnaso(nil, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression PYC { $instr = sentenciatransferencia.NewReturnaso($expression.p, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression_vec_Arr PYC { $instr = sentenciatransferencia.NewReturnaso($expression_vec_Arr.p, $RETURNASO.line, $RETURNASO.pos) }))) (RULE declaracion (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT (= id1 ID) DPTS (= id2 ID) IGUAL expression PYC { 
        var a interfaces.TipoExpresion
        $instr = instruction.NewDeclaration($id1.text, a, $id2.text, $expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET (= id1 ID) DPTS (= id2 ID) IGUAL expression PYC { 
        var a interfaces.TipoExpresion
        $instr = instruction.NewDeclaration($id1.text, a, $id2.text ,$expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$sentencias_expr.p, true,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        }))) (RULE array_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC { 
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC {
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, false, $LET.line,$LET.pos) 
    }))) (RULE array_decl_array (returns  *structsinter.Array_type at ) (BLOCK (ALT CORCHA (= stru array_decl_array) PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $stru.at.Tipo,
                Size: $expression_vec_Arr.p,
                Array_Son: $stru.at,
	        }
        $at = a 
    }) (ALT CORCHA tipo PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $tipo.te,
                Size: $expression_vec_Arr.p,
                Array_Son: nil,
	        }
        $at = a
    }))) (RULE vector_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,true, $LET.line,$LET.pos) 
    }) (ALT LET MUT (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,false, $LET.line,$LET.pos) 
    }) (ALT LET (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,false, $LET.line,$LET.pos) 
    }))) (RULE vector_expr (returns  interfaces.Expresion p ) (BLOCK (ALT VEC EXCLA CORCHA list_expre_vec_arr CORCHC { 
        var a,b,c interfaces.Expresion
        $p = vector.NewVector( $list_expre_vec_arr.l, a , b , false,c,$CORCHA.line, $CORCHA.pos  ) 
        }) (ALT VEC EXCLA CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { 
        var a interfaces.Expresion
        $p = vector.NewVector( arrayList.New(), $exp1.p, $exp2.p ,false, a ,$CORCHA.line, $CORCHA.pos) 
        }) (ALT VEC DPTS DPTS NEWI PARA PARC { 
        var a,b,c interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,true,c,$NEWI.line,$NEWI.pos) 
    }) (ALT VEC DPTS DPTS WITH_CAP PARA expression_vec_Arr PARC { 
        var a,b interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,false,$expression_vec_Arr.p,$WITH_CAP.line,$WITH_CAP.pos) 
    }))) (RULE sent_funciones_Vec (returns  interfaces.Instruction instr ) (BLOCK (ALT (= exp1 expression) PNT PUSH PARA (= exp2 expression) PARC PYC { 
        $instr = funcionesvectores.NewPush($exp1.p, $exp2.p, $PUSH.line, $PUSH.pos) 
    }) (ALT ID PNT INSERT PARA (= exp1 expression) COMA (= exp2 expression) PARC PYC { 
        $instr = funcionesvectores.NewInsert($ID.text, $exp1.p, $exp2.p, $INSERT.line, $INSERT.pos) 
    }) (ALT ID PNT REMOVE PARA expression PARC PYC { 
        $instr = funcionesvectores.NewRemove_instr($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
    }))) (RULE sentencias_expr (returns  interfaces.Expresion p ) (BLOCK (ALT sent_if_expr PYC { $p = $sent_if_expr.p }) (ALT sent_loop_expr { $p = $sent_loop_expr.p }) (ALT sent_matchexpr { $p = $sent_matchexpr.p }))) (RULE sent_matchexpr (returns  interfaces.Expresion p ) (BLOCK (ALT MATCH expression LLAVEA matchexpr_listbrazos el_defaultexpr LLAVEC { 
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
        }) (ALT MATCH expression LLAVEA matchexpr_listbrazos LLAVEC {
        var a interfaces.Expresion
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, a, $MATCH.line,$MATCH.pos)
    }) (ALT MATCH expression LLAVEA el_defaultexpr LLAVEC {
        $p = matchexpr.NewMatch_Expr($expression.p, arrayList.New(), $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
    }))) (RULE matchexpr_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= brz matchexpr_listbrazos) list_brazosexpr {
        $brz.l.Add($list_brazosexpr.p)
        $l = $brz.l
    }) (ALT list_brazosexpr {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    }))) (RULE list_brazosexpr (returns  interfaces.Expresion p ) (BLOCK (ALT (= po expression) IGUAL MAYOR (= pi expression) COMA { 
        a := arrayList.New()
        a.Add($po.p)
        $p = matchexpr.NewBrazo_expr(a, $pi.p, $IGUAL.line , $IGUAL.pos)
     }) (ALT (= exp matchexpr_listbrazosexpr_listexpr) IGUAL MAYOR expression COMA { $p = matchexpr.NewBrazo_expr( $exp.l , $expression.p ,$IGUAL.line, $IGUAL.pos ) }))) (RULE matchexpr_listbrazosexpr_listexpr (returns   *arrayList.List l ) (BLOCK (ALT (= g match_listbrazos_listexpr) OR_MATCH expression {
        $g.l.Add($expression.p)
        $l = $g.l
    }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE el_defaultexpr (returns  interfaces.Expresion p ) (BLOCK (ALT DEFAUL IGUAL MAYOR expression COMA { $p = matchexpr.NewDefault_Expr($expression.p, $DEFAUL.line, $DEFAUL.pos) }))) (RULE tipo (returns  interfaces.TipoExpresion te) (BLOCK (ALT INT { $te = 0 }) (ALT FLOAT { $te = 1 }) (ALT STR { $te = 2 }) (ALT BOOLEAN { $te = 3}) (ALT CHAR { $te = 7 }) (ALT STRING { $te = 8 }) (ALT USIZE { $te = 13 }))) (RULE asignacion (returns  interfaces.Instruction instr ) (BLOCK (ALT ID IGUAL expression PYC { 
        a := arrayList.New()
        $instr = instruction.NewAsignacion($ID.text, $expression.p, "" , a ,$ID.line, $ID.pos) 
        }) (ALT (= id1 ID) PNT (= id2 ID) IGUAL expression PYC { 
        a := arrayList.New()
        $instr = instruction.NewAsignacion($id1.text, $expression.p, $id2.text , a ,$ID.line, $ID.pos) 
        }) (ALT ID (= list asig_array_vect) IGUAL expression PYC {
        $instr = instruction.NewAsignacion($ID.text, $expression.p, "" , $list.l ,$ID.line, $ID.pos) 
    }))) (RULE asig_array_vect (returns  *arrayList.List l ) (BLOCK (ALT (= li asig_array_vect) CORCHA expression CORCHC {
        $li.l.Add($expression.p)  
        $l = $li.l
    }) (ALT CORCHA expression CORCHC {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE sent_if_expr (returns interfaces.Expresion p ) (BLOCK (ALT IF (= ini expression) LLAVEA (= instru sent_instru_if_expre) LLAVEC { 
        b := arrayList.New()
        $p = sentenciasexpr.NewIf_expr($ini.p, $instru.l,b, $IF.line, $IF.pos   ) 
        }) (ALT IF (= ini expression) LLAVEA (= instru sent_instru_if_expre) LLAVEC ELSE LLAVEA (= instru2 sent_instru_if_expre) LLAVEC { 
        $p = sentenciasexpr.NewIf_expr($ini.p, $instru.l, $instru2.l , $IF.line, $IF.pos ) 
        }) (ALT IF (= ini expression) LLAVEA (= instru sent_instru_if_expre) LLAVEC ELSE (= sent sent_if_expr) { 
        a := arrayList.New()
        a.Add($sent.p)
        $p = sentenciasexpr.NewIf_expr($ini.p,$instru.l,a, $IF.line, $IF.pos   )  
        }))) (RULE sent_instru_if_expre (returns  *arrayList.List l ) (BLOCK (ALT (= in instrucciones) (= ex expression) { 
        $in.l.Add($ex.p)
        $l = $in.l
     }) (ALT (= ex expression) {
        a := arrayList.New()
        a.Add($ex.p)
        $l = a
    }))) (RULE sent_loop_expr (returns  interfaces.Expresion p ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $p = sentenciasexpr.NewLoop_expr($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE printaso (returns  interfaces.Instruction instr ) (BLOCK (ALT PRINT EXCLA PARA expression PARC { 
         a := arrayList.New()
        $instr = instruction.NewImprimir($expression.p, a, $PRINT.line, $PRINT.pos) 
        }) (ALT PRINT EXCLA PARA expression COMA (= li list_expre_print) PARC {  $instr = instruction.NewImprimir($expression.p, $li.l, $PRINT.line, $PRINT.pos)  }))) (RULE list_expre_print (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_print) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE list_expre_vec_arr (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_vec_arr) COMA expression_vec_Arr { 
        $li.l.Add($expression_vec_Arr.p)  
        $l = $li.l
        }) (ALT expression_vec_Arr {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    }))) (RULE sent_if (returns  interfaces.Instruction instr ) (BLOCK (ALT IF expression LLAVEA instrucciones LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $instrucciones.l, arrayList.New(), $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE LLAVEA (= ins2 instrucciones) LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, $ins2.l, $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE (= sent sent_if) { 
        a := arrayList.New()
        a.Add($sent.instr)
        $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, a , $IF.line,$IF.pos) }))) (RULE sent_match (returns  interfaces.Instruction instr ) (BLOCK (ALT MATCH expression LLAVEA match_listbrazos el_default LLAVEC { $instr = match.NewMatch($expression.p, $match_listbrazos.l, $el_default.instr, $MATCH.line, $MATCH.pos) }) (ALT MATCH expression LLAVEA el_default LLAVEC {$instr = match.NewMatch($expression.p, arrayList.New(), $el_default.instr, $MATCH.line, $MATCH.pos)}))) (RULE match_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= braz match_listbrazos) list_brazos { 
    $braz.l.Add($list_brazos.instr)
     $l = $braz.l
     }) (ALT list_brazos {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    }))) (RULE list_brazos (returns  interfaces.Instruction instr ) (BLOCK (ALT expression IGUAL MAYOR LLAVEA instrucciones LLAVEC { 
        a := arrayList.New()
        a.Add($expression.p)
        $instr = match.NewBrazo(a, $instrucciones.l, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewBrazo($exprs.l, $instrucciones.l, $IGUAL.line, $IGUAL.pos)  }) (ALT expression IGUAL MAYOR instruccion COMA {
        a := arrayList.New()
        a.Add($expression.p)
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo(a, b, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR instruccion COMA {
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo($exprs.l, b, $IGUAL.line, $IGUAL.pos)
        }))) (RULE match_listbrazos_listexpr (returns  *arrayList.List l ) (BLOCK (ALT (= h match_listbrazos_listexpr) OR_MATCH expression { 
        $h.l.Add($expression.p)
        $l = $h.l
     }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        }))) (RULE el_default (returns  interfaces.Instruction instr ) (BLOCK (ALT DEFAUL IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewDefault($instrucciones.l , $DEFAUL.line, $DEFAUL.pos) }) (ALT DEFAUL IGUAL MAYOR instruccion COMA { 
        a := arrayList.New()
        a.Add($instruccion.instr)
        $instr = match.NewDefault(a , $DEFAUL.line, $DEFAUL.pos)  
        }))) (RULE sent_loop (returns  interfaces.Instruction instr ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewLoop($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE sent_while (returns  interfaces.Instruction instr ) (BLOCK (ALT WHILE expression LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewWhile($expression.p , $instrucciones.l , $WHILE.line, $WHILE.pos) }))) (RULE sent_ForIn (returns  interfaces.Instruction instr ) (BLOCK (ALT FOR ID IN (= exp1 expression) PNT PNT (= exp2 expression) LLAVEA instrucciones LLAVEC {
        var a interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, $exp1.p, $exp2.p,a, $instrucciones.l, $IN.line, $IN.pos )
    }) (ALT FOR ID IN (= exp expression_vec_Arr) LLAVEA instrucciones LLAVEC {
        var a,b interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, a,b, $exp.p , $instrucciones.l, $IN.line, $IN.pos )
    }))) (RULE expression_vec_Arr (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= opIz expression_vec_Arr) (= op MODUL) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (BLOCK (ALT MUL) (ALT DIV))) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (BLOCK (ALT SUM) (ALT REST))) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IGUALACION) (ALT DIFERENCIACION))) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression_vec_Arr PARC { $p = $expression_vec_Arr.p}) (ALT (= opIz expression_vec_Arr) (= ope (BLOCK (ALT AND) (ALT OR))) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT CORCHA list_expre_vec_arr CORCHC { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        }) (ALT CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT vector_expr { $p = $vector_expr.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE atributos_struct_exp (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct_exp) COMA (= asd atributos_struct_decl_exp) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl_exp {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    }))) (RULE atributos_struct_decl_exp (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS (= exp2 expression) {$s = interfaces.Symbol{ Id: $ID.text, Valor: $exp2.p } }) (ALT ID DPTS (= exp expression_vec_Arr) {$s = interfaces.Symbol{ Id: $ID.text,  Valor:$exp.p }}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT (= exp4 expression) PNT TOSTRING PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= exp11 expression) PNT CAPACITY PARA PARC { $p = funcionesvectores.NewCapacity($exp11.p, $CAPACITY.line, $CAPACITY.pos) }) (ALT (= exp8 expression) PNT LEN PARA PARC { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }) (ALT (= opIz expression) (= op MODUL) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression) (= ope (BLOCK (ALT MUL) (ALT DIV))) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression) (= ope (BLOCK (ALT SUM) (ALT REST))) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= ope REST) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT (= ope REST) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IGUALACION) (ALT DIFERENCIACION))) (= opDe expression) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= ope (BLOCK (ALT AND) (ALT OR))) (= opDe expression) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT ID PNT REMOVE PARA expression PARC { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) }) (ALT (= exp8 expression) PNT CONTAINS PARA PUNTERO expression PARC { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT (= exp4 expression) PNT TOOWNED PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }) (ALT (= exp5 expression) CASTEO tipo { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }) (ALT (= exp6 expression) PNT ABOSLU PARA PARC { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp7 expression) PNT RAIZITA PARA PARC { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp9 expression) PNT CLONATION PARA PARC { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }) (ALT ID LLAVEA (= li atributos_struct_exp) LLAVEC { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) }) (ALT llamadas_structs { $p =  $llamadas_structs.p }) (ALT llamada_expre { $p = $llamada_expre.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE llamada_expre (returns interfaces.Expresion p) (BLOCK (ALT ID PARA PARC { $p = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC { $p = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE primitivo (returns  interfaces.Expresion p) (BLOCK (ALT NUMBER { 
            num, err:= strconv.Atoi($NUMBER.text)
            if err !=nil{ 
                fmt.Println(err)
            }   
            $p = expresion.NewPrimitivo (num, interfaces.INTEGER)
     }) (ALT FLOAT_NUM {
        num, err:= strconv.ParseFloat($FLOAT_NUM.text, 64)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.FLOAT)
    }) (ALT (= op (BLOCK (ALT TRUE) (ALT FALSE))) {
        num, err:= strconv.ParseBool($op.text)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)
    }) (ALT CADENA { 
        str:= $CADENA.text[1:len($CADENA.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.STR)
     }) (ALT CHAR_2 {
        str:= $CHAR_2.text[1:len($CHAR_2.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.CHAR)
    }) (ALT list_array { $p = $list_array.p }))) (RULE list_array (returns  interfaces.Expresion p ) (BLOCK (ALT (= li list_array) CORCHA expression CORCHC { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) }))) (RULE llamadas_structs (returns  interfaces.Expresion p ) (BLOCK (ALT (= li llamadas_structs) PNT (= id2 ID) { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })))))
2022-05-03 11:39:53:882 grammar LogManager.java:25 after: (PARSER_GRAMMAR Interprete (OPTIONS (= tokenVocab Interprete_lex)) (@ header { 
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
        $l = arrayList.New()   
    }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
            listInt := localctx.(*InstruccionesContext).GetE()
                for _, e := range listInt { 
                    $l.Add(e.GetInstr())
                 }
            }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printaso PYC { $instr = $printaso.instr }) (ALT printaso { $instr = $printaso.instr }) (ALT declaracion { $instr = $declaracion.instr }) (ALT vector_decl { $instr = $vector_decl.instr }) (ALT array_decl { $instr = $array_decl.instr }) (ALT asignacion { $instr = $asignacion.instr }) (ALT sent_if { $instr = $sent_if.instr }) (ALT sent_loop { $instr = $sent_loop.instr }) (ALT sent_while { $instr = $sent_while.instr }) (ALT sent_match { $instr = $sent_match.instr }) (ALT sent_funciones_Vec { $instr = $sent_funciones_Vec.instr }) (ALT sent_ForIn { $instr = $sent_ForIn.instr }) (ALT funciones_Trans { $instr = $funciones_Trans.instr }) (ALT sent_funcion { $instr = $sent_funcion.instr }) (ALT sent_Llamada { $instr = $sent_Llamada.instr }) (ALT sent_struct { $instr = $sent_struct.instr }) (ALT sent_Modulos { $instr = $sent_Modulos.instr }))) (RULE sent_Modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT PUBLI MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PUBLICO, $li.l, $MODULO.line, $MODULO.pos) }) (ALT MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PRIVADO, $li.l, $MODULO.line, $MODULO.pos) }))) (RULE intructions_modulos (returns  *arrayList.List l ) (BLOCK (ALT (= li intructions_modulos) instruct_modulos { 
        $li.l.Add($instruct_modulos.instr)  
        $l = $li.l
     }) (ALT instruct_modulos { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     }))) (RULE instruct_modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT sent_Modulos { $instr = $sent_Modulos.instr }) (ALT PUBLI sent_funcion { $instr = modulos.NewFuncion_Mod( $sent_funcion.instr, interfaces.PUBLICO, $PUBLI.line, $PUBLI.pos ) }) (ALT (= sf sent_funcion) { $instr = modulos.NewFuncion_Mod( $sf.instr, interfaces.PRIVADO, 0, 0 ) }) (ALT PUBLI sent_struct { $instr = modulos.NewStruct_Mod( $sent_struct.instr, interfaces.PUBLICO , $PUBLI.line, $PUBLI.pos ) }) (ALT (= ss sent_struct) { $instr = modulos.NewStruct_Mod( $ss.instr, interfaces.PUBLICO , 0, 0 ) }))) (RULE sent_struct (returns  interfaces.Instruction instr ) (BLOCK (ALT STRUCT ID LLAVEA atributos_struct LLAVEC { $instr = structs.NewStruct($ID.text, $atributos_struct.l,$STRUCT.line,$STRUCT.pos) }))) (RULE atributos_struct (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct) COMA (= asd atributos_struct_decl) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    }))) (RULE atributos_struct_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS array_decl_array {$s = interfaces.Symbol{ Id: $ID.text, Tipo: 6}}) (ALT ID DPTS vector_decl { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te} }) (ALT (= id1 ID) DPTS (= id2 ID) { $s = interfaces.Symbol{ Id: $id1.text, Tipo: 9, Valor: $id2.text} }))) (RULE sent_funcion (returns  interfaces.Instruction instr ) (BLOCK (ALT FUNCT ID PARA PARC LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($id1.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA params_funcion PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($id1.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }))) (RULE params_funcion (returns  *arrayList.List l ) (BLOCK (ALT (= li params_funcion) COMA params_funcion_decl {
        $li.l.Add($params_funcion_decl.s)  
        $l = $li.l
    }) (ALT params_funcion_decl { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     }))) (RULE params_funcion_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS PUNTERO MUT array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: true} }) (ALT ID DPTS PUNTERO array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: false} }) (ALT ID DPTS PUNTERO MUT vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: true} }) (ALT ID DPTS PUNTERO vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: false} }) (ALT ID DPTS MUT tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: true} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: false} }))) (RULE sent_Llamada (returns  interfaces.Instruction instr ) (BLOCK (ALT ID PARA PARC PYC { $instr = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC PYC { $instr = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE params_llamada (returns  *arrayList.List l ) (BLOCK (ALT (= li params_llamada) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT (= li params_llamada) COMA PUNTERO MUT expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }) (ALT PUNTERO MUT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE funciones_Trans (returns interfaces.Instruction instr) (BLOCK (ALT BRE PYC { $instr = sentenciatransferencia.NewBreak( nil, $BRE.line, $BRE.pos ) }) (ALT BRE expression PYC { $instr = sentenciatransferencia.NewBreak( $expression.p, $BRE.line, $BRE.pos ) }) (ALT CONTINIU PYC { $instr = sentenciatransferencia.NewContinue($CONTINIU.line, $CONTINIU.pos) }) (ALT RETURNASO PYC { $instr = sentenciatransferencia.NewReturnaso(nil, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression PYC { $instr = sentenciatransferencia.NewReturnaso($expression.p, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression_vec_Arr PYC { $instr = sentenciatransferencia.NewReturnaso($expression_vec_Arr.p, $RETURNASO.line, $RETURNASO.pos) }))) (RULE declaracion (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT (= id1 ID) DPTS (= id2 ID) IGUAL expression PYC { 
        var a interfaces.TipoExpresion
        $instr = instruction.NewDeclaration($id1.text, a, $id2.text, $expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET (= id1 ID) DPTS (= id2 ID) IGUAL expression PYC { 
        var a interfaces.TipoExpresion
        $instr = instruction.NewDeclaration($id1.text, a, $id2.text ,$expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$sentencias_expr.p, true,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        }))) (RULE array_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC { 
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC {
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, false, $LET.line,$LET.pos) 
    }))) (RULE array_decl_array (returns  *structsinter.Array_type at ) (BLOCK (ALT CORCHA (= stru array_decl_array) PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $stru.at.Tipo,
                Size: $expression_vec_Arr.p,
                Array_Son: $stru.at,
	        }
        $at = a 
    }) (ALT CORCHA tipo PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $tipo.te,
                Size: $expression_vec_Arr.p,
                Array_Son: nil,
	        }
        $at = a
    }))) (RULE vector_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,true, $LET.line,$LET.pos) 
    }) (ALT LET MUT (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,false, $LET.line,$LET.pos) 
    }) (ALT LET (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,false, $LET.line,$LET.pos) 
    }))) (RULE vector_expr (returns  interfaces.Expresion p ) (BLOCK (ALT VEC EXCLA CORCHA list_expre_vec_arr CORCHC { 
        var a,b,c interfaces.Expresion
        $p = vector.NewVector( $list_expre_vec_arr.l, a , b , false,c,$CORCHA.line, $CORCHA.pos  ) 
        }) (ALT VEC EXCLA CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { 
        var a interfaces.Expresion
        $p = vector.NewVector( arrayList.New(), $exp1.p, $exp2.p ,false, a ,$CORCHA.line, $CORCHA.pos) 
        }) (ALT VEC DPTS DPTS NEWI PARA PARC { 
        var a,b,c interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,true,c,$NEWI.line,$NEWI.pos) 
    }) (ALT VEC DPTS DPTS WITH_CAP PARA expression_vec_Arr PARC { 
        var a,b interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,false,$expression_vec_Arr.p,$WITH_CAP.line,$WITH_CAP.pos) 
    }))) (RULE sent_funciones_Vec (returns  interfaces.Instruction instr ) (BLOCK (ALT (= exp1 expression) PNT PUSH PARA (= exp2 expression) PARC PYC { 
        $instr = funcionesvectores.NewPush($exp1.p, $exp2.p, $PUSH.line, $PUSH.pos) 
    }) (ALT ID PNT INSERT PARA (= exp1 expression) COMA (= exp2 expression) PARC PYC { 
        $instr = funcionesvectores.NewInsert($ID.text, $exp1.p, $exp2.p, $INSERT.line, $INSERT.pos) 
    }) (ALT ID PNT REMOVE PARA expression PARC PYC { 
        $instr = funcionesvectores.NewRemove_instr($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
    }))) (RULE sentencias_expr (returns  interfaces.Expresion p ) (BLOCK (ALT sent_if_expr PYC { $p = $sent_if_expr.p }) (ALT sent_loop_expr { $p = $sent_loop_expr.p }) (ALT sent_matchexpr { $p = $sent_matchexpr.p }))) (RULE sent_matchexpr (returns  interfaces.Expresion p ) (BLOCK (ALT MATCH expression LLAVEA matchexpr_listbrazos el_defaultexpr LLAVEC { 
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
        }) (ALT MATCH expression LLAVEA matchexpr_listbrazos LLAVEC {
        var a interfaces.Expresion
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, a, $MATCH.line,$MATCH.pos)
    }) (ALT MATCH expression LLAVEA el_defaultexpr LLAVEC {
        $p = matchexpr.NewMatch_Expr($expression.p, arrayList.New(), $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
    }))) (RULE matchexpr_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= brz matchexpr_listbrazos) list_brazosexpr {
        $brz.l.Add($list_brazosexpr.p)
        $l = $brz.l
    }) (ALT list_brazosexpr {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    }))) (RULE list_brazosexpr (returns  interfaces.Expresion p ) (BLOCK (ALT (= po expression) IGUAL MAYOR (= pi expression) COMA { 
        a := arrayList.New()
        a.Add($po.p)
        $p = matchexpr.NewBrazo_expr(a, $pi.p, $IGUAL.line , $IGUAL.pos)
     }) (ALT (= exp matchexpr_listbrazosexpr_listexpr) IGUAL MAYOR expression COMA { $p = matchexpr.NewBrazo_expr( $exp.l , $expression.p ,$IGUAL.line, $IGUAL.pos ) }))) (RULE matchexpr_listbrazosexpr_listexpr (returns   *arrayList.List l ) (BLOCK (ALT (= g match_listbrazos_listexpr) OR_MATCH expression {
        $g.l.Add($expression.p)
        $l = $g.l
    }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE el_defaultexpr (returns  interfaces.Expresion p ) (BLOCK (ALT DEFAUL IGUAL MAYOR expression COMA { $p = matchexpr.NewDefault_Expr($expression.p, $DEFAUL.line, $DEFAUL.pos) }))) (RULE tipo (returns  interfaces.TipoExpresion te) (BLOCK (ALT INT { $te = 0 }) (ALT FLOAT { $te = 1 }) (ALT STR { $te = 2 }) (ALT BOOLEAN { $te = 3}) (ALT CHAR { $te = 7 }) (ALT STRING { $te = 8 }) (ALT USIZE { $te = 13 }))) (RULE asignacion (returns  interfaces.Instruction instr ) (BLOCK (ALT ID IGUAL expression PYC { 
        a := arrayList.New()
        $instr = instruction.NewAsignacion($ID.text, $expression.p, "" , a ,$ID.line, $ID.pos) 
        }) (ALT (= id1 ID) PNT (= id2 ID) IGUAL expression PYC { 
        a := arrayList.New()
        $instr = instruction.NewAsignacion($id1.text, $expression.p, $id2.text , a ,$ID.line, $ID.pos) 
        }) (ALT ID (= list asig_array_vect) IGUAL expression PYC {
        $instr = instruction.NewAsignacion($ID.text, $expression.p, "" , $list.l ,$ID.line, $ID.pos) 
    }))) (RULE asig_array_vect (returns  *arrayList.List l ) (BLOCK (ALT (= li asig_array_vect) CORCHA expression CORCHC {
        $li.l.Add($expression.p)  
        $l = $li.l
    }) (ALT CORCHA expression CORCHC {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE sent_if_expr (returns interfaces.Expresion p ) (BLOCK (ALT IF (= ini expression) LLAVEA (= instru sent_instru_if_expre) LLAVEC { 
        b := arrayList.New()
        $p = sentenciasexpr.NewIf_expr($ini.p, $instru.l,b, $IF.line, $IF.pos   ) 
        }) (ALT IF (= ini expression) LLAVEA (= instru sent_instru_if_expre) LLAVEC ELSE LLAVEA (= instru2 sent_instru_if_expre) LLAVEC { 
        $p = sentenciasexpr.NewIf_expr($ini.p, $instru.l, $instru2.l , $IF.line, $IF.pos ) 
        }) (ALT IF (= ini expression) LLAVEA (= instru sent_instru_if_expre) LLAVEC ELSE (= sent sent_if_expr) { 
        a := arrayList.New()
        a.Add($sent.p)
        $p = sentenciasexpr.NewIf_expr($ini.p,$instru.l,a, $IF.line, $IF.pos   )  
        }))) (RULE sent_instru_if_expre (returns  *arrayList.List l ) (BLOCK (ALT (= in instrucciones) (= ex expression) { 
        $in.l.Add($ex.p)
        $l = $in.l
     }) (ALT (= ex expression) {
        a := arrayList.New()
        a.Add($ex.p)
        $l = a
    }))) (RULE sent_loop_expr (returns  interfaces.Expresion p ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $p = sentenciasexpr.NewLoop_expr($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE printaso (returns  interfaces.Instruction instr ) (BLOCK (ALT PRINT EXCLA PARA expression PARC { 
         a := arrayList.New()
        $instr = instruction.NewImprimir($expression.p, a, $PRINT.line, $PRINT.pos) 
        }) (ALT PRINT EXCLA PARA expression COMA (= li list_expre_print) PARC {  $instr = instruction.NewImprimir($expression.p, $li.l, $PRINT.line, $PRINT.pos)  }))) (RULE list_expre_print (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_print) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE list_expre_vec_arr (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_vec_arr) COMA expression_vec_Arr { 
        $li.l.Add($expression_vec_Arr.p)  
        $l = $li.l
        }) (ALT expression_vec_Arr {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    }))) (RULE sent_if (returns  interfaces.Instruction instr ) (BLOCK (ALT IF expression LLAVEA instrucciones LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $instrucciones.l, arrayList.New(), $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE LLAVEA (= ins2 instrucciones) LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, $ins2.l, $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE (= sent sent_if) { 
        a := arrayList.New()
        a.Add($sent.instr)
        $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, a , $IF.line,$IF.pos) }))) (RULE sent_match (returns  interfaces.Instruction instr ) (BLOCK (ALT MATCH expression LLAVEA match_listbrazos el_default LLAVEC { $instr = match.NewMatch($expression.p, $match_listbrazos.l, $el_default.instr, $MATCH.line, $MATCH.pos) }) (ALT MATCH expression LLAVEA el_default LLAVEC {$instr = match.NewMatch($expression.p, arrayList.New(), $el_default.instr, $MATCH.line, $MATCH.pos)}))) (RULE match_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= braz match_listbrazos) list_brazos { 
    $braz.l.Add($list_brazos.instr)
     $l = $braz.l
     }) (ALT list_brazos {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    }))) (RULE list_brazos (returns  interfaces.Instruction instr ) (BLOCK (ALT expression IGUAL MAYOR LLAVEA instrucciones LLAVEC { 
        a := arrayList.New()
        a.Add($expression.p)
        $instr = match.NewBrazo(a, $instrucciones.l, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewBrazo($exprs.l, $instrucciones.l, $IGUAL.line, $IGUAL.pos)  }) (ALT expression IGUAL MAYOR instruccion COMA {
        a := arrayList.New()
        a.Add($expression.p)
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo(a, b, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR instruccion COMA {
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo($exprs.l, b, $IGUAL.line, $IGUAL.pos)
        }))) (RULE match_listbrazos_listexpr (returns  *arrayList.List l ) (BLOCK (ALT (= h match_listbrazos_listexpr) OR_MATCH expression { 
        $h.l.Add($expression.p)
        $l = $h.l
     }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        }))) (RULE el_default (returns  interfaces.Instruction instr ) (BLOCK (ALT DEFAUL IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewDefault($instrucciones.l , $DEFAUL.line, $DEFAUL.pos) }) (ALT DEFAUL IGUAL MAYOR instruccion COMA { 
        a := arrayList.New()
        a.Add($instruccion.instr)
        $instr = match.NewDefault(a , $DEFAUL.line, $DEFAUL.pos)  
        }))) (RULE sent_loop (returns  interfaces.Instruction instr ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewLoop($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE sent_while (returns  interfaces.Instruction instr ) (BLOCK (ALT WHILE expression LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewWhile($expression.p , $instrucciones.l , $WHILE.line, $WHILE.pos) }))) (RULE sent_ForIn (returns  interfaces.Instruction instr ) (BLOCK (ALT FOR ID IN (= exp1 expression) PNT PNT (= exp2 expression) LLAVEA instrucciones LLAVEC {
        var a interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, $exp1.p, $exp2.p,a, $instrucciones.l, $IN.line, $IN.pos )
    }) (ALT FOR ID IN (= exp expression_vec_Arr) LLAVEA instrucciones LLAVEC {
        var a,b interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, a,b, $exp.p , $instrucciones.l, $IN.line, $IN.pos )
    }))) (RULE expression_vec_Arr (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= opIz expression_vec_Arr) (= op MODUL) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (SET MUL DIV)) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (SET SUM REST)) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IGUALACION DIFERENCIACION)) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression_vec_Arr PARC { $p = $expression_vec_Arr.p}) (ALT (= opIz expression_vec_Arr) (= ope (SET AND OR)) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT CORCHA list_expre_vec_arr CORCHC { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        }) (ALT CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT vector_expr { $p = $vector_expr.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE atributos_struct_exp (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct_exp) COMA (= asd atributos_struct_decl_exp) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl_exp {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    }))) (RULE atributos_struct_decl_exp (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS (= exp2 expression) {$s = interfaces.Symbol{ Id: $ID.text, Valor: $exp2.p } }) (ALT ID DPTS (= exp expression_vec_Arr) {$s = interfaces.Symbol{ Id: $ID.text,  Valor:$exp.p }}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT (= exp4 expression) PNT TOSTRING PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= exp11 expression) PNT CAPACITY PARA PARC { $p = funcionesvectores.NewCapacity($exp11.p, $CAPACITY.line, $CAPACITY.pos) }) (ALT (= exp8 expression) PNT LEN PARA PARC { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }) (ALT (= opIz expression) (= op MODUL) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression) (= ope (SET MUL DIV)) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression) (= ope (SET SUM REST)) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= ope REST) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT (= ope REST) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IGUALACION DIFERENCIACION)) (= opDe expression) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= ope (SET AND OR)) (= opDe expression) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT ID PNT REMOVE PARA expression PARC { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) }) (ALT (= exp8 expression) PNT CONTAINS PARA PUNTERO expression PARC { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT (= exp4 expression) PNT TOOWNED PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }) (ALT (= exp5 expression) CASTEO tipo { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }) (ALT (= exp6 expression) PNT ABOSLU PARA PARC { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp7 expression) PNT RAIZITA PARA PARC { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp9 expression) PNT CLONATION PARA PARC { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }) (ALT ID LLAVEA (= li atributos_struct_exp) LLAVEC { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) }) (ALT llamadas_structs { $p =  $llamadas_structs.p }) (ALT llamada_expre { $p = $llamada_expre.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE llamada_expre (returns interfaces.Expresion p) (BLOCK (ALT ID PARA PARC { $p = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC { $p = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE primitivo (returns  interfaces.Expresion p) (BLOCK (ALT NUMBER { 
            num, err:= strconv.Atoi($NUMBER.text)
            if err !=nil{ 
                fmt.Println(err)
            }   
            $p = expresion.NewPrimitivo (num, interfaces.INTEGER)
     }) (ALT FLOAT_NUM {
        num, err:= strconv.ParseFloat($FLOAT_NUM.text, 64)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.FLOAT)
    }) (ALT (= op (SET TRUE FALSE)) {
        num, err:= strconv.ParseBool($op.text)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)
    }) (ALT CADENA { 
        str:= $CADENA.text[1:len($CADENA.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.STR)
     }) (ALT CHAR_2 {
        str:= $CHAR_2.text[1:len($CHAR_2.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.CHAR)
    }) (ALT list_array { $p = $list_array.p }))) (RULE list_array (returns  interfaces.Expresion p ) (BLOCK (ALT (= li list_array) CORCHA expression CORCHC { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) }))) (RULE llamadas_structs (returns  interfaces.Expresion p ) (BLOCK (ALT (= li llamadas_structs) PNT (= id2 ID) { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })))))
2022-05-03 11:39:54:096 left-recursion LogManager.java:25 intructions_modulos returns [ *arrayList.List l ]
    :   ( {} instruct_modulos<tokenIndex=231>                     { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> instruct_modulos<tokenIndex=225> { 
                  $li.l.Add($instruct_modulos.instr)  
                  $l = $li.l
               }
        )*
    ;
2022-05-03 11:39:54:101 grammar LogManager.java:25 added: (RULE intructions_modulos (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (instruct_modulos (ELEMENT_OPTIONS (= tokenIndex 231))) { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (instruct_modulos (ELEMENT_OPTIONS (= tokenIndex 225))) { 
                  $li.l.Add($instruct_modulos.instr)  
                  $l = $li.l
               }))))))
2022-05-03 11:39:54:183 left-recursion LogManager.java:25 atributos_struct returns [ *arrayList.List l ]
    :   ( {} atributos_struct_decl<tokenIndex=327>  {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=317> asd=atributos_struct_decl<tokenIndex=321> {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }
        )*
    ;
2022-05-03 11:39:54:185 grammar LogManager.java:25 added: (RULE atributos_struct (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (atributos_struct_decl (ELEMENT_OPTIONS (= tokenIndex 327))) {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 317))) (= asd (atributos_struct_decl (ELEMENT_OPTIONS (= tokenIndex 321)))) {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }))))))
2022-05-03 11:39:54:261 left-recursion LogManager.java:25 params_funcion returns [ *arrayList.List l ]
    :   ( {} params_funcion_decl<tokenIndex=662>      { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=654> params_funcion_decl<tokenIndex=656> {
                  $li.l.Add($params_funcion_decl.s)  
                  $l = $li.l
              }
        )*
    ;
2022-05-03 11:39:54:264 grammar LogManager.java:25 added: (RULE params_funcion (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (params_funcion_decl (ELEMENT_OPTIONS (= tokenIndex 662))) { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 654))) (params_funcion_decl (ELEMENT_OPTIONS (= tokenIndex 656))) {
                  $li.l.Add($params_funcion_decl.s)  
                  $l = $li.l
              }))))))
2022-05-03 11:39:54:342 left-recursion LogManager.java:25 params_llamada returns [ *arrayList.List l ]
    :   ( {} expression<tokenIndex=825> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        | PUNTERO<tokenIndex=831> MUT<tokenIndex=833> expression<tokenIndex=835> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=799> expression<tokenIndex=801> { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=813> PUNTERO<tokenIndex=815> MUT<tokenIndex=817> expression<tokenIndex=819> { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }
        )*
    ;
2022-05-03 11:39:54:345 grammar LogManager.java:25 added: (RULE params_llamada (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 825))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }) (ALT (PUNTERO (ELEMENT_OPTIONS (= tokenIndex 831))) (MUT (ELEMENT_OPTIONS (= tokenIndex 833))) (expression (ELEMENT_OPTIONS (= tokenIndex 835))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 799))) (expression (ELEMENT_OPTIONS (= tokenIndex 801))) { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 813))) (PUNTERO (ELEMENT_OPTIONS (= tokenIndex 815))) (MUT (ELEMENT_OPTIONS (= tokenIndex 817))) (expression (ELEMENT_OPTIONS (= tokenIndex 819))) { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }))))))
2022-05-03 11:39:54:381 left-recursion LogManager.java:25 matchexpr_listbrazos returns [ *arrayList.List l ]
    :   ( {} list_brazosexpr<tokenIndex=1501> {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> list_brazosexpr<tokenIndex=1495> {
                  $brz.l.Add($list_brazosexpr.p)
                  $l = $brz.l
              }
        )*
    ;
2022-05-03 11:39:54:382 grammar LogManager.java:25 added: (RULE matchexpr_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (list_brazosexpr (ELEMENT_OPTIONS (= tokenIndex 1501))) {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (list_brazosexpr (ELEMENT_OPTIONS (= tokenIndex 1495))) {
                  $brz.l.Add($list_brazosexpr.p)
                  $l = $brz.l
              }))))))
2022-05-03 11:39:54:408 left-recursion LogManager.java:25 asig_array_vect returns [ *arrayList.List l ]
    :   ( {} CORCHA<tokenIndex=1730> expression<tokenIndex=1732> CORCHC<tokenIndex=1734> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORCHA<tokenIndex=1720> expression<tokenIndex=1722> CORCHC<tokenIndex=1724> {
                  $li.l.Add($expression.p)  
                  $l = $li.l
              }
        )*
    ;
2022-05-03 11:39:54:409 grammar LogManager.java:25 added: (RULE asig_array_vect (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (CORCHA (ELEMENT_OPTIONS (= tokenIndex 1730))) (expression (ELEMENT_OPTIONS (= tokenIndex 1732))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 1734))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORCHA (ELEMENT_OPTIONS (= tokenIndex 1720))) (expression (ELEMENT_OPTIONS (= tokenIndex 1722))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 1724))) {
                  $li.l.Add($expression.p)  
                  $l = $li.l
              }))))))
2022-05-03 11:39:54:441 left-recursion LogManager.java:25 list_expre_print returns [ *arrayList.List l ]
    :   ( {} expression<tokenIndex=1934> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1926> expression<tokenIndex=1928> { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }
        )*
    ;
2022-05-03 11:39:54:443 grammar LogManager.java:25 added: (RULE list_expre_print (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1934))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1926))) (expression (ELEMENT_OPTIONS (= tokenIndex 1928))) { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }))))))
2022-05-03 11:39:54:479 left-recursion LogManager.java:25 list_expre_vec_arr returns [ *arrayList.List l ]
    :   ( {} expression_vec_Arr<tokenIndex=1961> {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1953> expression_vec_Arr<tokenIndex=1955> { 
                  $li.l.Add($expression_vec_Arr.p)  
                  $l = $li.l
                  }
        )*
    ;
2022-05-03 11:39:54:482 grammar LogManager.java:25 added: (RULE list_expre_vec_arr (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 1961))) {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1953))) (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 1955))) { 
                  $li.l.Add($expression_vec_Arr.p)  
                  $l = $li.l
                  }))))))
2022-05-03 11:39:54:534 left-recursion LogManager.java:25 match_listbrazos returns [ *arrayList.List l ]
    :   ( {} list_brazos<tokenIndex=2092>                  {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> list_brazos<tokenIndex=2086> { 
              $braz.l.Add($list_brazos.instr)
               $l = $braz.l
               }
        )*
    ;
2022-05-03 11:39:54:535 grammar LogManager.java:25 added: (RULE match_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (list_brazos (ELEMENT_OPTIONS (= tokenIndex 2092))) {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (list_brazos (ELEMENT_OPTIONS (= tokenIndex 2086))) { 
              $braz.l.Add($list_brazos.instr)
               $l = $braz.l
               }))))))
2022-05-03 11:39:54:580 left-recursion LogManager.java:25 match_listbrazos_listexpr returns [ *arrayList.List l ]
    :   ( {} expression<tokenIndex=2189> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> OR_MATCH<tokenIndex=2181> expression<tokenIndex=2183>  { 
                  $h.l.Add($expression.p)
                  $l = $h.l
               }
        )*
    ;
2022-05-03 11:39:54:582 grammar LogManager.java:25 added: (RULE match_listbrazos_listexpr (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 2189))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (OR_MATCH (ELEMENT_OPTIONS (= tokenIndex 2181))) (expression (ELEMENT_OPTIONS (= tokenIndex 2183))) { 
                  $h.l.Add($expression.p)
                  $l = $h.l
               }))))))
2022-05-03 11:39:54:636 left-recursion LogManager.java:25 expression_vec_Arr returns [interfaces.Expresion p]
    :   ( {} INT<tokenIndex=2336> DPTS<tokenIndex=2338> DPTS<tokenIndex=2340> op=POW<tokenIndex=2344> PARA<tokenIndex=2346> opIz=expression_vec_Arr<tokenIndex=2350> COMA<tokenIndex=2352> opDe=expression_vec_Arr<tokenIndex=2356> PARC<tokenIndex=2358> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)} 
        | FLOAT<tokenIndex=2364> DPTS<tokenIndex=2366> DPTS<tokenIndex=2368> op=POWF<tokenIndex=2372> PARA<tokenIndex=2374> opIz=expression_vec_Arr<tokenIndex=2378> COMA<tokenIndex=2380> opDe=expression_vec_Arr<tokenIndex=2384> PARC<tokenIndex=2386> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)} 
        | PARA<tokenIndex=2492> expression_vec_Arr<tokenIndex=2494> PARC<tokenIndex=2496> { $p = $expression_vec_Arr.p} 
        | op=EXCLA<tokenIndex=2528> operador = expression_vec_Arr<tokenIndex=2534,p=6> {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)} 
        | CORCHA<tokenIndex=2542> list_expre_vec_arr<tokenIndex=2544> CORCHC<tokenIndex=2546> { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        } 
        | CORCHA<tokenIndex=2552> exp1=expression_vec_Arr<tokenIndex=2556> PYC<tokenIndex=2558> exp2=expression_vec_Arr<tokenIndex=2562> CORCHC<tokenIndex=2564> { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) } 
        | exp4=expression<tokenIndex=2574> PNT<tokenIndex=2576> TOCHARS<tokenIndex=2578> PARA<tokenIndex=2580> PARC<tokenIndex=2582> { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) } 
        | vector_expr<tokenIndex=2588> { $p = $vector_expr.p } 
        | primitivo<tokenIndex=2594> { $p = $primitivo.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=MODUL<tokenIndex=2400> opDe = expression_vec_Arr<tokenIndex=2406,p=13> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> ope=(MUL<tokenIndex=2421>|DIV<tokenIndex=2423>) opDe = expression_vec_Arr<tokenIndex=2430,p=12> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> ope=(SUM<tokenIndex=2445>|REST<tokenIndex=2447>) opDe = expression_vec_Arr<tokenIndex=2454,p=11> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(MENOR<tokenIndex=2469>|MENORIGUAL<tokenIndex=2471>|MAYORIGUAL<tokenIndex=2473>|MAYOR<tokenIndex=2475>|IGUALACION<tokenIndex=2477>|DIFERENCIACION<tokenIndex=2479>) opDe = expression_vec_Arr<tokenIndex=2486,p=10> {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> ope=(AND<tokenIndex=2511>|OR<tokenIndex=2513>) opDe = expression_vec_Arr<tokenIndex=2520,p=8> {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
        )*
    ;
2022-05-03 11:39:54:668 grammar LogManager.java:25 added: (RULE expression_vec_Arr (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 2336))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2338))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2340))) (= op (POW (ELEMENT_OPTIONS (= tokenIndex 2344)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2346))) (= opIz (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2350)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2352))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2356)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2358))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 2364))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2366))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2368))) (= op (POWF (ELEMENT_OPTIONS (= tokenIndex 2372)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2374))) (= opIz (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2378)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2380))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2384)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2386))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 2492))) (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2494))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2496))) { $p = $expression_vec_Arr.p}) (ALT (= op (EXCLA (ELEMENT_OPTIONS (= tokenIndex 2528)))) (= operador (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2534) (= p 6)))) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT (CORCHA (ELEMENT_OPTIONS (= tokenIndex 2542))) (list_expre_vec_arr (ELEMENT_OPTIONS (= tokenIndex 2544))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 2546))) { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        }) (ALT (CORCHA (ELEMENT_OPTIONS (= tokenIndex 2552))) (= exp1 (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2556)))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2558))) (= exp2 (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2562)))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 2564))) { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) }) (ALT (= exp4 (expression (ELEMENT_OPTIONS (= tokenIndex 2574)))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2576))) (TOCHARS (ELEMENT_OPTIONS (= tokenIndex 2578))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2580))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2582))) { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT (vector_expr (ELEMENT_OPTIONS (= tokenIndex 2588))) { $p = $vector_expr.p }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 2594))) { $p = $primitivo.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (MODUL (ELEMENT_OPTIONS (= tokenIndex 2400)))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2406) (= p 13)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= ope (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2421))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2423))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2430) (= p 12)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= ope (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 2445))) (REST (ELEMENT_OPTIONS (= tokenIndex 2447))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2454) (= p 11)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2469))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2471))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2473))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2475))) (IGUALACION (ELEMENT_OPTIONS (= tokenIndex 2477))) (DIFERENCIACION (ELEMENT_OPTIONS (= tokenIndex 2479))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2486) (= p 10)))) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= ope (SET (AND (ELEMENT_OPTIONS (= tokenIndex 2511))) (OR (ELEMENT_OPTIONS (= tokenIndex 2513))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2520) (= p 8)))) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}))))))
2022-05-03 11:39:54:702 left-recursion LogManager.java:25 atributos_struct_exp returns [ *arrayList.List l ]
    :   ( {} atributos_struct_decl_exp<tokenIndex=2622>  {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2612> asd=atributos_struct_decl_exp<tokenIndex=2616> {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }
        )*
    ;
2022-05-03 11:39:54:703 grammar LogManager.java:25 added: (RULE atributos_struct_exp (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (atributos_struct_decl_exp (ELEMENT_OPTIONS (= tokenIndex 2622))) {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2612))) (= asd (atributos_struct_decl_exp (ELEMENT_OPTIONS (= tokenIndex 2616)))) {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }))))))
2022-05-03 11:39:54:726 left-recursion LogManager.java:25 expression returns [interfaces.Expresion p]
    :   ( {} INT<tokenIndex=2665> DPTS<tokenIndex=2667> DPTS<tokenIndex=2669> op=POW<tokenIndex=2673> PARA<tokenIndex=2675> opIz=expression<tokenIndex=2679> COMA<tokenIndex=2681> opDe=expression<tokenIndex=2685> PARC<tokenIndex=2687> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)} 
        | FLOAT<tokenIndex=2709> DPTS<tokenIndex=2711> DPTS<tokenIndex=2713> op=POWF<tokenIndex=2717> PARA<tokenIndex=2719> opIz=expression<tokenIndex=2723> COMA<tokenIndex=2725> opDe=expression<tokenIndex=2729> PARC<tokenIndex=2731> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)} 
        | ope=REST<tokenIndex=2842> opDe = expression<tokenIndex=2848,p=19> {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)} 
        | ope=REST<tokenIndex=2856> opDe = expression<tokenIndex=2862,p=18> {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)} 
        | PARA<tokenIndex=2868> expression<tokenIndex=2870> PARC<tokenIndex=2872> { $p = $expression.p} 
        | PARA<tokenIndex=2910> expression<tokenIndex=2912> PARC<tokenIndex=2914> { $p = $expression.p} 
        | op=EXCLA<tokenIndex=2946> operador = expression<tokenIndex=2952,p=13> {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)} 
        | ID<tokenIndex=2958> PNT<tokenIndex=2960> REMOVE<tokenIndex=2962> PARA<tokenIndex=2964> expression<tokenIndex=2966> PARC<tokenIndex=2968> { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) } 
        | ID<tokenIndex=3087> LLAVEA<tokenIndex=3089> li=atributos_struct_exp<tokenIndex=3093> LLAVEC<tokenIndex=3095> { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) } 
        | llamadas_structs<tokenIndex=3101> { $p =  $llamadas_structs.p } 
        | llamada_expre<tokenIndex=3107> { $p = $llamada_expre.p } 
        | primitivo<tokenIndex=3113> { $p = $primitivo.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=MODUL<tokenIndex=2780> opDe = expression<tokenIndex=2786,p=23> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> ope=(MUL<tokenIndex=2801>|DIV<tokenIndex=2803>) opDe = expression<tokenIndex=2810,p=22> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> ope=(SUM<tokenIndex=2825>|REST<tokenIndex=2827>) opDe = expression<tokenIndex=2834,p=21> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MENOR<tokenIndex=2887>|MENORIGUAL<tokenIndex=2889>|MAYORIGUAL<tokenIndex=2891>|MAYOR<tokenIndex=2893>|IGUALACION<tokenIndex=2895>|DIFERENCIACION<tokenIndex=2897>) opDe = expression<tokenIndex=2904,p=17> {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> ope=(AND<tokenIndex=2929>|OR<tokenIndex=2931>) opDe = expression<tokenIndex=2938,p=15> {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 26)}?<p=26> PNT<tokenIndex=2697> TOSTRING<tokenIndex=2699> PARA<tokenIndex=2701> PARC<tokenIndex=2703> { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> PNT<tokenIndex=2743> CAPACITY<tokenIndex=2745> PARA<tokenIndex=2747> PARC<tokenIndex=2749> { $p = funcionesvectores.NewCapacity($exp11.p, $CAPACITY.line, $CAPACITY.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> PNT<tokenIndex=2760> LEN<tokenIndex=2762> PARA<tokenIndex=2764> PARC<tokenIndex=2766> { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> PNT<tokenIndex=2979> CONTAINS<tokenIndex=2981> PARA<tokenIndex=2983> PUNTERO<tokenIndex=2985> expression<tokenIndex=2987> PARC<tokenIndex=2989> { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> PNT<tokenIndex=2999> TOCHARS<tokenIndex=3001> PARA<tokenIndex=3003> PARC<tokenIndex=3005> { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> PNT<tokenIndex=3015> TOOWNED<tokenIndex=3017> PARA<tokenIndex=3019> PARC<tokenIndex=3021> { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> CASTEO<tokenIndex=3031> tipo<tokenIndex=3033> { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PNT<tokenIndex=3043> ABOSLU<tokenIndex=3045> PARA<tokenIndex=3047> PARC<tokenIndex=3049> { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> PNT<tokenIndex=3059> RAIZITA<tokenIndex=3061> PARA<tokenIndex=3063> PARC<tokenIndex=3065> { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> PNT<tokenIndex=3075> CLONATION<tokenIndex=3077> PARA<tokenIndex=3079> PARC<tokenIndex=3081> { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }
        )*
    ;
2022-05-03 11:39:54:740 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 2665))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2667))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2669))) (= op (POW (ELEMENT_OPTIONS (= tokenIndex 2673)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2675))) (= opIz (expression (ELEMENT_OPTIONS (= tokenIndex 2679)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2681))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2685)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2687))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 2709))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2711))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2713))) (= op (POWF (ELEMENT_OPTIONS (= tokenIndex 2717)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2719))) (= opIz (expression (ELEMENT_OPTIONS (= tokenIndex 2723)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2725))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2729)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2731))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= ope (REST (ELEMENT_OPTIONS (= tokenIndex 2842)))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2848) (= p 19)))) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT (= ope (REST (ELEMENT_OPTIONS (= tokenIndex 2856)))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2862) (= p 18)))) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 2868))) (expression (ELEMENT_OPTIONS (= tokenIndex 2870))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2872))) { $p = $expression.p}) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 2910))) (expression (ELEMENT_OPTIONS (= tokenIndex 2912))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2914))) { $p = $expression.p}) (ALT (= op (EXCLA (ELEMENT_OPTIONS (= tokenIndex 2946)))) (= operador (expression (ELEMENT_OPTIONS (= tokenIndex 2952) (= p 13)))) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2958))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2960))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2962))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2964))) (expression (ELEMENT_OPTIONS (= tokenIndex 2966))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2968))) { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 3087))) (LLAVEA (ELEMENT_OPTIONS (= tokenIndex 3089))) (= li (atributos_struct_exp (ELEMENT_OPTIONS (= tokenIndex 3093)))) (LLAVEC (ELEMENT_OPTIONS (= tokenIndex 3095))) { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) }) (ALT (llamadas_structs (ELEMENT_OPTIONS (= tokenIndex 3101))) { $p =  $llamadas_structs.p }) (ALT (llamada_expre (ELEMENT_OPTIONS (= tokenIndex 3107))) { $p = $llamada_expre.p }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 3113))) { $p = $primitivo.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (MODUL (ELEMENT_OPTIONS (= tokenIndex 2780)))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2786) (= p 23)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= ope (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2801))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2803))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2810) (= p 22)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= ope (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 2825))) (REST (ELEMENT_OPTIONS (= tokenIndex 2827))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2834) (= p 21)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2887))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2889))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2891))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2893))) (IGUALACION (ELEMENT_OPTIONS (= tokenIndex 2895))) (DIFERENCIACION (ELEMENT_OPTIONS (= tokenIndex 2897))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2904) (= p 17)))) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= ope (SET (AND (ELEMENT_OPTIONS (= tokenIndex 2929))) (OR (ELEMENT_OPTIONS (= tokenIndex 2931))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2938) (= p 15)))) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 26)}? (ELEMENT_OPTIONS (= p 26))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2697))) (TOSTRING (ELEMENT_OPTIONS (= tokenIndex 2699))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2701))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2703))) { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2743))) (CAPACITY (ELEMENT_OPTIONS (= tokenIndex 2745))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2747))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2749))) { $p = funcionesvectores.NewCapacity($exp11.p, $CAPACITY.line, $CAPACITY.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2760))) (LEN (ELEMENT_OPTIONS (= tokenIndex 2762))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2764))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2766))) { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2979))) (CONTAINS (ELEMENT_OPTIONS (= tokenIndex 2981))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2983))) (PUNTERO (ELEMENT_OPTIONS (= tokenIndex 2985))) (expression (ELEMENT_OPTIONS (= tokenIndex 2987))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2989))) { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2999))) (TOCHARS (ELEMENT_OPTIONS (= tokenIndex 3001))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3003))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3005))) { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3015))) (TOOWNED (ELEMENT_OPTIONS (= tokenIndex 3017))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3019))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3021))) { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (CASTEO (ELEMENT_OPTIONS (= tokenIndex 3031))) (tipo (ELEMENT_OPTIONS (= tokenIndex 3033))) { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3043))) (ABOSLU (ELEMENT_OPTIONS (= tokenIndex 3045))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3047))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3049))) { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3059))) (RAIZITA (ELEMENT_OPTIONS (= tokenIndex 3061))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3063))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3065))) { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3075))) (CLONATION (ELEMENT_OPTIONS (= tokenIndex 3077))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3079))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3081))) { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }))))))
2022-05-03 11:39:54:757 left-recursion LogManager.java:25 list_array returns [ interfaces.Expresion p ]
    :   ( {} ID<tokenIndex=3222> {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORCHA<tokenIndex=3212> expression<tokenIndex=3214> CORCHC<tokenIndex=3216> { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }
        )*
    ;
2022-05-03 11:39:54:758 grammar LogManager.java:25 added: (RULE list_array (returns  interfaces.Expresion p ) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 3222))) {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORCHA (ELEMENT_OPTIONS (= tokenIndex 3212))) (expression (ELEMENT_OPTIONS (= tokenIndex 3214))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 3216))) { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }))))))
2022-05-03 11:39:54:781 left-recursion LogManager.java:25 llamadas_structs returns [ interfaces.Expresion p ]
    :   ( {} ID<tokenIndex=3252>  {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PNT<tokenIndex=3242> id2=ID<tokenIndex=3246> { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }
        )*
    ;
2022-05-03 11:39:54:783 grammar LogManager.java:25 added: (RULE llamadas_structs (returns  interfaces.Expresion p ) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 3252))) {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3242))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 3246)))) { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }))))))
2022-05-03 11:39:54:803 grammar LogManager.java:25 import NUMBER=1
2022-05-03 11:39:54:803 grammar LogManager.java:25 import FLOAT_NUM=2
2022-05-03 11:39:54:803 grammar LogManager.java:25 import CHAR_2=3
2022-05-03 11:39:54:803 grammar LogManager.java:25 import CADENA=4
2022-05-03 11:39:54:803 grammar LogManager.java:25 import CMT=5
2022-05-03 11:39:54:803 grammar LogManager.java:25 import EXCLA=6
2022-05-03 11:39:54:803 grammar LogManager.java:25 import PARA=7
2022-05-03 11:39:54:803 grammar LogManager.java:25 import PARC=8
2022-05-03 11:39:54:803 grammar LogManager.java:25 import LLAVEA=9
2022-05-03 11:39:54:803 grammar LogManager.java:25 import LLAVEC=10
2022-05-03 11:39:54:803 grammar LogManager.java:25 import CORCHA=11
2022-05-03 11:39:54:803 grammar LogManager.java:25 import CORCHC=12
2022-05-03 11:39:54:803 grammar LogManager.java:25 import PYC=13
2022-05-03 11:39:54:803 grammar LogManager.java:25 import DPTS=14
2022-05-03 11:39:54:803 grammar LogManager.java:25 import COMA=15
2022-05-03 11:39:54:803 grammar LogManager.java:25 import DEFAUL=16
2022-05-03 11:39:54:803 grammar LogManager.java:25 import OR_MATCH=17
2022-05-03 11:39:54:803 grammar LogManager.java:25 import PNT=18
2022-05-03 11:39:54:803 grammar LogManager.java:25 import PUNTERO=19
2022-05-03 11:39:54:803 grammar LogManager.java:25 import MUL=20
2022-05-03 11:39:54:803 grammar LogManager.java:25 import SUM=21
2022-05-03 11:39:54:803 grammar LogManager.java:25 import DIV=22
2022-05-03 11:39:54:803 grammar LogManager.java:25 import REST=23
2022-05-03 11:39:54:803 grammar LogManager.java:25 import POW=24
2022-05-03 11:39:54:803 grammar LogManager.java:25 import POWF=25
2022-05-03 11:39:54:803 grammar LogManager.java:25 import MODUL=26
2022-05-03 11:39:54:804 grammar LogManager.java:25 import DIFERENCIACION=27
2022-05-03 11:39:54:804 grammar LogManager.java:25 import IGUALACION=28
2022-05-03 11:39:54:804 grammar LogManager.java:25 import MAYORIGUAL=29
2022-05-03 11:39:54:804 grammar LogManager.java:25 import MENORIGUAL=30
2022-05-03 11:39:54:804 grammar LogManager.java:25 import MAYOR=31
2022-05-03 11:39:54:804 grammar LogManager.java:25 import MENOR=32
2022-05-03 11:39:54:804 grammar LogManager.java:25 import IGUAL=33
2022-05-03 11:39:54:804 grammar LogManager.java:25 import AND=34
2022-05-03 11:39:54:804 grammar LogManager.java:25 import OR=35
2022-05-03 11:39:54:804 grammar LogManager.java:25 import TRUE=36
2022-05-03 11:39:54:804 grammar LogManager.java:25 import FALSE=37
2022-05-03 11:39:54:804 grammar LogManager.java:25 import INT=38
2022-05-03 11:39:54:804 grammar LogManager.java:25 import FLOAT=39
2022-05-03 11:39:54:804 grammar LogManager.java:25 import BOOLEAN=40
2022-05-03 11:39:54:804 grammar LogManager.java:25 import CHAR=41
2022-05-03 11:39:54:804 grammar LogManager.java:25 import STR=42
2022-05-03 11:39:54:804 grammar LogManager.java:25 import STRING=43
2022-05-03 11:39:54:804 grammar LogManager.java:25 import USIZE=44
2022-05-03 11:39:54:804 grammar LogManager.java:25 import PRINT=45
2022-05-03 11:39:54:804 grammar LogManager.java:25 import LET=46
2022-05-03 11:39:54:804 grammar LogManager.java:25 import MUT=47
2022-05-03 11:39:54:804 grammar LogManager.java:25 import IF=48
2022-05-03 11:39:54:804 grammar LogManager.java:25 import ELSE=49
2022-05-03 11:39:54:804 grammar LogManager.java:25 import LOOP=50
2022-05-03 11:39:54:804 grammar LogManager.java:25 import WHILE=51
2022-05-03 11:39:54:804 grammar LogManager.java:25 import MATCH=52
2022-05-03 11:39:54:804 grammar LogManager.java:25 import FOR=53
2022-05-03 11:39:54:804 grammar LogManager.java:25 import IN=54
2022-05-03 11:39:54:804 grammar LogManager.java:25 import BRE=55
2022-05-03 11:39:54:804 grammar LogManager.java:25 import STRUCT=56
2022-05-03 11:39:54:804 grammar LogManager.java:25 import VEC=57
2022-05-03 11:39:54:804 grammar LogManager.java:25 import NEWI=58
2022-05-03 11:39:54:804 grammar LogManager.java:25 import WITH_CAP=59
2022-05-03 11:39:54:805 grammar LogManager.java:25 import PUSH=60
2022-05-03 11:39:54:805 grammar LogManager.java:25 import INSERT=61
2022-05-03 11:39:54:805 grammar LogManager.java:25 import REMOVE=62
2022-05-03 11:39:54:805 grammar LogManager.java:25 import CONTAINS=63
2022-05-03 11:39:54:805 grammar LogManager.java:25 import LEN=64
2022-05-03 11:39:54:805 grammar LogManager.java:25 import TOCHARS=65
2022-05-03 11:39:54:805 grammar LogManager.java:25 import TOSTRING=66
2022-05-03 11:39:54:805 grammar LogManager.java:25 import TOOWNED=67
2022-05-03 11:39:54:805 grammar LogManager.java:25 import CASTEO=68
2022-05-03 11:39:54:805 grammar LogManager.java:25 import CONTINIU=69
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ABOSLU=70
2022-05-03 11:39:54:805 grammar LogManager.java:25 import RAIZITA=71
2022-05-03 11:39:54:805 grammar LogManager.java:25 import CLONATION=72
2022-05-03 11:39:54:805 grammar LogManager.java:25 import FUNCT=73
2022-05-03 11:39:54:805 grammar LogManager.java:25 import RETURNASO=74
2022-05-03 11:39:54:805 grammar LogManager.java:25 import PUBLI=75
2022-05-03 11:39:54:805 grammar LogManager.java:25 import MODULO=76
2022-05-03 11:39:54:805 grammar LogManager.java:25 import CAPACITY=77
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ID=78
2022-05-03 11:39:54:805 grammar LogManager.java:25 import WS=79
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '!'=6
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '('=7
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ')'=8
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '{'=9
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '}'=10
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '['=11
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ']'=12
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ';'=13
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ':'=14
2022-05-03 11:39:54:805 grammar LogManager.java:25 import ','=15
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '_'=16
2022-05-03 11:39:54:805 grammar LogManager.java:25 import '|'=17
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '.'=18
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '&'=19
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '*'=20
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '+'=21
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '/'=22
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '-'=23
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'pow'=24
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'powf'=25
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '%'=26
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '!='=27
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '=='=28
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '>='=29
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '<='=30
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '>'=31
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '<'=32
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '='=33
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '&&'=34
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '||'=35
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'true'=36
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'false'=37
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'i64'=38
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'f64'=39
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'bool'=40
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'char'=41
2022-05-03 11:39:54:806 grammar LogManager.java:25 import '&str'=42
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'String'=43
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'usize'=44
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'println'=45
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'let'=46
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'mut'=47
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'if'=48
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'else'=49
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'loop'=50
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'while'=51
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'match'=52
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'for'=53
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'in'=54
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'break'=55
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'struct'=56
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'new'=58
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'with_capacity'=59
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'push'=60
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'insert'=61
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'remove'=62
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'contains'=63
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'len'=64
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'chars'=65
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'to_string'=66
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'to_owned'=67
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'as'=68
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'continue'=69
2022-05-03 11:39:54:806 grammar LogManager.java:25 import 'abs'=70
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'sqrt'=71
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'clone'=72
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'fn'=73
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'return'=74
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'pub'=75
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'mod'=76
2022-05-03 11:39:54:808 grammar LogManager.java:25 import 'capacity'=77
2022-05-03 11:39:54:808 grammar LogManager.java:25 tokens={NUMBER=1, FLOAT_NUM=2, CHAR_2=3, CADENA=4, CMT=5, EXCLA=6, PARA=7, PARC=8, LLAVEA=9, LLAVEC=10, CORCHA=11, CORCHC=12, PYC=13, DPTS=14, COMA=15, DEFAUL=16, OR_MATCH=17, PNT=18, PUNTERO=19, MUL=20, SUM=21, DIV=22, REST=23, POW=24, POWF=25, MODUL=26, DIFERENCIACION=27, IGUALACION=28, MAYORIGUAL=29, MENORIGUAL=30, MAYOR=31, MENOR=32, IGUAL=33, AND=34, OR=35, TRUE=36, FALSE=37, INT=38, FLOAT=39, BOOLEAN=40, CHAR=41, STR=42, STRING=43, USIZE=44, PRINT=45, LET=46, MUT=47, IF=48, ELSE=49, LOOP=50, WHILE=51, MATCH=52, FOR=53, IN=54, BRE=55, STRUCT=56, VEC=57, NEWI=58, WITH_CAP=59, PUSH=60, INSERT=61, REMOVE=62, CONTAINS=63, LEN=64, TOCHARS=65, TOSTRING=66, TOOWNED=67, CASTEO=68, CONTINIU=69, ABOSLU=70, RAIZITA=71, CLONATION=72, FUNCT=73, RETURNASO=74, PUBLI=75, MODULO=76, CAPACITY=77, ID=78, WS=79, '!'=6, '('=7, ')'=8, '{'=9, '}'=10, '['=11, ']'=12, ';'=13, ':'=14, ','=15, '_'=16, '|'=17, '.'=18, '&'=19, '*'=20, '+'=21, '/'=22, '-'=23, 'pow'=24, 'powf'=25, '%'=26, '!='=27, '=='=28, '>='=29, '<='=30, '>'=31, '<'=32, '='=33, '&&'=34, '||'=35, 'true'=36, 'false'=37, 'i64'=38, 'f64'=39, 'bool'=40, 'char'=41, '&str'=42, 'String'=43, 'usize'=44, 'println'=45, 'let'=46, 'mut'=47, 'if'=48, 'else'=49, 'loop'=50, 'while'=51, 'match'=52, 'for'=53, 'in'=54, 'break'=55, 'struct'=56, 'new'=58, 'with_capacity'=59, 'push'=60, 'insert'=61, 'remove'=62, 'contains'=63, 'len'=64, 'chars'=65, 'to_string'=66, 'to_owned'=67, 'as'=68, 'continue'=69, 'abs'=70, 'sqrt'=71, 'clone'=72, 'fn'=73, 'return'=74, 'pub'=75, 'mod'=76, 'capacity'=77}
2022-05-03 11:39:54:809 semantics LogManager.java:25 tokens={EOF=-1, NUMBER=1, FLOAT_NUM=2, CHAR_2=3, CADENA=4, CMT=5, EXCLA=6, PARA=7, PARC=8, LLAVEA=9, LLAVEC=10, CORCHA=11, CORCHC=12, PYC=13, DPTS=14, COMA=15, DEFAUL=16, OR_MATCH=17, PNT=18, PUNTERO=19, MUL=20, SUM=21, DIV=22, REST=23, POW=24, POWF=25, MODUL=26, DIFERENCIACION=27, IGUALACION=28, MAYORIGUAL=29, MENORIGUAL=30, MAYOR=31, MENOR=32, IGUAL=33, AND=34, OR=35, TRUE=36, FALSE=37, INT=38, FLOAT=39, BOOLEAN=40, CHAR=41, STR=42, STRING=43, USIZE=44, PRINT=45, LET=46, MUT=47, IF=48, ELSE=49, LOOP=50, WHILE=51, MATCH=52, FOR=53, IN=54, BRE=55, STRUCT=56, VEC=57, NEWI=58, WITH_CAP=59, PUSH=60, INSERT=61, REMOVE=62, CONTAINS=63, LEN=64, TOCHARS=65, TOSTRING=66, TOOWNED=67, CASTEO=68, CONTINIU=69, ABOSLU=70, RAIZITA=71, CLONATION=72, FUNCT=73, RETURNASO=74, PUBLI=75, MODULO=76, CAPACITY=77, ID=78, WS=79}
2022-05-03 11:39:54:809 semantics LogManager.java:25 strings={'!'=6, '('=7, ')'=8, '{'=9, '}'=10, '['=11, ']'=12, ';'=13, ':'=14, ','=15, '_'=16, '|'=17, '.'=18, '&'=19, '*'=20, '+'=21, '/'=22, '-'=23, 'pow'=24, 'powf'=25, '%'=26, '!='=27, '=='=28, '>='=29, '<='=30, '>'=31, '<'=32, '='=33, '&&'=34, '||'=35, 'true'=36, 'false'=37, 'i64'=38, 'f64'=39, 'bool'=40, 'char'=41, '&str'=42, 'String'=43, 'usize'=44, 'println'=45, 'let'=46, 'mut'=47, 'if'=48, 'else'=49, 'loop'=50, 'while'=51, 'match'=52, 'for'=53, 'in'=54, 'break'=55, 'struct'=56, 'new'=58, 'with_capacity'=59, 'push'=60, 'insert'=61, 'remove'=62, 'contains'=63, 'len'=64, 'chars'=65, 'to_string'=66, 'to_owned'=67, 'as'=68, 'continue'=69, 'abs'=70, 'sqrt'=71, 'clone'=72, 'fn'=73, 'return'=74, 'pub'=75, 'mod'=76, 'capacity'=77}
2022-05-03 11:39:54:894 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-05-03 11:39:54:895 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 45..46, 48, 50..53, 55..56, 69, 73..76, 78}, {<EOF>, 1..4, 6..7, 10, 23, 36..39, 78}]
2022-05-03 11:39:54:895 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:895 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[45, 45, 46, 46, 46, 78, 48, 50, 51, 52, {1..4, 6..7, 23, 36..39, 78}, 53, {55, 69, 74}, 73, 78, 56, {75..76}]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 2 in rule sent_Modulos
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[75, 76]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? true
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 3 in rule intructions_modulos
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[null, 10]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 4 in rule instruct_modulos
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[{75..76}, 75, 73, 75, 56]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 5 in rule atributos_struct
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[null, 10]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 6 in rule atributos_struct_decl
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[78, 78, 78, 78]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 7 in rule sent_funcion
2022-05-03 11:39:54:902 LL1 LogManager.java:25 look=[73, 73, 73, 73, 73, 73, 73, 73, 73, 73]
2022-05-03 11:39:54:902 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:902 LL1 LogManager.java:25 
DECISION 8 in rule params_funcion
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[null, 8]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 9 in rule params_funcion_decl
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[78, 78, 78, 78, 78, 78]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 10 in rule sent_Llamada
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[78, 78]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 11 in rule params_llamada
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 78}, 19]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? true
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 12 in rule params_llamada
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[null, null]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 13 in rule params_llamada
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[null, 8]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 14 in rule funciones_Trans
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[55, 55, 69, 74, 74, 74]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 15 in rule declaracion
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[46, 46, 46, 46, 46, 46]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 16 in rule array_decl
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[46, 46]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 17 in rule array_decl_array
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[11, 11]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 18 in rule vector_decl
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[46, 46, 46, 46]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 19 in rule vector_expr
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[57, 57, 57, 57]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 20 in rule sent_funciones_Vec
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 78}, 78, 78]
2022-05-03 11:39:54:903 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:903 LL1 LogManager.java:25 
DECISION 21 in rule sentencias_expr
2022-05-03 11:39:54:903 LL1 LogManager.java:25 look=[48, 50, 52]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? true
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 22 in rule sent_matchexpr
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[52, 52, 52]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 23 in rule matchexpr_listbrazos
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[null, {10, 16}]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 24 in rule list_brazosexpr
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 78}, {1..4, 6..7, 23, 36..39, 78}]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 25 in rule matchexpr_listbrazosexpr_listexpr
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 78}, {1..4, 6..7, 23, 36..39, 78}]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 26 in rule tipo
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[38, 39, 42, 40, 41, 43, 44]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? true
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 27 in rule asignacion
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[78, 78, 78]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 28 in rule asig_array_vect
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[null, 33]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 29 in rule sent_if_expr
2022-05-03 11:39:54:904 LL1 LogManager.java:25 look=[48, 48, 48]
2022-05-03 11:39:54:904 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:904 LL1 LogManager.java:25 
DECISION 30 in rule sent_instru_if_expre
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 45..46, 48, 50..53, 55..56, 69, 73..76, 78}, {1..4, 6..7, 23, 36..39, 78}]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 31 in rule printaso
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[45, 45]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 32 in rule list_expre_print
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[null, 8]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 33 in rule list_expre_vec_arr
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[null, 12]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 34 in rule sent_if
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[48, 48, 48]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 35 in rule sent_match
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[52, 52]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 36 in rule match_listbrazos
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[null, 16]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 37 in rule list_brazos
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 78}, {1..4, 6..7, 23, 36..39, 78}, {1..4, 6..7, 23, 36..39, 78}, {1..4, 6..7, 23, 36..39, 78}]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 38 in rule match_listbrazos_listexpr
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[null, {17, 33}]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 39 in rule el_default
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[16, 16]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 40 in rule sent_ForIn
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[53, 53]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 41 in rule expression_vec_Arr
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[38, 39, 7, 6, 11, 11, {1..4, 6..7, 23, 36..39, 78}, 57, {1..4, 36..37, 78}]
2022-05-03 11:39:54:905 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:905 LL1 LogManager.java:25 
DECISION 42 in rule expression_vec_Arr
2022-05-03 11:39:54:905 LL1 LogManager.java:25 look=[null, null, null, null, null]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 43 in rule expression_vec_Arr
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[null, null]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 44 in rule atributos_struct_exp
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[null, 10]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 45 in rule atributos_struct_decl_exp
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[78, 78]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 46 in rule expression
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[38, 39, 23, 23, 7, 7, 6, 78, 78, 78, 78, {1..4, 36..37, 78}]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 47 in rule expression
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 48 in rule expression
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[null, null]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 49 in rule llamada_expre
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[78, 78]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 50 in rule primitivo
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[1, 2, {36..37}, 4, 3, 78]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? true
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 51 in rule list_array
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[null, null]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:906 LL1 LogManager.java:25 
DECISION 52 in rule llamadas_structs
2022-05-03 11:39:54:906 LL1 LogManager.java:25 look=[null, null]
2022-05-03 11:39:54:906 LL1 LogManager.java:25 LL(1)? false
2022-05-03 11:39:54:988 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-05-03 11:39:55:090 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-05-03 11:39:55:091 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,31:21]
2022-05-03 11:39:55:091 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,31:30].[@-1,24:24='l',<0>,31:44]
2022-05-03 11:39:55:093 action-translator LogManager.java:25 translate 
        $l = arrayList.New()   
    
2022-05-03 11:39:55:093 action-translator LogManager.java:25 attr [@-1,10:10='l',<0>,36:9]
2022-05-03 11:39:55:096 action-translator LogManager.java:25 translate 
            listInt := localctx.(*InstruccionesContext).GetE()
                for _, e := range listInt { 
                    $l.Add(e.GetInstr())
                 }
            
2022-05-03 11:39:55:096 action-translator LogManager.java:25 attr [@-1,130:130='l',<0>,41:21]
2022-05-03 11:39:55:103 action-translator LogManager.java:25 translate  $instr = $printaso.instr 
2022-05-03 11:39:55:103 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,47:20]
2022-05-03 11:39:55:104 action-translator LogManager.java:25 qattr [@-1,11:18='printaso',<0>,47:29].[@-1,20:24='instr',<0>,47:38]
2022-05-03 11:39:55:104 action-translator LogManager.java:25 translate  $instr = $printaso.instr 
2022-05-03 11:39:55:104 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,48:17]
2022-05-03 11:39:55:104 action-translator LogManager.java:25 qattr [@-1,11:18='printaso',<0>,48:26].[@-1,20:24='instr',<0>,48:35]
2022-05-03 11:39:55:104 action-translator LogManager.java:25 translate  $instr = $declaracion.instr 
2022-05-03 11:39:55:104 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,49:20]
2022-05-03 11:39:55:104 action-translator LogManager.java:25 qattr [@-1,11:21='declaracion',<0>,49:29].[@-1,23:27='instr',<0>,49:41]
2022-05-03 11:39:55:105 action-translator LogManager.java:25 translate  $instr = $vector_decl.instr 
2022-05-03 11:39:55:105 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,50:20]
2022-05-03 11:39:55:105 action-translator LogManager.java:25 qattr [@-1,11:21='vector_decl',<0>,50:29].[@-1,23:27='instr',<0>,50:41]
2022-05-03 11:39:55:105 action-translator LogManager.java:25 translate  $instr = $array_decl.instr 
2022-05-03 11:39:55:105 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,51:19]
2022-05-03 11:39:55:105 action-translator LogManager.java:25 qattr [@-1,11:20='array_decl',<0>,51:28].[@-1,22:26='instr',<0>,51:39]
2022-05-03 11:39:55:105 action-translator LogManager.java:25 translate  $instr = $asignacion.instr 
2022-05-03 11:39:55:105 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,52:19]
2022-05-03 11:39:55:105 action-translator LogManager.java:25 qattr [@-1,11:20='asignacion',<0>,52:28].[@-1,22:26='instr',<0>,52:39]
2022-05-03 11:39:55:106 action-translator LogManager.java:25 translate  $instr = $sent_if.instr 
2022-05-03 11:39:55:106 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,53:18]
2022-05-03 11:39:55:106 action-translator LogManager.java:25 qattr [@-1,11:17='sent_if',<0>,53:27].[@-1,19:23='instr',<0>,53:35]
2022-05-03 11:39:55:106 action-translator LogManager.java:25 translate  $instr = $sent_loop.instr 
2022-05-03 11:39:55:106 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,54:18]
2022-05-03 11:39:55:106 action-translator LogManager.java:25 qattr [@-1,11:19='sent_loop',<0>,54:27].[@-1,21:25='instr',<0>,54:37]
2022-05-03 11:39:55:106 action-translator LogManager.java:25 translate  $instr = $sent_while.instr 
2022-05-03 11:39:55:106 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,55:19]
2022-05-03 11:39:55:106 action-translator LogManager.java:25 qattr [@-1,11:20='sent_while',<0>,55:28].[@-1,22:26='instr',<0>,55:39]
2022-05-03 11:39:55:107 action-translator LogManager.java:25 translate  $instr = $sent_match.instr 
2022-05-03 11:39:55:107 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,56:19]
2022-05-03 11:39:55:107 action-translator LogManager.java:25 qattr [@-1,11:20='sent_match',<0>,56:28].[@-1,22:26='instr',<0>,56:39]
2022-05-03 11:39:55:107 action-translator LogManager.java:25 translate  $instr = $sent_funciones_Vec.instr 
2022-05-03 11:39:55:107 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,57:27]
2022-05-03 11:39:55:107 action-translator LogManager.java:25 qattr [@-1,11:28='sent_funciones_Vec',<0>,57:36].[@-1,30:34='instr',<0>,57:55]
2022-05-03 11:39:55:107 action-translator LogManager.java:25 translate  $instr = $sent_ForIn.instr 
2022-05-03 11:39:55:107 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,58:19]
2022-05-03 11:39:55:107 action-translator LogManager.java:25 qattr [@-1,11:20='sent_ForIn',<0>,58:28].[@-1,22:26='instr',<0>,58:39]
2022-05-03 11:39:55:108 action-translator LogManager.java:25 translate  $instr = $funciones_Trans.instr 
2022-05-03 11:39:55:108 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,59:24]
2022-05-03 11:39:55:108 action-translator LogManager.java:25 qattr [@-1,11:25='funciones_Trans',<0>,59:33].[@-1,27:31='instr',<0>,59:49]
2022-05-03 11:39:55:108 action-translator LogManager.java:25 translate  $instr = $sent_funcion.instr 
2022-05-03 11:39:55:108 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,60:21]
2022-05-03 11:39:55:108 action-translator LogManager.java:25 qattr [@-1,11:22='sent_funcion',<0>,60:30].[@-1,24:28='instr',<0>,60:43]
2022-05-03 11:39:55:108 action-translator LogManager.java:25 translate  $instr = $sent_Llamada.instr 
2022-05-03 11:39:55:108 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,61:21]
2022-05-03 11:39:55:108 action-translator LogManager.java:25 qattr [@-1,11:22='sent_Llamada',<0>,61:30].[@-1,24:28='instr',<0>,61:43]
2022-05-03 11:39:55:109 action-translator LogManager.java:25 translate  $instr = $sent_struct.instr 
2022-05-03 11:39:55:109 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,62:20]
2022-05-03 11:39:55:109 action-translator LogManager.java:25 qattr [@-1,11:21='sent_struct',<0>,62:29].[@-1,23:27='instr',<0>,62:41]
2022-05-03 11:39:55:109 action-translator LogManager.java:25 translate  $instr = $sent_Modulos.instr 
2022-05-03 11:39:55:109 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,63:21]
2022-05-03 11:39:55:109 action-translator LogManager.java:25 qattr [@-1,11:22='sent_Modulos',<0>,63:30].[@-1,24:28='instr',<0>,63:43]
2022-05-03 11:39:55:124 action-translator LogManager.java:25 translate  $instr = modulos.NewModulos($ID.text, interfaces.PUBLICO, $li.l, $MODULO.line, $MODULO.pos) 
2022-05-03 11:39:55:126 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,67:63]
2022-05-03 11:39:55:127 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,67:91].[@-1,33:36='text',<0>,67:94]
2022-05-03 11:39:55:127 action-translator LogManager.java:25 qattr [@-1,60:61='li',<0>,67:121].[@-1,63:63='l',<0>,67:124]
2022-05-03 11:39:55:127 action-translator LogManager.java:25 qattr [@-1,67:72='MODULO',<0>,67:128].[@-1,74:77='line',<0>,67:135]
2022-05-03 11:39:55:128 action-translator LogManager.java:25 qattr [@-1,81:86='MODULO',<0>,67:142].[@-1,88:90='pos',<0>,67:149]
2022-05-03 11:39:55:130 action-translator LogManager.java:25 translate  $instr = modulos.NewModulos($ID.text, interfaces.PRIVADO, $li.l, $MODULO.line, $MODULO.pos) 
2022-05-03 11:39:55:130 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,68:63]
2022-05-03 11:39:55:130 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,68:91].[@-1,33:36='text',<0>,68:94]
2022-05-03 11:39:55:132 action-translator LogManager.java:25 qattr [@-1,60:61='li',<0>,68:121].[@-1,63:63='l',<0>,68:124]
2022-05-03 11:39:55:132 action-translator LogManager.java:25 qattr [@-1,67:72='MODULO',<0>,68:128].[@-1,74:77='line',<0>,68:135]
2022-05-03 11:39:55:132 action-translator LogManager.java:25 qattr [@-1,81:86='MODULO',<0>,68:142].[@-1,88:90='pos',<0>,68:149]
2022-05-03 11:39:55:134 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:134 action-translator LogManager.java:25 translate  
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     
2022-05-03 11:39:55:134 action-translator LogManager.java:25 qattr [@-1,49:64='instruct_modulos',<0>,4:15].[@-1,66:70='instr',<0>,4:32]
2022-05-03 11:39:55:134 action-translator LogManager.java:25 attr [@-1,83:83='l',<0>,5:9]
2022-05-03 11:39:55:135 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:135 action-translator LogManager.java:25 translate  
                  $li.l.Add($instruct_modulos.instr)  
                  $l = $li.l
               
2022-05-03 11:39:55:135 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,10:19].[@-1,25:25='l',<0>,10:22]
2022-05-03 11:39:55:136 action-translator LogManager.java:25 qattr [@-1,32:47='instruct_modulos',<0>,10:29].[@-1,49:53='instr',<0>,10:46]
2022-05-03 11:39:55:136 action-translator LogManager.java:25 attr [@-1,78:78='l',<0>,11:19]
2022-05-03 11:39:55:136 action-translator LogManager.java:25 qattr [@-1,83:84='li',<0>,11:24].[@-1,86:86='l',<0>,11:27]
2022-05-03 11:39:55:137 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:137 action-translator LogManager.java:25 translate  $instr = $sent_Modulos.instr 
2022-05-03 11:39:55:137 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,84:30]
2022-05-03 11:39:55:137 action-translator LogManager.java:25 qattr [@-1,11:22='sent_Modulos',<0>,84:39].[@-1,24:28='instr',<0>,84:52]
2022-05-03 11:39:55:138 action-translator LogManager.java:25 translate  $instr = modulos.NewFuncion_Mod( $sent_funcion.instr, interfaces.PUBLICO, $PUBLI.line, $PUBLI.pos ) 
2022-05-03 11:39:55:138 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,85:30]
2022-05-03 11:39:55:138 action-translator LogManager.java:25 qattr [@-1,35:46='sent_funcion',<0>,85:63].[@-1,48:52='instr',<0>,85:76]
2022-05-03 11:39:55:138 action-translator LogManager.java:25 qattr [@-1,76:80='PUBLI',<0>,85:104].[@-1,82:85='line',<0>,85:110]
2022-05-03 11:39:55:138 action-translator LogManager.java:25 qattr [@-1,89:93='PUBLI',<0>,85:117].[@-1,95:97='pos',<0>,85:123]
2022-05-03 11:39:55:139 action-translator LogManager.java:25 translate  $instr = modulos.NewFuncion_Mod( $sf.instr, interfaces.PRIVADO, 0, 0 ) 
2022-05-03 11:39:55:139 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,86:30]
2022-05-03 11:39:55:139 action-translator LogManager.java:25 qattr [@-1,35:36='sf',<0>,86:63].[@-1,38:42='instr',<0>,86:66]
2022-05-03 11:39:55:139 action-translator LogManager.java:25 translate  $instr = modulos.NewStruct_Mod( $sent_struct.instr, interfaces.PUBLICO , $PUBLI.line, $PUBLI.pos ) 
2022-05-03 11:39:55:139 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,87:30]
2022-05-03 11:39:55:139 action-translator LogManager.java:25 qattr [@-1,34:44='sent_struct',<0>,87:62].[@-1,46:50='instr',<0>,87:74]
2022-05-03 11:39:55:139 action-translator LogManager.java:25 qattr [@-1,75:79='PUBLI',<0>,87:103].[@-1,81:84='line',<0>,87:109]
2022-05-03 11:39:55:140 action-translator LogManager.java:25 qattr [@-1,88:92='PUBLI',<0>,87:116].[@-1,94:96='pos',<0>,87:122]
2022-05-03 11:39:55:140 action-translator LogManager.java:25 translate  $instr = modulos.NewStruct_Mod( $ss.instr, interfaces.PUBLICO , 0, 0 ) 
2022-05-03 11:39:55:140 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,88:33]
2022-05-03 11:39:55:140 action-translator LogManager.java:25 qattr [@-1,34:35='ss',<0>,88:65].[@-1,37:41='instr',<0>,88:68]
2022-05-03 11:39:55:141 action-translator LogManager.java:25 translate  $instr = structs.NewStruct($ID.text, $atributos_struct.l,$STRUCT.line,$STRUCT.pos) 
2022-05-03 11:39:55:141 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,92:49]
2022-05-03 11:39:55:141 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,92:76].[@-1,32:35='text',<0>,92:79]
2022-05-03 11:39:55:141 action-translator LogManager.java:25 qattr [@-1,39:54='atributos_struct',<0>,92:86].[@-1,56:56='l',<0>,92:103]
2022-05-03 11:39:55:142 action-translator LogManager.java:25 qattr [@-1,59:64='STRUCT',<0>,92:106].[@-1,66:69='line',<0>,92:113]
2022-05-03 11:39:55:142 action-translator LogManager.java:25 qattr [@-1,72:77='STRUCT',<0>,92:119].[@-1,79:81='pos',<0>,92:126]
2022-05-03 11:39:55:142 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:142 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    
2022-05-03 11:39:55:143 action-translator LogManager.java:25 qattr [@-1,47:67='atributos_struct_decl',<0>,4:15].[@-1,69:69='s',<0>,4:37]
2022-05-03 11:39:55:143 action-translator LogManager.java:25 attr [@-1,82:82='l',<0>,5:9]
2022-05-03 11:39:55:143 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:143 action-translator LogManager.java:25 translate 
                  $li.l.Add($asd.s)
                  $l = $li.l
              
2022-05-03 11:39:55:143 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-05-03 11:39:55:143 action-translator LogManager.java:25 qattr [@-1,31:33='asd',<0>,10:29].[@-1,35:35='s',<0>,10:33]
2022-05-03 11:39:55:143 action-translator LogManager.java:25 attr [@-1,58:58='l',<0>,11:19]
2022-05-03 11:39:55:144 action-translator LogManager.java:25 qattr [@-1,63:64='li',<0>,11:24].[@-1,66:66='l',<0>,11:27]
2022-05-03 11:39:55:144 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:145 action-translator LogManager.java:25 translate $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6}
2022-05-03 11:39:55:145 action-translator LogManager.java:25 attr [@-1,1:1='s',<0>,107:31]
2022-05-03 11:39:55:145 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,107:59].[@-1,32:35='text',<0>,107:62]
2022-05-03 11:39:55:146 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10} 
2022-05-03 11:39:55:146 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,108:27]
2022-05-03 11:39:55:146 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,108:55].[@-1,33:36='text',<0>,108:58]
2022-05-03 11:39:55:146 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te} 
2022-05-03 11:39:55:146 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,109:20]
2022-05-03 11:39:55:146 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,109:48].[@-1,33:36='text',<0>,109:51]
2022-05-03 11:39:55:147 action-translator LogManager.java:25 qattr [@-1,46:49='tipo',<0>,109:64].[@-1,51:52='te',<0>,109:69]
2022-05-03 11:39:55:147 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $id1.text, Tipo: 9, Valor: $id2.text} 
2022-05-03 11:39:55:147 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,110:26]
2022-05-03 11:39:55:147 action-translator LogManager.java:25 qattr [@-1,30:32='id1',<0>,110:54].[@-1,34:37='text',<0>,110:58]
2022-05-03 11:39:55:147 action-translator LogManager.java:25 qattr [@-1,57:59='id2',<0>,110:81].[@-1,61:64='text',<0>,110:85]
2022-05-03 11:39:55:150 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:150 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,115:9]
2022-05-03 11:39:55:150 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,115:41].[@-1,46:49='text',<0>,115:44]
2022-05-03 11:39:55:151 action-translator LogManager.java:25 qattr [@-1,87:99='instrucciones',<0>,115:85].[@-1,101:101='l',<0>,115:99]
2022-05-03 11:39:55:151 action-translator LogManager.java:25 qattr [@-1,105:109='FUNCT',<0>,115:103].[@-1,111:114='line',<0>,115:109]
2022-05-03 11:39:55:151 action-translator LogManager.java:25 qattr [@-1,118:122='FUNCT',<0>,115:116].[@-1,124:126='pos',<0>,115:122]
2022-05-03 11:39:55:151 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:151 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,118:9]
2022-05-03 11:39:55:152 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,118:41].[@-1,45:48='text',<0>,118:44]
2022-05-03 11:39:55:152 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,118:51].[@-1,67:67='l',<0>,118:66]
2022-05-03 11:39:55:152 action-translator LogManager.java:25 qattr [@-1,88:100='instrucciones',<0>,118:87].[@-1,102:102='l',<0>,118:101]
2022-05-03 11:39:55:152 action-translator LogManager.java:25 qattr [@-1,106:110='FUNCT',<0>,118:105].[@-1,112:115='line',<0>,118:111]
2022-05-03 11:39:55:152 action-translator LogManager.java:25 qattr [@-1,119:123='FUNCT',<0>,118:118].[@-1,125:127='pos',<0>,118:124]
2022-05-03 11:39:55:152 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:153 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,121:9]
2022-05-03 11:39:55:153 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,121:41].[@-1,46:49='text',<0>,121:44]
2022-05-03 11:39:55:153 action-translator LogManager.java:25 qattr [@-1,70:73='tipo',<0>,121:68].[@-1,75:76='te',<0>,121:73]
2022-05-03 11:39:55:153 action-translator LogManager.java:25 qattr [@-1,80:92='instrucciones',<0>,121:78].[@-1,94:94='l',<0>,121:92]
2022-05-03 11:39:55:153 action-translator LogManager.java:25 qattr [@-1,98:102='FUNCT',<0>,121:96].[@-1,104:107='line',<0>,121:102]
2022-05-03 11:39:55:153 action-translator LogManager.java:25 qattr [@-1,111:115='FUNCT',<0>,121:109].[@-1,117:119='pos',<0>,121:115]
2022-05-03 11:39:55:154 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:155 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,124:9]
2022-05-03 11:39:55:155 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,124:41].[@-1,45:48='text',<0>,124:44]
2022-05-03 11:39:55:155 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,124:51].[@-1,67:67='l',<0>,124:66]
2022-05-03 11:39:55:155 action-translator LogManager.java:25 qattr [@-1,71:74='tipo',<0>,124:70].[@-1,76:77='te',<0>,124:75]
2022-05-03 11:39:55:155 action-translator LogManager.java:25 qattr [@-1,81:93='instrucciones',<0>,124:80].[@-1,95:95='l',<0>,124:94]
2022-05-03 11:39:55:155 action-translator LogManager.java:25 qattr [@-1,99:103='FUNCT',<0>,124:98].[@-1,105:108='line',<0>,124:104]
2022-05-03 11:39:55:156 action-translator LogManager.java:25 qattr [@-1,112:116='FUNCT',<0>,124:111].[@-1,118:120='pos',<0>,124:117]
2022-05-03 11:39:55:157 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($id1.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:157 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,127:9]
2022-05-03 11:39:55:157 action-translator LogManager.java:25 qattr [@-1,43:45='id1',<0>,127:41].[@-1,47:50='text',<0>,127:45]
2022-05-03 11:39:55:157 action-translator LogManager.java:25 qattr [@-1,88:100='instrucciones',<0>,127:86].[@-1,102:102='l',<0>,127:100]
2022-05-03 11:39:55:157 action-translator LogManager.java:25 qattr [@-1,106:110='FUNCT',<0>,127:104].[@-1,112:115='line',<0>,127:110]
2022-05-03 11:39:55:157 action-translator LogManager.java:25 qattr [@-1,119:123='FUNCT',<0>,127:117].[@-1,125:127='pos',<0>,127:123]
2022-05-03 11:39:55:158 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($id1.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:158 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,130:9]
2022-05-03 11:39:55:158 action-translator LogManager.java:25 qattr [@-1,42:44='id1',<0>,130:41].[@-1,46:49='text',<0>,130:45]
2022-05-03 11:39:55:158 action-translator LogManager.java:25 qattr [@-1,53:66='params_funcion',<0>,130:52].[@-1,68:68='l',<0>,130:67]
2022-05-03 11:39:55:162 action-translator LogManager.java:25 qattr [@-1,89:101='instrucciones',<0>,130:88].[@-1,103:103='l',<0>,130:102]
2022-05-03 11:39:55:162 action-translator LogManager.java:25 qattr [@-1,107:111='FUNCT',<0>,130:106].[@-1,113:116='line',<0>,130:112]
2022-05-03 11:39:55:163 action-translator LogManager.java:25 qattr [@-1,120:124='FUNCT',<0>,130:119].[@-1,126:128='pos',<0>,130:125]
2022-05-03 11:39:55:163 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:163 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,133:9]
2022-05-03 11:39:55:163 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,133:41].[@-1,46:49='text',<0>,133:44]
2022-05-03 11:39:55:163 action-translator LogManager.java:25 qattr [@-1,88:100='instrucciones',<0>,133:86].[@-1,102:102='l',<0>,133:100]
2022-05-03 11:39:55:163 action-translator LogManager.java:25 qattr [@-1,106:110='FUNCT',<0>,133:104].[@-1,112:115='line',<0>,133:110]
2022-05-03 11:39:55:163 action-translator LogManager.java:25 qattr [@-1,119:123='FUNCT',<0>,133:117].[@-1,125:127='pos',<0>,133:123]
2022-05-03 11:39:55:164 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:164 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,136:9]
2022-05-03 11:39:55:164 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,136:41].[@-1,45:48='text',<0>,136:44]
2022-05-03 11:39:55:165 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,136:51].[@-1,67:67='l',<0>,136:66]
2022-05-03 11:39:55:165 action-translator LogManager.java:25 qattr [@-1,89:101='instrucciones',<0>,136:88].[@-1,103:103='l',<0>,136:102]
2022-05-03 11:39:55:165 action-translator LogManager.java:25 qattr [@-1,107:111='FUNCT',<0>,136:106].[@-1,113:116='line',<0>,136:112]
2022-05-03 11:39:55:165 action-translator LogManager.java:25 qattr [@-1,120:124='FUNCT',<0>,136:119].[@-1,126:128='pos',<0>,136:125]
2022-05-03 11:39:55:166 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:166 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,139:9]
2022-05-03 11:39:55:166 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,139:41].[@-1,46:49='text',<0>,139:44]
2022-05-03 11:39:55:166 action-translator LogManager.java:25 qattr [@-1,89:101='instrucciones',<0>,139:87].[@-1,103:103='l',<0>,139:101]
2022-05-03 11:39:55:166 action-translator LogManager.java:25 qattr [@-1,107:111='FUNCT',<0>,139:105].[@-1,113:116='line',<0>,139:111]
2022-05-03 11:39:55:166 action-translator LogManager.java:25 qattr [@-1,120:124='FUNCT',<0>,139:118].[@-1,126:128='pos',<0>,139:124]
2022-05-03 11:39:55:167 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-05-03 11:39:55:167 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,142:9]
2022-05-03 11:39:55:167 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,142:41].[@-1,45:48='text',<0>,142:44]
2022-05-03 11:39:55:167 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,142:51].[@-1,67:67='l',<0>,142:66]
2022-05-03 11:39:55:167 action-translator LogManager.java:25 qattr [@-1,90:102='instrucciones',<0>,142:89].[@-1,104:104='l',<0>,142:103]
2022-05-03 11:39:55:167 action-translator LogManager.java:25 qattr [@-1,108:112='FUNCT',<0>,142:107].[@-1,114:117='line',<0>,142:113]
2022-05-03 11:39:55:167 action-translator LogManager.java:25 qattr [@-1,121:125='FUNCT',<0>,142:120].[@-1,127:129='pos',<0>,142:126]
2022-05-03 11:39:55:168 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:168 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     
2022-05-03 11:39:55:168 action-translator LogManager.java:25 qattr [@-1,48:66='params_funcion_decl',<0>,4:15].[@-1,68:68='s',<0>,4:35]
2022-05-03 11:39:55:168 action-translator LogManager.java:25 attr [@-1,81:81='l',<0>,5:9]
2022-05-03 11:39:55:168 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:168 action-translator LogManager.java:25 translate 
                  $li.l.Add($params_funcion_decl.s)  
                  $l = $li.l
              
2022-05-03 11:39:55:168 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-05-03 11:39:55:168 action-translator LogManager.java:25 qattr [@-1,31:49='params_funcion_decl',<0>,10:29].[@-1,51:51='s',<0>,10:49]
2022-05-03 11:39:55:169 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,11:19]
2022-05-03 11:39:55:169 action-translator LogManager.java:25 qattr [@-1,81:82='li',<0>,11:24].[@-1,84:84='l',<0>,11:27]
2022-05-03 11:39:55:169 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:170 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: true} 
2022-05-03 11:39:55:171 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,158:46]
2022-05-03 11:39:55:171 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,158:74].[@-1,33:36='text',<0>,158:77]
2022-05-03 11:39:55:171 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: false} 
2022-05-03 11:39:55:171 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,159:46]
2022-05-03 11:39:55:171 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,159:74].[@-1,33:36='text',<0>,159:77]
2022-05-03 11:39:55:171 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: true} 
2022-05-03 11:39:55:171 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,160:46]
2022-05-03 11:39:55:172 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,160:74].[@-1,33:36='text',<0>,160:77]
2022-05-03 11:39:55:172 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: false} 
2022-05-03 11:39:55:172 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,161:46]
2022-05-03 11:39:55:172 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,161:74].[@-1,33:36='text',<0>,161:77]
2022-05-03 11:39:55:172 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: true} 
2022-05-03 11:39:55:172 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,162:46]
2022-05-03 11:39:55:172 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,162:74].[@-1,33:36='text',<0>,162:77]
2022-05-03 11:39:55:173 action-translator LogManager.java:25 qattr [@-1,46:49='tipo',<0>,162:90].[@-1,51:52='te',<0>,162:95]
2022-05-03 11:39:55:173 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: false} 
2022-05-03 11:39:55:173 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,163:46]
2022-05-03 11:39:55:173 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,163:74].[@-1,33:36='text',<0>,163:77]
2022-05-03 11:39:55:173 action-translator LogManager.java:25 qattr [@-1,46:49='tipo',<0>,163:90].[@-1,51:52='te',<0>,163:95]
2022-05-03 11:39:55:174 action-translator LogManager.java:25 translate  $instr = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) 
2022-05-03 11:39:55:175 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,166:25]
2022-05-03 11:39:55:175 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,166:57].[@-1,37:40='text',<0>,166:60]
2022-05-03 11:39:55:175 action-translator LogManager.java:25 qattr [@-1,61:64='PARA',<0>,166:84].[@-1,66:69='line',<0>,166:89]
2022-05-03 11:39:55:176 action-translator LogManager.java:25 qattr [@-1,73:76='PARA',<0>,166:96].[@-1,78:80='pos',<0>,166:101]
2022-05-03 11:39:55:176 action-translator LogManager.java:25 translate  $instr = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) 
2022-05-03 11:39:55:176 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,167:43]
2022-05-03 11:39:55:176 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,167:75].[@-1,37:40='text',<0>,167:78]
2022-05-03 11:39:55:177 action-translator LogManager.java:25 qattr [@-1,44:45='li',<0>,167:85].[@-1,47:47='l',<0>,167:88]
2022-05-03 11:39:55:177 action-translator LogManager.java:25 qattr [@-1,51:54='PARA',<0>,167:92].[@-1,56:59='line',<0>,167:97]
2022-05-03 11:39:55:177 action-translator LogManager.java:25 qattr [@-1,63:66='PARA',<0>,167:104].[@-1,68:70='pos',<0>,167:109]
2022-05-03 11:39:55:178 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:178 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-05-03 11:39:55:178 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-05-03 11:39:55:178 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-05-03 11:39:55:178 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-05-03 11:39:55:178 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,9:15].[@-1,58:58='p',<0>,9:26]
2022-05-03 11:39:55:178 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,10:9]
2022-05-03 11:39:55:179 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-03 11:39:55:179 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  
2022-05-03 11:39:55:179 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,15:19].[@-1,25:25='l',<0>,15:22]
2022-05-03 11:39:55:179 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,15:29].[@-1,43:43='p',<0>,15:40]
2022-05-03 11:39:55:179 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,16:19]
2022-05-03 11:39:55:179 action-translator LogManager.java:25 qattr [@-1,73:74='li',<0>,16:24].[@-1,76:76='l',<0>,16:27]
2022-05-03 11:39:55:179 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-05-03 11:39:55:179 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  
2022-05-03 11:39:55:179 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,19:19].[@-1,25:25='l',<0>,19:22]
2022-05-03 11:39:55:180 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,19:29].[@-1,43:43='p',<0>,19:40]
2022-05-03 11:39:55:180 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,20:19]
2022-05-03 11:39:55:180 action-translator LogManager.java:25 qattr [@-1,73:74='li',<0>,20:24].[@-1,76:76='l',<0>,20:27]
2022-05-03 11:39:55:180 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-03 11:39:55:180 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-05-03 11:39:55:181 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewBreak( nil, $BRE.line, $BRE.pos ) 
2022-05-03 11:39:55:181 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,192:16]
2022-05-03 11:39:55:181 action-translator LogManager.java:25 qattr [@-1,49:51='BRE',<0>,192:63].[@-1,53:56='line',<0>,192:67]
2022-05-03 11:39:55:181 action-translator LogManager.java:25 qattr [@-1,60:62='BRE',<0>,192:74].[@-1,64:66='pos',<0>,192:78]
2022-05-03 11:39:55:181 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewBreak( $expression.p, $BRE.line, $BRE.pos ) 
2022-05-03 11:39:55:181 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,193:27]
2022-05-03 11:39:55:181 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,193:69].[@-1,55:55='p',<0>,193:80]
2022-05-03 11:39:55:181 action-translator LogManager.java:25 qattr [@-1,59:61='BRE',<0>,193:84].[@-1,63:66='line',<0>,193:88]
2022-05-03 11:39:55:182 action-translator LogManager.java:25 qattr [@-1,70:72='BRE',<0>,193:95].[@-1,74:76='pos',<0>,193:99]
2022-05-03 11:39:55:182 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewContinue($CONTINIU.line, $CONTINIU.pos) 
2022-05-03 11:39:55:182 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,194:21]
2022-05-03 11:39:55:182 action-translator LogManager.java:25 qattr [@-1,46:53='CONTINIU',<0>,194:65].[@-1,55:58='line',<0>,194:74]
2022-05-03 11:39:55:182 action-translator LogManager.java:25 qattr [@-1,62:69='CONTINIU',<0>,194:81].[@-1,71:73='pos',<0>,194:90]
2022-05-03 11:39:55:182 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewReturnaso(nil, $RETURNASO.line, $RETURNASO.pos) 
2022-05-03 11:39:55:182 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,195:22]
2022-05-03 11:39:55:182 action-translator LogManager.java:25 qattr [@-1,52:60='RETURNASO',<0>,195:72].[@-1,62:65='line',<0>,195:82]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 qattr [@-1,69:77='RETURNASO',<0>,195:89].[@-1,79:81='pos',<0>,195:99]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewReturnaso($expression.p, $RETURNASO.line, $RETURNASO.pos) 
2022-05-03 11:39:55:183 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,196:34]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,196:79].[@-1,58:58='p',<0>,196:90]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 qattr [@-1,62:70='RETURNASO',<0>,196:94].[@-1,72:75='line',<0>,196:104]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 qattr [@-1,79:87='RETURNASO',<0>,196:111].[@-1,89:91='pos',<0>,196:121]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewReturnaso($expression_vec_Arr.p, $RETURNASO.line, $RETURNASO.pos) 
2022-05-03 11:39:55:183 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,197:42]
2022-05-03 11:39:55:183 action-translator LogManager.java:25 qattr [@-1,47:64='expression_vec_Arr',<0>,197:87].[@-1,66:66='p',<0>,197:106]
2022-05-03 11:39:55:184 action-translator LogManager.java:25 qattr [@-1,70:78='RETURNASO',<0>,197:110].[@-1,80:83='line',<0>,197:120]
2022-05-03 11:39:55:184 action-translator LogManager.java:25 qattr [@-1,87:95='RETURNASO',<0>,197:127].[@-1,97:99='pos',<0>,197:137]
2022-05-03 11:39:55:185 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        
2022-05-03 11:39:55:185 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,202:9]
2022-05-03 11:39:55:185 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,202:45].[@-1,50:53='text',<0>,202:48]
2022-05-03 11:39:55:185 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,202:55].[@-1,62:63='te',<0>,202:60]
2022-05-03 11:39:55:185 action-translator LogManager.java:25 qattr [@-1,71:80='expression',<0>,202:69].[@-1,82:82='p',<0>,202:80]
2022-05-03 11:39:55:185 action-translator LogManager.java:25 qattr [@-1,92:96='IGUAL',<0>,202:90].[@-1,98:101='line',<0>,202:96]
2022-05-03 11:39:55:185 action-translator LogManager.java:25 qattr [@-1,104:108='IGUAL',<0>,202:102].[@-1,110:112='pos',<0>,202:108]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        
2022-05-03 11:39:55:186 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,205:9]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,205:45].[@-1,50:53='text',<0>,205:48]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,205:55].[@-1,62:63='te',<0>,205:60]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 qattr [@-1,71:80='expression',<0>,205:69].[@-1,82:82='p',<0>,205:80]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 qattr [@-1,94:98='IGUAL',<0>,205:92].[@-1,100:103='line',<0>,205:98]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 qattr [@-1,106:110='IGUAL',<0>,205:104].[@-1,112:114='pos',<0>,205:110]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 translate  
        var a interfaces.TipoExpresion
        $instr = instruction.NewDeclaration($id1.text, a, $id2.text, $expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        
2022-05-03 11:39:55:186 action-translator LogManager.java:25 attr [@-1,50:54='instr',<0>,209:9]
2022-05-03 11:39:55:186 action-translator LogManager.java:25 qattr [@-1,86:88='id1',<0>,209:45].[@-1,90:93='text',<0>,209:49]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,100:102='id2',<0>,209:59].[@-1,104:107='text',<0>,209:63]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,111:120='expression',<0>,209:70].[@-1,122:122='p',<0>,209:81]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,132:136='IGUAL',<0>,209:91].[@-1,138:141='line',<0>,209:97]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,144:148='IGUAL',<0>,209:103].[@-1,150:152='pos',<0>,209:109]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 translate  
        var a interfaces.TipoExpresion
        $instr = instruction.NewDeclaration($id1.text, a, $id2.text ,$expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        
2022-05-03 11:39:55:187 action-translator LogManager.java:25 attr [@-1,50:54='instr',<0>,213:9]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,86:88='id1',<0>,213:45].[@-1,90:93='text',<0>,213:49]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,100:102='id2',<0>,213:59].[@-1,104:107='text',<0>,213:63]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,111:120='expression',<0>,213:70].[@-1,122:122='p',<0>,213:81]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,134:138='IGUAL',<0>,213:93].[@-1,140:143='line',<0>,213:99]
2022-05-03 11:39:55:187 action-translator LogManager.java:25 qattr [@-1,146:150='IGUAL',<0>,213:105].[@-1,152:154='pos',<0>,213:111]
2022-05-03 11:39:55:188 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$sentencias_expr.p, true,$IGUAL.line,$IGUAL.pos ) 
        
2022-05-03 11:39:55:188 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,217:9]
2022-05-03 11:39:55:188 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,217:45].[@-1,50:53='text',<0>,217:48]
2022-05-03 11:39:55:188 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,217:55].[@-1,62:63='te',<0>,217:60]
2022-05-03 11:39:55:188 action-translator LogManager.java:25 qattr [@-1,71:85='sentencias_expr',<0>,217:69].[@-1,87:87='p',<0>,217:85]
2022-05-03 11:39:55:188 action-translator LogManager.java:25 qattr [@-1,96:100='IGUAL',<0>,217:94].[@-1,102:105='line',<0>,217:100]
2022-05-03 11:39:55:188 action-translator LogManager.java:25 qattr [@-1,108:112='IGUAL',<0>,217:106].[@-1,114:116='pos',<0>,217:112]
2022-05-03 11:39:55:189 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, "" ,$sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        
2022-05-03 11:39:55:189 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,220:9]
2022-05-03 11:39:55:189 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,220:45].[@-1,50:53='text',<0>,220:48]
2022-05-03 11:39:55:189 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,220:55].[@-1,62:63='te',<0>,220:60]
2022-05-03 11:39:55:189 action-translator LogManager.java:25 qattr [@-1,71:85='sentencias_expr',<0>,220:69].[@-1,87:87='p',<0>,220:85]
2022-05-03 11:39:55:189 action-translator LogManager.java:25 qattr [@-1,98:102='IGUAL',<0>,220:96].[@-1,104:107='line',<0>,220:102]
2022-05-03 11:39:55:189 action-translator LogManager.java:25 qattr [@-1,110:114='IGUAL',<0>,220:108].[@-1,116:118='pos',<0>,220:114]
2022-05-03 11:39:55:190 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, true, $LET.line,$LET.pos) 
    
2022-05-03 11:39:55:190 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,226:9]
2022-05-03 11:39:55:190 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,226:51].[@-1,56:59='text',<0>,226:54]
2022-05-03 11:39:55:190 action-translator LogManager.java:25 qattr [@-1,63:64='tr',<0>,226:61].[@-1,66:67='at',<0>,226:64]
2022-05-03 11:39:55:190 action-translator LogManager.java:25 qattr [@-1,71:72='ea',<0>,226:69].[@-1,74:74='p',<0>,226:72]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,84:86='LET',<0>,226:82].[@-1,88:91='line',<0>,226:86]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,94:96='LET',<0>,226:92].[@-1,98:100='pos',<0>,226:96]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, false, $LET.line,$LET.pos) 
    
2022-05-03 11:39:55:191 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,229:9]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,229:51].[@-1,55:58='text',<0>,229:54]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,62:63='tr',<0>,229:61].[@-1,65:66='at',<0>,229:64]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,70:71='ea',<0>,229:69].[@-1,73:73='p',<0>,229:72]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,84:86='LET',<0>,229:83].[@-1,88:91='line',<0>,229:87]
2022-05-03 11:39:55:191 action-translator LogManager.java:25 qattr [@-1,94:96='LET',<0>,229:93].[@-1,98:100='pos',<0>,229:97]
2022-05-03 11:39:55:192 action-translator LogManager.java:25 translate 
        a:= &structsinter.Array_type{
                Tipo: $stru.at.Tipo,
                Size: $expression_vec_Arr.p,
                Array_Son: $stru.at,
	        }
        $at = a 
    
2022-05-03 11:39:55:192 action-translator LogManager.java:25 qattr [@-1,62:65='stru',<0>,236:23].[@-1,67:68='at',<0>,236:28]
2022-05-03 11:39:55:192 action-translator LogManager.java:25 qattr [@-1,99:116='expression_vec_Arr',<0>,237:23].[@-1,118:118='p',<0>,237:42]
2022-05-03 11:39:55:192 action-translator LogManager.java:25 qattr [@-1,149:152='stru',<0>,238:28].[@-1,154:155='at',<0>,238:33]
2022-05-03 11:39:55:193 action-translator LogManager.java:25 attr [@-1,178:179='at',<0>,240:9]
2022-05-03 11:39:55:193 action-translator LogManager.java:25 translate 
        a:= &structsinter.Array_type{
                Tipo: $tipo.te,
                Size: $expression_vec_Arr.p,
                Array_Son: nil,
	        }
        $at = a
    
2022-05-03 11:39:55:193 action-translator LogManager.java:25 qattr [@-1,62:65='tipo',<0>,244:23].[@-1,67:68='te',<0>,244:28]
2022-05-03 11:39:55:193 action-translator LogManager.java:25 qattr [@-1,94:111='expression_vec_Arr',<0>,245:23].[@-1,113:113='p',<0>,245:42]
2022-05-03 11:39:55:193 action-translator LogManager.java:25 attr [@-1,168:169='at',<0>,248:9]
2022-05-03 11:39:55:194 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,true, $LET.line,$LET.pos) 
    
2022-05-03 11:39:55:194 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,255:9]
2022-05-03 11:39:55:194 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,255:52].[@-1,57:60='text',<0>,255:55]
2022-05-03 11:39:55:194 action-translator LogManager.java:25 qattr [@-1,64:67='tipo',<0>,255:62].[@-1,69:70='te',<0>,255:67]
2022-05-03 11:39:55:194 action-translator LogManager.java:25 qattr [@-1,74:75='ea',<0>,255:72].[@-1,77:77='p',<0>,255:75]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,91:93='LET',<0>,255:89].[@-1,95:98='line',<0>,255:93]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,101:103='LET',<0>,255:99].[@-1,105:107='pos',<0>,255:103]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,true, $LET.line,$LET.pos) 
    
2022-05-03 11:39:55:195 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,258:9]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,54:56='id1',<0>,258:52].[@-1,58:61='text',<0>,258:56]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,84:85='ea',<0>,258:82].[@-1,87:87='p',<0>,258:85]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,91:93='id2',<0>,258:89].[@-1,95:98='text',<0>,258:93]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,108:110='LET',<0>,258:106].[@-1,112:115='line',<0>,258:110]
2022-05-03 11:39:55:195 action-translator LogManager.java:25 qattr [@-1,118:120='LET',<0>,258:116].[@-1,122:124='pos',<0>,258:120]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,false, $LET.line,$LET.pos) 
    
2022-05-03 11:39:55:196 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,261:9]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,261:52].[@-1,56:59='text',<0>,261:55]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 qattr [@-1,63:66='tipo',<0>,261:62].[@-1,68:69='te',<0>,261:67]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 qattr [@-1,73:74='ea',<0>,261:72].[@-1,76:76='p',<0>,261:75]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 qattr [@-1,91:93='LET',<0>,261:90].[@-1,95:98='line',<0>,261:94]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 qattr [@-1,101:103='LET',<0>,261:100].[@-1,105:107='pos',<0>,261:104]
2022-05-03 11:39:55:196 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,false, $LET.line,$LET.pos) 
    
2022-05-03 11:39:55:197 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,264:9]
2022-05-03 11:39:55:197 action-translator LogManager.java:25 qattr [@-1,53:55='id1',<0>,264:52].[@-1,57:60='text',<0>,264:56]
2022-05-03 11:39:55:197 action-translator LogManager.java:25 qattr [@-1,83:84='ea',<0>,264:82].[@-1,86:86='p',<0>,264:85]
2022-05-03 11:39:55:197 action-translator LogManager.java:25 qattr [@-1,90:92='id2',<0>,264:89].[@-1,94:97='text',<0>,264:93]
2022-05-03 11:39:55:197 action-translator LogManager.java:25 qattr [@-1,108:110='LET',<0>,264:107].[@-1,112:115='line',<0>,264:111]
2022-05-03 11:39:55:197 action-translator LogManager.java:25 qattr [@-1,118:120='LET',<0>,264:117].[@-1,122:124='pos',<0>,264:121]
2022-05-03 11:39:55:198 action-translator LogManager.java:25 translate  
        var a,b,c interfaces.Expresion
        $p = vector.NewVector( $list_expre_vec_arr.l, a , b , false,c,$CORCHA.line, $CORCHA.pos  ) 
        
2022-05-03 11:39:55:198 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,271:9]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,73:90='list_expre_vec_arr',<0>,271:32].[@-1,92:92='l',<0>,271:51]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,112:117='CORCHA',<0>,271:71].[@-1,119:122='line',<0>,271:78]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,126:131='CORCHA',<0>,271:85].[@-1,133:135='pos',<0>,271:92]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 translate  
        var a interfaces.Expresion
        $p = vector.NewVector( arrayList.New(), $exp1.p, $exp2.p ,false, a ,$CORCHA.line, $CORCHA.pos) 
        
2022-05-03 11:39:55:199 action-translator LogManager.java:25 attr [@-1,46:46='p',<0>,275:9]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,86:89='exp1',<0>,275:49].[@-1,91:91='p',<0>,275:54]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,95:98='exp2',<0>,275:58].[@-1,100:100='p',<0>,275:63]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,114:119='CORCHA',<0>,275:77].[@-1,121:124='line',<0>,275:84]
2022-05-03 11:39:55:199 action-translator LogManager.java:25 qattr [@-1,128:133='CORCHA',<0>,275:91].[@-1,135:137='pos',<0>,275:98]
2022-05-03 11:39:55:200 action-translator LogManager.java:25 translate  
        var a,b,c interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,true,c,$NEWI.line,$NEWI.pos) 
    
2022-05-03 11:39:55:200 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,279:9]
2022-05-03 11:39:55:200 action-translator LogManager.java:25 qattr [@-1,100:103='NEWI',<0>,279:59].[@-1,105:108='line',<0>,279:64]
2022-05-03 11:39:55:200 action-translator LogManager.java:25 qattr [@-1,111:114='NEWI',<0>,279:70].[@-1,116:118='pos',<0>,279:75]
2022-05-03 11:39:55:200 action-translator LogManager.java:25 translate  
        var a,b interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,false,$expression_vec_Arr.p,$WITH_CAP.line,$WITH_CAP.pos) 
    
2022-05-03 11:39:55:200 action-translator LogManager.java:25 attr [@-1,48:48='p',<0>,283:9]
2022-05-03 11:39:55:200 action-translator LogManager.java:25 qattr [@-1,97:114='expression_vec_Arr',<0>,283:58].[@-1,116:116='p',<0>,283:77]
2022-05-03 11:39:55:201 action-translator LogManager.java:25 qattr [@-1,119:126='WITH_CAP',<0>,283:80].[@-1,128:131='line',<0>,283:89]
2022-05-03 11:39:55:201 action-translator LogManager.java:25 qattr [@-1,134:141='WITH_CAP',<0>,283:95].[@-1,143:145='pos',<0>,283:104]
2022-05-03 11:39:55:206 action-translator LogManager.java:25 translate  
        $instr = funcionesvectores.NewPush($exp1.p, $exp2.p, $PUSH.line, $PUSH.pos) 
    
2022-05-03 11:39:55:206 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,290:9]
2022-05-03 11:39:55:206 action-translator LogManager.java:25 qattr [@-1,46:49='exp1',<0>,290:44].[@-1,51:51='p',<0>,290:49]
2022-05-03 11:39:55:206 action-translator LogManager.java:25 qattr [@-1,55:58='exp2',<0>,290:53].[@-1,60:60='p',<0>,290:58]
2022-05-03 11:39:55:206 action-translator LogManager.java:25 qattr [@-1,64:67='PUSH',<0>,290:62].[@-1,69:72='line',<0>,290:67]
2022-05-03 11:39:55:206 action-translator LogManager.java:25 qattr [@-1,76:79='PUSH',<0>,290:74].[@-1,81:83='pos',<0>,290:79]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 translate  
        $instr = funcionesvectores.NewInsert($ID.text, $exp1.p, $exp2.p, $INSERT.line, $INSERT.pos) 
    
2022-05-03 11:39:55:207 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,293:9]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,293:46].[@-1,51:54='text',<0>,293:49]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 qattr [@-1,58:61='exp1',<0>,293:56].[@-1,63:63='p',<0>,293:61]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 qattr [@-1,67:70='exp2',<0>,293:65].[@-1,72:72='p',<0>,293:70]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 qattr [@-1,76:81='INSERT',<0>,293:74].[@-1,83:86='line',<0>,293:81]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 qattr [@-1,90:95='INSERT',<0>,293:88].[@-1,97:99='pos',<0>,293:95]
2022-05-03 11:39:55:207 action-translator LogManager.java:25 translate  
        $instr = funcionesvectores.NewRemove_instr($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
    
2022-05-03 11:39:55:207 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,296:9]
2022-05-03 11:39:55:208 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,296:52].[@-1,57:60='text',<0>,296:55]
2022-05-03 11:39:55:208 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,296:62].[@-1,75:75='p',<0>,296:73]
2022-05-03 11:39:55:208 action-translator LogManager.java:25 qattr [@-1,79:84='REMOVE',<0>,296:77].[@-1,86:89='line',<0>,296:84]
2022-05-03 11:39:55:208 action-translator LogManager.java:25 qattr [@-1,93:98='REMOVE',<0>,296:91].[@-1,100:102='pos',<0>,296:98]
2022-05-03 11:39:55:208 action-translator LogManager.java:25 translate  $p = $sent_if_expr.p 
2022-05-03 11:39:55:208 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,301:25]
2022-05-03 11:39:55:208 action-translator LogManager.java:25 qattr [@-1,7:18='sent_if_expr',<0>,301:30].[@-1,20:20='p',<0>,301:43]
2022-05-03 11:39:55:209 action-translator LogManager.java:25 translate  $p = $sent_loop_expr.p 
2022-05-03 11:39:55:209 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,302:24]
2022-05-03 11:39:55:209 action-translator LogManager.java:25 qattr [@-1,7:20='sent_loop_expr',<0>,302:29].[@-1,22:22='p',<0>,302:44]
2022-05-03 11:39:55:209 action-translator LogManager.java:25 translate  $p = $sent_matchexpr.p 
2022-05-03 11:39:55:209 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,303:23]
2022-05-03 11:39:55:209 action-translator LogManager.java:25 qattr [@-1,7:20='sent_matchexpr',<0>,303:28].[@-1,22:22='p',<0>,303:43]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 translate  
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
        
2022-05-03 11:39:55:210 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,308:9]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 qattr [@-1,40:49='expression',<0>,308:38].[@-1,51:51='p',<0>,308:49]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 qattr [@-1,55:74='matchexpr_listbrazos',<0>,308:53].[@-1,76:76='l',<0>,308:74]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 qattr [@-1,80:93='el_defaultexpr',<0>,308:78].[@-1,95:95='p',<0>,308:93]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 qattr [@-1,99:103='MATCH',<0>,308:97].[@-1,105:108='line',<0>,308:103]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 qattr [@-1,111:115='MATCH',<0>,308:109].[@-1,117:119='pos',<0>,308:115]
2022-05-03 11:39:55:210 action-translator LogManager.java:25 translate 
        var a interfaces.Expresion
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, a, $MATCH.line,$MATCH.pos)
    
2022-05-03 11:39:55:211 action-translator LogManager.java:25 attr [@-1,45:45='p',<0>,312:9]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,74:83='expression',<0>,312:38].[@-1,85:85='p',<0>,312:49]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,89:108='matchexpr_listbrazos',<0>,312:53].[@-1,110:110='l',<0>,312:74]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,117:121='MATCH',<0>,312:81].[@-1,123:126='line',<0>,312:87]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,129:133='MATCH',<0>,312:93].[@-1,135:137='pos',<0>,312:99]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 translate 
        $p = matchexpr.NewMatch_Expr($expression.p, arrayList.New(), $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
    
2022-05-03 11:39:55:211 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,315:9]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,39:48='expression',<0>,315:38].[@-1,50:50='p',<0>,315:49]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,71:84='el_defaultexpr',<0>,315:70].[@-1,86:86='p',<0>,315:85]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,90:94='MATCH',<0>,315:89].[@-1,96:99='line',<0>,315:95]
2022-05-03 11:39:55:211 action-translator LogManager.java:25 qattr [@-1,102:106='MATCH',<0>,315:101].[@-1,108:110='pos',<0>,315:107]
2022-05-03 11:39:55:212 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:212 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    
2022-05-03 11:39:55:212 action-translator LogManager.java:25 qattr [@-1,47:61='list_brazosexpr',<0>,4:15].[@-1,63:63='p',<0>,4:31]
2022-05-03 11:39:55:213 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,5:9]
2022-05-03 11:39:55:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:213 action-translator LogManager.java:25 translate 
                  $brz.l.Add($list_brazosexpr.p)
                  $l = $brz.l
              
2022-05-03 11:39:55:213 action-translator LogManager.java:25 qattr [@-1,21:23='brz',<0>,10:19].[@-1,25:25='l',<0>,10:23]
2022-05-03 11:39:55:213 action-translator LogManager.java:25 qattr [@-1,32:46='list_brazosexpr',<0>,10:30].[@-1,48:48='p',<0>,10:46]
2022-05-03 11:39:55:213 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,11:19]
2022-05-03 11:39:55:213 action-translator LogManager.java:25 qattr [@-1,76:78='brz',<0>,11:24].[@-1,80:80='l',<0>,11:28]
2022-05-03 11:39:55:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:222 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($po.p)
        $p = matchexpr.NewBrazo_expr(a, $pi.p, $IGUAL.line , $IGUAL.pos)
     
2022-05-03 11:39:55:222 action-translator LogManager.java:25 qattr [@-1,46:47='po',<0>,334:15].[@-1,49:49='p',<0>,334:18]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 attr [@-1,61:61='p',<0>,335:9]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 qattr [@-1,93:94='pi',<0>,335:41].[@-1,96:96='p',<0>,335:44]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 qattr [@-1,100:104='IGUAL',<0>,335:48].[@-1,106:109='line',<0>,335:54]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 qattr [@-1,114:118='IGUAL',<0>,335:62].[@-1,120:122='pos',<0>,335:68]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 translate  $p = matchexpr.NewBrazo_expr( $exp.l , $expression.p ,$IGUAL.line, $IGUAL.pos ) 
2022-05-03 11:39:55:223 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,337:76]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 qattr [@-1,32:34='exp',<0>,337:106].[@-1,36:36='l',<0>,337:110]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,337:115].[@-1,52:52='p',<0>,337:126]
2022-05-03 11:39:55:223 action-translator LogManager.java:25 qattr [@-1,56:60='IGUAL',<0>,337:130].[@-1,62:65='line',<0>,337:136]
2022-05-03 11:39:55:224 action-translator LogManager.java:25 qattr [@-1,69:73='IGUAL',<0>,337:143].[@-1,75:77='pos',<0>,337:149]
2022-05-03 11:39:55:225 action-translator LogManager.java:25 translate 
        $g.l.Add($expression.p)
        $l = $g.l
    
2022-05-03 11:39:55:225 action-translator LogManager.java:25 qattr [@-1,10:10='g',<0>,342:9].[@-1,12:12='l',<0>,342:11]
2022-05-03 11:39:55:225 action-translator LogManager.java:25 qattr [@-1,19:28='expression',<0>,342:18].[@-1,30:30='p',<0>,342:29]
2022-05-03 11:39:55:225 action-translator LogManager.java:25 attr [@-1,42:42='l',<0>,343:9]
2022-05-03 11:39:55:225 action-translator LogManager.java:25 qattr [@-1,47:47='g',<0>,343:14].[@-1,49:49='l',<0>,343:16]
2022-05-03 11:39:55:225 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-05-03 11:39:55:226 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,347:15].[@-1,56:56='p',<0>,347:26]
2022-05-03 11:39:55:226 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,348:9]
2022-05-03 11:39:55:226 action-translator LogManager.java:25 translate  $p = matchexpr.NewDefault_Expr($expression.p, $DEFAUL.line, $DEFAUL.pos) 
2022-05-03 11:39:55:226 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,353:44]
2022-05-03 11:39:55:226 action-translator LogManager.java:25 qattr [@-1,33:42='expression',<0>,353:75].[@-1,44:44='p',<0>,353:86]
2022-05-03 11:39:55:227 action-translator LogManager.java:25 qattr [@-1,48:53='DEFAUL',<0>,353:90].[@-1,55:58='line',<0>,353:97]
2022-05-03 11:39:55:227 action-translator LogManager.java:25 qattr [@-1,62:67='DEFAUL',<0>,353:104].[@-1,69:71='pos',<0>,353:111]
2022-05-03 11:39:55:229 action-translator LogManager.java:25 translate  $te = 0 
2022-05-03 11:39:55:229 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,358:14]
2022-05-03 11:39:55:229 action-translator LogManager.java:25 translate  $te = 1 
2022-05-03 11:39:55:229 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,359:14]
2022-05-03 11:39:55:230 action-translator LogManager.java:25 translate  $te = 2 
2022-05-03 11:39:55:230 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,360:12]
2022-05-03 11:39:55:230 action-translator LogManager.java:25 translate  $te = 3
2022-05-03 11:39:55:230 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,361:16]
2022-05-03 11:39:55:230 action-translator LogManager.java:25 translate  $te = 7 
2022-05-03 11:39:55:230 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,362:18]
2022-05-03 11:39:55:230 action-translator LogManager.java:25 translate  $te = 8 
2022-05-03 11:39:55:230 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,363:18]
2022-05-03 11:39:55:231 action-translator LogManager.java:25 translate  $te = 13 
2022-05-03 11:39:55:231 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,364:18]
2022-05-03 11:39:55:232 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        $instr = instruction.NewAsignacion($ID.text, $expression.p, "" , a ,$ID.line, $ID.pos) 
        
2022-05-03 11:39:55:232 action-translator LogManager.java:25 attr [@-1,40:44='instr',<0>,370:9]
2022-05-03 11:39:55:232 action-translator LogManager.java:25 qattr [@-1,75:76='ID',<0>,370:44].[@-1,78:81='text',<0>,370:47]
2022-05-03 11:39:55:233 action-translator LogManager.java:25 qattr [@-1,85:94='expression',<0>,370:54].[@-1,96:96='p',<0>,370:65]
2022-05-03 11:39:55:233 action-translator LogManager.java:25 qattr [@-1,108:109='ID',<0>,370:77].[@-1,111:114='line',<0>,370:80]
2022-05-03 11:39:55:233 action-translator LogManager.java:25 qattr [@-1,118:119='ID',<0>,370:87].[@-1,121:123='pos',<0>,370:90]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        $instr = instruction.NewAsignacion($id1.text, $expression.p, $id2.text , a ,$ID.line, $ID.pos) 
        
2022-05-03 11:39:55:234 action-translator LogManager.java:25 attr [@-1,40:44='instr',<0>,374:9]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 qattr [@-1,75:77='id1',<0>,374:44].[@-1,79:82='text',<0>,374:48]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 qattr [@-1,86:95='expression',<0>,374:55].[@-1,97:97='p',<0>,374:66]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 qattr [@-1,101:103='id2',<0>,374:70].[@-1,105:108='text',<0>,374:74]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 qattr [@-1,116:117='ID',<0>,374:85].[@-1,119:122='line',<0>,374:88]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,374:95].[@-1,129:131='pos',<0>,374:98]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 translate 
        $instr = instruction.NewAsignacion($ID.text, $expression.p, "" , $list.l ,$ID.line, $ID.pos) 
    
2022-05-03 11:39:55:234 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,377:9]
2022-05-03 11:39:55:234 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,377:44].[@-1,48:51='text',<0>,377:47]
2022-05-03 11:39:55:235 action-translator LogManager.java:25 qattr [@-1,55:64='expression',<0>,377:54].[@-1,66:66='p',<0>,377:65]
2022-05-03 11:39:55:235 action-translator LogManager.java:25 qattr [@-1,75:78='list',<0>,377:74].[@-1,80:80='l',<0>,377:79]
2022-05-03 11:39:55:235 action-translator LogManager.java:25 qattr [@-1,84:85='ID',<0>,377:83].[@-1,87:90='line',<0>,377:86]
2022-05-03 11:39:55:235 action-translator LogManager.java:25 qattr [@-1,94:95='ID',<0>,377:93].[@-1,97:99='pos',<0>,377:96]
2022-05-03 11:39:55:236 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:236 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-05-03 11:39:55:236 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-05-03 11:39:55:236 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-05-03 11:39:55:237 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:237 action-translator LogManager.java:25 translate 
                  $li.l.Add($expression.p)  
                  $l = $li.l
              
2022-05-03 11:39:55:237 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-05-03 11:39:55:237 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,10:29].[@-1,42:42='p',<0>,10:40]
2022-05-03 11:39:55:238 action-translator LogManager.java:25 attr [@-1,67:67='l',<0>,11:19]
2022-05-03 11:39:55:238 action-translator LogManager.java:25 qattr [@-1,72:73='li',<0>,11:24].[@-1,75:75='l',<0>,11:27]
2022-05-03 11:39:55:238 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:241 action-translator LogManager.java:25 translate  
        b := arrayList.New()
        $p = sentenciasexpr.NewIf_expr($ini.p, $instru.l,b, $IF.line, $IF.pos   ) 
        
2022-05-03 11:39:55:241 action-translator LogManager.java:25 attr [@-1,40:40='p',<0>,394:9]
2022-05-03 11:39:55:241 action-translator LogManager.java:25 qattr [@-1,71:73='ini',<0>,394:40].[@-1,75:75='p',<0>,394:44]
2022-05-03 11:39:55:241 action-translator LogManager.java:25 qattr [@-1,79:84='instru',<0>,394:48].[@-1,86:86='l',<0>,394:55]
2022-05-03 11:39:55:241 action-translator LogManager.java:25 qattr [@-1,92:93='IF',<0>,394:61].[@-1,95:98='line',<0>,394:64]
2022-05-03 11:39:55:241 action-translator LogManager.java:25 qattr [@-1,102:103='IF',<0>,394:71].[@-1,105:107='pos',<0>,394:74]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 translate  
        $p = sentenciasexpr.NewIf_expr($ini.p, $instru.l, $instru2.l , $IF.line, $IF.pos ) 
        
2022-05-03 11:39:55:242 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,397:9]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 qattr [@-1,42:44='ini',<0>,397:40].[@-1,46:46='p',<0>,397:44]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 qattr [@-1,50:55='instru',<0>,397:48].[@-1,57:57='l',<0>,397:55]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 qattr [@-1,61:67='instru2',<0>,397:59].[@-1,69:69='l',<0>,397:67]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 qattr [@-1,74:75='IF',<0>,397:72].[@-1,77:80='line',<0>,397:75]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 qattr [@-1,84:85='IF',<0>,397:82].[@-1,87:89='pos',<0>,397:85]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($sent.p)
        $p = sentenciasexpr.NewIf_expr($ini.p,$instru.l,a, $IF.line, $IF.pos   )  
        
2022-05-03 11:39:55:242 action-translator LogManager.java:25 qattr [@-1,46:49='sent',<0>,401:15].[@-1,51:51='p',<0>,401:20]
2022-05-03 11:39:55:242 action-translator LogManager.java:25 attr [@-1,63:63='p',<0>,402:9]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,94:96='ini',<0>,402:40].[@-1,98:98='p',<0>,402:44]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,101:106='instru',<0>,402:47].[@-1,108:108='l',<0>,402:54]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,114:115='IF',<0>,402:60].[@-1,117:120='line',<0>,402:63]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,124:125='IF',<0>,402:70].[@-1,127:129='pos',<0>,402:73]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 translate  
        $in.l.Add($ex.p)
        $l = $in.l
     
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,11:12='in',<0>,408:9].[@-1,14:14='l',<0>,408:12]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,21:22='ex',<0>,408:19].[@-1,24:24='p',<0>,408:22]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 attr [@-1,36:36='l',<0>,409:9]
2022-05-03 11:39:55:243 action-translator LogManager.java:25 qattr [@-1,41:42='in',<0>,409:14].[@-1,44:44='l',<0>,409:17]
2022-05-03 11:39:55:244 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($ex.p)
        $l = a
    
2022-05-03 11:39:55:244 action-translator LogManager.java:25 qattr [@-1,45:46='ex',<0>,413:15].[@-1,48:48='p',<0>,413:18]
2022-05-03 11:39:55:244 action-translator LogManager.java:25 attr [@-1,60:60='l',<0>,414:9]
2022-05-03 11:39:55:244 action-translator LogManager.java:25 translate  $p = sentenciasexpr.NewLoop_expr($instrucciones.l,$LOOP.line,$LOOP.pos) 
2022-05-03 11:39:55:244 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,419:41]
2022-05-03 11:39:55:244 action-translator LogManager.java:25 qattr [@-1,35:47='instrucciones',<0>,419:74].[@-1,49:49='l',<0>,419:88]
2022-05-03 11:39:55:244 action-translator LogManager.java:25 qattr [@-1,52:55='LOOP',<0>,419:91].[@-1,57:60='line',<0>,419:96]
2022-05-03 11:39:55:244 action-translator LogManager.java:25 qattr [@-1,63:66='LOOP',<0>,419:102].[@-1,68:70='pos',<0>,419:107]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 translate  
         a := arrayList.New()
        $instr = instruction.NewImprimir($expression.p, a, $PRINT.line, $PRINT.pos) 
        
2022-05-03 11:39:55:245 action-translator LogManager.java:25 attr [@-1,41:45='instr',<0>,425:9]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 qattr [@-1,74:83='expression',<0>,425:42].[@-1,85:85='p',<0>,425:53]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 qattr [@-1,92:96='PRINT',<0>,425:60].[@-1,98:101='line',<0>,425:66]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 qattr [@-1,105:109='PRINT',<0>,425:73].[@-1,111:113='pos',<0>,425:79]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 translate   $instr = instruction.NewImprimir($expression.p, $li.l, $PRINT.line, $PRINT.pos)  
2022-05-03 11:39:55:245 action-translator LogManager.java:25 attr [@-1,3:7='instr',<0>,427:68]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 qattr [@-1,36:45='expression',<0>,427:101].[@-1,47:47='p',<0>,427:112]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 qattr [@-1,51:52='li',<0>,427:116].[@-1,54:54='l',<0>,427:119]
2022-05-03 11:39:55:245 action-translator LogManager.java:25 qattr [@-1,58:62='PRINT',<0>,427:123].[@-1,64:67='line',<0>,427:129]
2022-05-03 11:39:55:246 action-translator LogManager.java:25 qattr [@-1,71:75='PRINT',<0>,427:136].[@-1,77:79='pos',<0>,427:142]
2022-05-03 11:39:55:246 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:246 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-05-03 11:39:55:246 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-05-03 11:39:55:246 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-05-03 11:39:55:246 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:247 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  
2022-05-03 11:39:55:247 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,10:19].[@-1,25:25='l',<0>,10:22]
2022-05-03 11:39:55:247 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,10:29].[@-1,43:43='p',<0>,10:40]
2022-05-03 11:39:55:247 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,11:19]
2022-05-03 11:39:55:247 action-translator LogManager.java:25 qattr [@-1,73:74='li',<0>,11:24].[@-1,76:76='l',<0>,11:27]
2022-05-03 11:39:55:247 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:248 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:248 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    
2022-05-03 11:39:55:248 action-translator LogManager.java:25 qattr [@-1,47:64='expression_vec_Arr',<0>,4:15].[@-1,66:66='p',<0>,4:34]
2022-05-03 11:39:55:248 action-translator LogManager.java:25 attr [@-1,79:79='l',<0>,5:9]
2022-05-03 11:39:55:248 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:248 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression_vec_Arr.p)  
                  $l = $li.l
                  
2022-05-03 11:39:55:248 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,10:19].[@-1,25:25='l',<0>,10:22]
2022-05-03 11:39:55:248 action-translator LogManager.java:25 qattr [@-1,32:49='expression_vec_Arr',<0>,10:29].[@-1,51:51='p',<0>,10:48]
2022-05-03 11:39:55:248 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,11:19]
2022-05-03 11:39:55:249 action-translator LogManager.java:25 qattr [@-1,81:82='li',<0>,11:24].[@-1,84:84='l',<0>,11:27]
2022-05-03 11:39:55:249 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:249 action-translator LogManager.java:25 translate  $instr = sentenciacontrol.NewIf($expression.p, $instrucciones.l, arrayList.New(), $IF.line,$IF.pos) 
2022-05-03 11:39:55:249 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,457:50]
2022-05-03 11:39:55:250 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,457:82].[@-1,45:45='p',<0>,457:93]
2022-05-03 11:39:55:250 action-translator LogManager.java:25 qattr [@-1,49:61='instrucciones',<0>,457:97].[@-1,63:63='l',<0>,457:111]
2022-05-03 11:39:55:250 action-translator LogManager.java:25 qattr [@-1,84:85='IF',<0>,457:132].[@-1,87:90='line',<0>,457:135]
2022-05-03 11:39:55:250 action-translator LogManager.java:25 qattr [@-1,93:94='IF',<0>,457:141].[@-1,96:98='pos',<0>,457:144]
2022-05-03 11:39:55:251 action-translator LogManager.java:25 translate  $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, $ins2.l, $IF.line,$IF.pos) 
2022-05-03 11:39:55:251 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,458:92]
2022-05-03 11:39:55:251 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,458:124].[@-1,45:45='p',<0>,458:135]
2022-05-03 11:39:55:251 action-translator LogManager.java:25 qattr [@-1,49:52='ins1',<0>,458:139].[@-1,54:54='l',<0>,458:144]
2022-05-03 11:39:55:251 action-translator LogManager.java:25 qattr [@-1,58:61='ins2',<0>,458:148].[@-1,63:63='l',<0>,458:153]
2022-05-03 11:39:55:251 action-translator LogManager.java:25 qattr [@-1,67:68='IF',<0>,458:157].[@-1,70:73='line',<0>,458:160]
2022-05-03 11:39:55:251 action-translator LogManager.java:25 qattr [@-1,76:77='IF',<0>,458:166].[@-1,79:81='pos',<0>,458:169]
2022-05-03 11:39:55:252 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($sent.instr)
        $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, a , $IF.line,$IF.pos) 
2022-05-03 11:39:55:253 action-translator LogManager.java:25 qattr [@-1,46:49='sent',<0>,461:15].[@-1,51:55='instr',<0>,461:20]
2022-05-03 11:39:55:253 action-translator LogManager.java:25 attr [@-1,67:71='instr',<0>,462:9]
2022-05-03 11:39:55:253 action-translator LogManager.java:25 qattr [@-1,99:108='expression',<0>,462:41].[@-1,110:110='p',<0>,462:52]
2022-05-03 11:39:55:253 action-translator LogManager.java:25 qattr [@-1,114:117='ins1',<0>,462:56].[@-1,119:119='l',<0>,462:61]
2022-05-03 11:39:55:253 action-translator LogManager.java:25 qattr [@-1,127:128='IF',<0>,462:69].[@-1,130:133='line',<0>,462:72]
2022-05-03 11:39:55:253 action-translator LogManager.java:25 qattr [@-1,136:137='IF',<0>,462:78].[@-1,139:141='pos',<0>,462:81]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 translate  $instr = match.NewMatch($expression.p, $match_listbrazos.l, $el_default.instr, $MATCH.line, $MATCH.pos) 
2022-05-03 11:39:55:254 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,465:66]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 qattr [@-1,26:35='expression',<0>,465:90].[@-1,37:37='p',<0>,465:101]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 qattr [@-1,41:56='match_listbrazos',<0>,465:105].[@-1,58:58='l',<0>,465:122]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 qattr [@-1,62:71='el_default',<0>,465:126].[@-1,73:77='instr',<0>,465:137]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 qattr [@-1,81:85='MATCH',<0>,465:145].[@-1,87:90='line',<0>,465:151]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 qattr [@-1,94:98='MATCH',<0>,465:158].[@-1,100:102='pos',<0>,465:164]
2022-05-03 11:39:55:254 action-translator LogManager.java:25 translate $instr = match.NewMatch($expression.p, arrayList.New(), $el_default.instr, $MATCH.line, $MATCH.pos)
2022-05-03 11:39:55:254 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,466:49]
2022-05-03 11:39:55:255 action-translator LogManager.java:25 qattr [@-1,25:34='expression',<0>,466:73].[@-1,36:36='p',<0>,466:84]
2022-05-03 11:39:55:255 action-translator LogManager.java:25 qattr [@-1,57:66='el_default',<0>,466:105].[@-1,68:72='instr',<0>,466:116]
2022-05-03 11:39:55:255 action-translator LogManager.java:25 qattr [@-1,76:80='MATCH',<0>,466:124].[@-1,82:85='line',<0>,466:130]
2022-05-03 11:39:55:255 action-translator LogManager.java:25 qattr [@-1,89:93='MATCH',<0>,466:137].[@-1,95:97='pos',<0>,466:143]
2022-05-03 11:39:55:255 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:255 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    
2022-05-03 11:39:55:255 action-translator LogManager.java:25 qattr [@-1,47:57='list_brazos',<0>,4:15].[@-1,59:63='instr',<0>,4:27]
2022-05-03 11:39:55:255 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,5:9]
2022-05-03 11:39:55:256 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:256 action-translator LogManager.java:25 translate  
              $braz.l.Add($list_brazos.instr)
               $l = $braz.l
               
2022-05-03 11:39:55:256 action-translator LogManager.java:25 qattr [@-1,18:21='braz',<0>,10:15].[@-1,23:23='l',<0>,10:20]
2022-05-03 11:39:55:256 action-translator LogManager.java:25 qattr [@-1,30:40='list_brazos',<0>,10:27].[@-1,42:46='instr',<0>,10:39]
2022-05-03 11:39:55:256 action-translator LogManager.java:25 attr [@-1,66:66='l',<0>,11:16]
2022-05-03 11:39:55:256 action-translator LogManager.java:25 qattr [@-1,71:74='braz',<0>,11:21].[@-1,76:76='l',<0>,11:26]
2022-05-03 11:39:55:256 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:257 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($expression.p)
        $instr = match.NewBrazo(a, $instrucciones.l, $IGUAL.line, $IGUAL.pos) 
        
2022-05-03 11:39:55:257 action-translator LogManager.java:25 qattr [@-1,46:55='expression',<0>,483:15].[@-1,57:57='p',<0>,483:26]
2022-05-03 11:39:55:257 action-translator LogManager.java:25 attr [@-1,69:73='instr',<0>,484:9]
2022-05-03 11:39:55:257 action-translator LogManager.java:25 qattr [@-1,96:108='instrucciones',<0>,484:36].[@-1,110:110='l',<0>,484:50]
2022-05-03 11:39:55:257 action-translator LogManager.java:25 qattr [@-1,114:118='IGUAL',<0>,484:54].[@-1,120:123='line',<0>,484:60]
2022-05-03 11:39:55:257 action-translator LogManager.java:25 qattr [@-1,127:131='IGUAL',<0>,484:67].[@-1,133:135='pos',<0>,484:73]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 translate  $instr = match.NewBrazo($exprs.l, $instrucciones.l, $IGUAL.line, $IGUAL.pos)  
2022-05-03 11:39:55:258 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,486:81]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,26:30='exprs',<0>,486:105].[@-1,32:32='l',<0>,486:111]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,36:48='instrucciones',<0>,486:115].[@-1,50:50='l',<0>,486:129]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,54:58='IGUAL',<0>,486:133].[@-1,60:63='line',<0>,486:139]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,67:71='IGUAL',<0>,486:146].[@-1,73:75='pos',<0>,486:152]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo(a, b, $IGUAL.line, $IGUAL.pos) 
        
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,489:15].[@-1,56:56='p',<0>,489:26]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,103:113='instruccion',<0>,491:15].[@-1,115:119='instr',<0>,491:27]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 attr [@-1,131:135='instr',<0>,492:9]
2022-05-03 11:39:55:258 action-translator LogManager.java:25 qattr [@-1,161:165='IGUAL',<0>,492:39].[@-1,167:170='line',<0>,492:45]
2022-05-03 11:39:55:259 action-translator LogManager.java:25 qattr [@-1,174:178='IGUAL',<0>,492:52].[@-1,180:182='pos',<0>,492:58]
2022-05-03 11:39:55:259 action-translator LogManager.java:25 translate 
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo($exprs.l, b, $IGUAL.line, $IGUAL.pos)
        
2022-05-03 11:39:55:259 action-translator LogManager.java:25 qattr [@-1,45:55='instruccion',<0>,496:15].[@-1,57:61='instr',<0>,496:27]
2022-05-03 11:39:55:259 action-translator LogManager.java:25 attr [@-1,73:77='instr',<0>,497:9]
2022-05-03 11:39:55:259 action-translator LogManager.java:25 qattr [@-1,97:101='exprs',<0>,497:33].[@-1,103:103='l',<0>,497:39]
2022-05-03 11:39:55:259 action-translator LogManager.java:25 qattr [@-1,110:114='IGUAL',<0>,497:46].[@-1,116:119='line',<0>,497:52]
2022-05-03 11:39:55:259 action-translator LogManager.java:25 qattr [@-1,123:127='IGUAL',<0>,497:59].[@-1,129:131='pos',<0>,497:65]
2022-05-03 11:39:55:260 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:260 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        
2022-05-03 11:39:55:260 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-05-03 11:39:55:260 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-05-03 11:39:55:261 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:261 action-translator LogManager.java:25 translate  
                  $h.l.Add($expression.p)
                  $l = $h.l
               
2022-05-03 11:39:55:261 action-translator LogManager.java:25 qattr [@-1,22:22='h',<0>,10:19].[@-1,24:24='l',<0>,10:21]
2022-05-03 11:39:55:261 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,10:28].[@-1,42:42='p',<0>,10:39]
2022-05-03 11:39:55:261 action-translator LogManager.java:25 attr [@-1,65:65='l',<0>,11:19]
2022-05-03 11:39:55:261 action-translator LogManager.java:25 qattr [@-1,70:70='h',<0>,11:24].[@-1,72:72='l',<0>,11:26]
2022-05-03 11:39:55:262 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:262 action-translator LogManager.java:25 translate  $instr = match.NewDefault($instrucciones.l , $DEFAUL.line, $DEFAUL.pos) 
2022-05-03 11:39:55:262 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,515:55]
2022-05-03 11:39:55:262 action-translator LogManager.java:25 qattr [@-1,28:40='instrucciones',<0>,515:81].[@-1,42:42='l',<0>,515:95]
2022-05-03 11:39:55:263 action-translator LogManager.java:25 qattr [@-1,47:52='DEFAUL',<0>,515:100].[@-1,54:57='line',<0>,515:107]
2022-05-03 11:39:55:263 action-translator LogManager.java:25 qattr [@-1,61:66='DEFAUL',<0>,515:114].[@-1,68:70='pos',<0>,515:121]
2022-05-03 11:39:55:263 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($instruccion.instr)
        $instr = match.NewDefault(a , $DEFAUL.line, $DEFAUL.pos)  
        
2022-05-03 11:39:55:263 action-translator LogManager.java:25 qattr [@-1,46:56='instruccion',<0>,518:15].[@-1,58:62='instr',<0>,518:27]
2022-05-03 11:39:55:263 action-translator LogManager.java:25 attr [@-1,74:78='instr',<0>,519:9]
2022-05-03 11:39:55:263 action-translator LogManager.java:25 qattr [@-1,104:109='DEFAUL',<0>,519:39].[@-1,111:114='line',<0>,519:46]
2022-05-03 11:39:55:263 action-translator LogManager.java:25 qattr [@-1,118:123='DEFAUL',<0>,519:53].[@-1,125:127='pos',<0>,519:60]
2022-05-03 11:39:55:264 action-translator LogManager.java:25 translate  $instr = sentenciaciclica.NewLoop($instrucciones.l,$LOOP.line,$LOOP.pos) 
2022-05-03 11:39:55:264 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,524:41]
2022-05-03 11:39:55:264 action-translator LogManager.java:25 qattr [@-1,36:48='instrucciones',<0>,524:75].[@-1,50:50='l',<0>,524:89]
2022-05-03 11:39:55:264 action-translator LogManager.java:25 qattr [@-1,53:56='LOOP',<0>,524:92].[@-1,58:61='line',<0>,524:97]
2022-05-03 11:39:55:264 action-translator LogManager.java:25 qattr [@-1,64:67='LOOP',<0>,524:103].[@-1,69:71='pos',<0>,524:108]
2022-05-03 11:39:55:265 action-translator LogManager.java:25 translate  $instr = sentenciaciclica.NewWhile($expression.p , $instrucciones.l , $WHILE.line, $WHILE.pos) 
2022-05-03 11:39:55:265 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,528:55]
2022-05-03 11:39:55:265 action-translator LogManager.java:25 qattr [@-1,37:46='expression',<0>,528:90].[@-1,48:48='p',<0>,528:101]
2022-05-03 11:39:55:265 action-translator LogManager.java:25 qattr [@-1,53:65='instrucciones',<0>,528:106].[@-1,67:67='l',<0>,528:120]
2022-05-03 11:39:55:265 action-translator LogManager.java:25 qattr [@-1,72:76='WHILE',<0>,528:125].[@-1,78:81='line',<0>,528:131]
2022-05-03 11:39:55:265 action-translator LogManager.java:25 qattr [@-1,85:89='WHILE',<0>,528:138].[@-1,91:93='pos',<0>,528:144]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 translate 
        var a interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, $exp1.p, $exp2.p,a, $instrucciones.l, $IN.line, $IN.pos )
    
2022-05-03 11:39:55:266 action-translator LogManager.java:25 attr [@-1,45:49='instr',<0>,534:9]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,534:45].[@-1,84:87='text',<0>,534:48]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 qattr [@-1,91:94='exp1',<0>,534:55].[@-1,96:96='p',<0>,534:60]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 qattr [@-1,100:103='exp2',<0>,534:64].[@-1,105:105='p',<0>,534:69]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 qattr [@-1,111:123='instrucciones',<0>,534:75].[@-1,125:125='l',<0>,534:89]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 qattr [@-1,129:130='IN',<0>,534:93].[@-1,132:135='line',<0>,534:96]
2022-05-03 11:39:55:266 action-translator LogManager.java:25 qattr [@-1,139:140='IN',<0>,534:103].[@-1,142:144='pos',<0>,534:106]
2022-05-03 11:39:55:267 action-translator LogManager.java:25 translate 
        var a,b interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, a,b, $exp.p , $instrucciones.l, $IN.line, $IN.pos )
    
2022-05-03 11:39:55:267 action-translator LogManager.java:25 attr [@-1,47:51='instr',<0>,538:9]
2022-05-03 11:39:55:267 action-translator LogManager.java:25 qattr [@-1,83:84='ID',<0>,538:45].[@-1,86:89='text',<0>,538:48]
2022-05-03 11:39:55:267 action-translator LogManager.java:25 qattr [@-1,98:100='exp',<0>,538:60].[@-1,102:102='p',<0>,538:64]
2022-05-03 11:39:55:267 action-translator LogManager.java:25 qattr [@-1,107:119='instrucciones',<0>,538:69].[@-1,121:121='l',<0>,538:83]
2022-05-03 11:39:55:267 action-translator LogManager.java:25 qattr [@-1,125:126='IN',<0>,538:87].[@-1,128:131='line',<0>,538:90]
2022-05-03 11:39:55:267 action-translator LogManager.java:25 qattr [@-1,135:136='IN',<0>,538:97].[@-1,138:140='pos',<0>,538:100]
2022-05-03 11:39:55:269 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:269 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)
2022-05-03 11:39:55:269 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:251]
2022-05-03 11:39:55:269 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,2:282].[@-1,37:37='p',<0>,2:287]
2022-05-03 11:39:55:269 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,2:290].[@-1,43:46='text',<0>,2:293]
2022-05-03 11:39:55:269 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,2:299].[@-1,54:54='p',<0>,2:304]
2022-05-03 11:39:55:269 action-translator LogManager.java:25 qattr [@-1,63:65='INT',<0>,2:313].[@-1,67:70='line',<0>,2:317]
2022-05-03 11:39:55:269 action-translator LogManager.java:25 qattr [@-1,73:75='INT',<0>,2:323].[@-1,77:79='pos',<0>,2:327]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)
2022-05-03 11:39:55:270 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:251]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,3:282].[@-1,37:37='p',<0>,3:287]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,3:290].[@-1,43:46='text',<0>,3:293]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,3:299].[@-1,54:54='p',<0>,3:304]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 qattr [@-1,63:67='FLOAT',<0>,3:313].[@-1,69:72='line',<0>,3:319]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 qattr [@-1,75:79='FLOAT',<0>,3:325].[@-1,81:83='pos',<0>,3:331]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 translate  $p = $expression_vec_Arr.p
2022-05-03 11:39:55:270 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:92]
2022-05-03 11:39:55:270 action-translator LogManager.java:25 qattr [@-1,7:24='expression_vec_Arr',<0>,4:97].[@-1,26:26='p',<0>,4:116]
2022-05-03 11:39:55:271 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)
2022-05-03 11:39:55:271 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:88]
2022-05-03 11:39:55:271 action-translator LogManager.java:25 qattr [@-1,36:43='operador',<0>,5:123].[@-1,45:45='p',<0>,5:132]
2022-05-03 11:39:55:271 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,5:135].[@-1,51:54='text',<0>,5:138]
2022-05-03 11:39:55:277 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,5:153].[@-1,69:72='line',<0>,5:156]
2022-05-03 11:39:55:277 action-translator LogManager.java:25 qattr [@-1,75:76='op',<0>,5:162].[@-1,78:80='pos',<0>,5:165]
2022-05-03 11:39:55:277 action-translator LogManager.java:25 translate  
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        
2022-05-03 11:39:55:277 action-translator LogManager.java:25 attr [@-1,84:84='p',<0>,9:9]
2022-05-03 11:39:55:277 action-translator LogManager.java:25 qattr [@-1,106:123='list_expre_vec_arr',<0>,9:31].[@-1,125:125='l',<0>,9:50]
2022-05-03 11:39:55:278 action-translator LogManager.java:25 qattr [@-1,137:142='CORCHA',<0>,9:62].[@-1,144:147='line',<0>,9:69]
2022-05-03 11:39:55:278 action-translator LogManager.java:25 qattr [@-1,151:156='CORCHA',<0>,9:76].[@-1,158:160='pos',<0>,9:83]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 translate  $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) 
2022-05-03 11:39:55:279 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:163]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 qattr [@-1,41:44='exp1',<0>,11:202].[@-1,46:46='p',<0>,11:207]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 qattr [@-1,50:53='exp2',<0>,11:211].[@-1,55:55='p',<0>,11:216]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 qattr [@-1,60:65='CORCHA',<0>,11:221].[@-1,67:70='line',<0>,11:228]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 qattr [@-1,74:79='CORCHA',<0>,11:235].[@-1,81:83='pos',<0>,11:242]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) 
2022-05-03 11:39:55:279 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:135]
2022-05-03 11:39:55:279 action-translator LogManager.java:25 qattr [@-1,34:37='exp4',<0>,12:167].[@-1,39:39='p',<0>,12:172]
2022-05-03 11:39:55:280 action-translator LogManager.java:25 qattr [@-1,43:49='TOCHARS',<0>,12:176].[@-1,51:54='line',<0>,12:184]
2022-05-03 11:39:55:280 action-translator LogManager.java:25 qattr [@-1,58:64='TOCHARS',<0>,12:191].[@-1,66:68='pos',<0>,12:199]
2022-05-03 11:39:55:280 action-translator LogManager.java:25 translate  $p = $vector_expr.p 
2022-05-03 11:39:55:280 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:41]
2022-05-03 11:39:55:280 action-translator LogManager.java:25 qattr [@-1,7:17='vector_expr',<0>,13:46].[@-1,19:19='p',<0>,13:58]
2022-05-03 11:39:55:280 action-translator LogManager.java:25 translate  $p = $primitivo.p 
2022-05-03 11:39:55:280 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:39]
2022-05-03 11:39:55:281 action-translator LogManager.java:25 qattr [@-1,7:15='primitivo',<0>,14:44].[@-1,17:17='p',<0>,14:54]
2022-05-03 11:39:55:281 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-05-03 11:39:55:281 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-05-03 11:39:55:282 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:135]
2022-05-03 11:39:55:282 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,17:166].[@-1,37:37='p',<0>,17:171]
2022-05-03 11:39:55:282 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,17:174].[@-1,43:46='text',<0>,17:177]
2022-05-03 11:39:55:282 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,17:183].[@-1,54:54='p',<0>,17:188]
2022-05-03 11:39:55:282 action-translator LogManager.java:25 qattr [@-1,63:64='op',<0>,17:197].[@-1,66:69='line',<0>,17:200]
2022-05-03 11:39:55:282 action-translator LogManager.java:25 qattr [@-1,72:73='op',<0>,17:206].[@-1,75:77='pos',<0>,17:209]
2022-05-03 11:39:55:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-05-03 11:39:55:284 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-05-03 11:39:55:284 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,18:167]
2022-05-03 11:39:55:284 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,18:198].[@-1,37:37='p',<0>,18:203]
2022-05-03 11:39:55:284 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,18:206].[@-1,44:47='text',<0>,18:210]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,18:216].[@-1,55:55='p',<0>,18:221]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,18:230].[@-1,68:71='line',<0>,18:234]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,18:240].[@-1,78:80='pos',<0>,18:244]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-05-03 11:39:55:285 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-05-03 11:39:55:285 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,19:168]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,19:199].[@-1,37:37='p',<0>,19:204]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,19:207].[@-1,44:47='text',<0>,19:211]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,19:217].[@-1,55:55='p',<0>,19:222]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,19:231].[@-1,68:71='line',<0>,19:235]
2022-05-03 11:39:55:285 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,19:241].[@-1,78:80='pos',<0>,19:245]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-05-03 11:39:55:286 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-05-03 11:39:55:286 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,20:284]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 qattr [@-1,40:43='opIz',<0>,20:323].[@-1,45:45='p',<0>,20:328]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,20:331].[@-1,51:54='text',<0>,20:334]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 qattr [@-1,57:60='opDe',<0>,20:340].[@-1,62:62='p',<0>,20:345]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 qattr [@-1,71:72='op',<0>,20:354].[@-1,74:77='line',<0>,20:357]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 qattr [@-1,80:81='op',<0>,20:363].[@-1,83:85='pos',<0>,20:366]
2022-05-03 11:39:55:286 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-05-03 11:39:55:286 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-05-03 11:39:55:287 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,21:163]
2022-05-03 11:39:55:287 action-translator LogManager.java:25 qattr [@-1,36:39='opIz',<0>,21:198].[@-1,41:41='p',<0>,21:203]
2022-05-03 11:39:55:287 action-translator LogManager.java:25 qattr [@-1,44:46='ope',<0>,21:206].[@-1,48:51='text',<0>,21:210]
2022-05-03 11:39:55:287 action-translator LogManager.java:25 qattr [@-1,54:57='opDe',<0>,21:216].[@-1,59:59='p',<0>,21:221]
2022-05-03 11:39:55:287 action-translator LogManager.java:25 qattr [@-1,68:70='ope',<0>,21:230].[@-1,72:75='line',<0>,21:234]
2022-05-03 11:39:55:287 action-translator LogManager.java:25 qattr [@-1,78:80='ope',<0>,21:240].[@-1,82:84='pos',<0>,21:244]
2022-05-03 11:39:55:287 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-05-03 11:39:55:287 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-05-03 11:39:55:287 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-05-03 11:39:55:287 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-05-03 11:39:55:287 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-05-03 11:39:55:288 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:288 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    
2022-05-03 11:39:55:288 action-translator LogManager.java:25 qattr [@-1,47:71='atributos_struct_decl_exp',<0>,4:15].[@-1,73:73='s',<0>,4:41]
2022-05-03 11:39:55:288 action-translator LogManager.java:25 attr [@-1,86:86='l',<0>,5:9]
2022-05-03 11:39:55:288 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:288 action-translator LogManager.java:25 translate 
                  $li.l.Add($asd.s)
                  $l = $li.l
              
2022-05-03 11:39:55:288 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-05-03 11:39:55:288 action-translator LogManager.java:25 qattr [@-1,31:33='asd',<0>,10:29].[@-1,35:35='s',<0>,10:33]
2022-05-03 11:39:55:289 action-translator LogManager.java:25 attr [@-1,58:58='l',<0>,11:19]
2022-05-03 11:39:55:289 action-translator LogManager.java:25 qattr [@-1,63:64='li',<0>,11:24].[@-1,66:66='l',<0>,11:27]
2022-05-03 11:39:55:289 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:289 action-translator LogManager.java:25 translate $s = interfaces.Symbol{ Id: $ID.text, Valor: $exp2.p } 
2022-05-03 11:39:55:289 action-translator LogManager.java:25 attr [@-1,1:1='s',<0>,577:30]
2022-05-03 11:39:55:289 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,577:58].[@-1,32:35='text',<0>,577:61]
2022-05-03 11:39:55:289 action-translator LogManager.java:25 qattr [@-1,46:49='exp2',<0>,577:75].[@-1,51:51='p',<0>,577:80]
2022-05-03 11:39:55:289 action-translator LogManager.java:25 translate $s = interfaces.Symbol{ Id: $ID.text,  Valor:$exp.p }
2022-05-03 11:39:55:289 action-translator LogManager.java:25 attr [@-1,1:1='s',<0>,578:37]
2022-05-03 11:39:55:290 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,578:65].[@-1,32:35='text',<0>,578:68]
2022-05-03 11:39:55:290 action-translator LogManager.java:25 qattr [@-1,46:48='exp',<0>,578:82].[@-1,50:50='p',<0>,578:86]
2022-05-03 11:39:55:294 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:294 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)
2022-05-03 11:39:55:294 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:235]
2022-05-03 11:39:55:294 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,2:266].[@-1,37:37='p',<0>,2:271]
2022-05-03 11:39:55:294 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,2:274].[@-1,43:46='text',<0>,2:277]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,2:283].[@-1,54:54='p',<0>,2:288]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,63:65='INT',<0>,2:297].[@-1,67:70='line',<0>,2:301]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,73:75='INT',<0>,2:307].[@-1,77:79='pos',<0>,2:311]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)
2022-05-03 11:39:55:295 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:235]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,3:266].[@-1,37:37='p',<0>,3:271]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,3:274].[@-1,43:46='text',<0>,3:277]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,3:283].[@-1,54:54='p',<0>,3:288]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,63:67='FLOAT',<0>,3:297].[@-1,69:72='line',<0>,3:303]
2022-05-03 11:39:55:295 action-translator LogManager.java:25 qattr [@-1,75:79='FLOAT',<0>,3:309].[@-1,81:83='pos',<0>,3:315]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)
2022-05-03 11:39:55:296 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,4:77]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,32:35='opDe',<0>,4:108].[@-1,37:37='p',<0>,4:113]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,4:116].[@-1,44:47='text',<0>,4:120]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,59:61='ope',<0>,4:135].[@-1,63:66='line',<0>,4:139]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,69:71='ope',<0>,4:145].[@-1,73:75='pos',<0>,4:149]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)
2022-05-03 11:39:55:296 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:77]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,32:35='opDe',<0>,5:108].[@-1,37:37='p',<0>,5:113]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,5:116].[@-1,44:47='text',<0>,5:120]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,59:61='ope',<0>,5:135].[@-1,63:66='line',<0>,5:139]
2022-05-03 11:39:55:296 action-translator LogManager.java:25 qattr [@-1,69:71='ope',<0>,5:145].[@-1,73:75='pos',<0>,5:149]
2022-05-03 11:39:55:297 action-translator LogManager.java:25 translate  $p = $expression.p
2022-05-03 11:39:55:297 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:84]
2022-05-03 11:39:55:297 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,6:89].[@-1,18:18='p',<0>,6:100]
2022-05-03 11:39:55:298 action-translator LogManager.java:25 translate  $p = $expression.p
2022-05-03 11:39:55:298 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:84]
2022-05-03 11:39:55:298 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,7:89].[@-1,18:18='p',<0>,7:100]
2022-05-03 11:39:55:298 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)
2022-05-03 11:39:55:298 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:81]
2022-05-03 11:39:55:298 action-translator LogManager.java:25 qattr [@-1,36:43='operador',<0>,8:116].[@-1,45:45='p',<0>,8:125]
2022-05-03 11:39:55:298 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,8:128].[@-1,51:54='text',<0>,8:131]
2022-05-03 11:39:55:298 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,8:146].[@-1,69:72='line',<0>,8:149]
2022-05-03 11:39:55:299 action-translator LogManager.java:25 qattr [@-1,75:76='op',<0>,8:155].[@-1,78:80='pos',<0>,8:158]
2022-05-03 11:39:55:299 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
2022-05-03 11:39:55:299 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:149]
2022-05-03 11:39:55:299 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,9:186].[@-1,42:45='text',<0>,9:189]
2022-05-03 11:39:55:299 action-translator LogManager.java:25 qattr [@-1,49:58='expression',<0>,9:196].[@-1,60:60='p',<0>,9:207]
2022-05-03 11:39:55:299 action-translator LogManager.java:25 qattr [@-1,64:69='REMOVE',<0>,9:211].[@-1,71:74='line',<0>,9:218]
2022-05-03 11:39:55:299 action-translator LogManager.java:25 qattr [@-1,78:83='REMOVE',<0>,9:225].[@-1,85:87='pos',<0>,9:232]
2022-05-03 11:39:55:300 action-translator LogManager.java:25 translate  $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) 
2022-05-03 11:39:55:300 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:121]
2022-05-03 11:39:55:300 action-translator LogManager.java:25 qattr [@-1,26:27='ID',<0>,10:145].[@-1,29:32='text',<0>,10:148]
2022-05-03 11:39:55:300 action-translator LogManager.java:25 qattr [@-1,36:37='li',<0>,10:155].[@-1,39:39='l',<0>,10:158]
2022-05-03 11:39:55:300 action-translator LogManager.java:25 qattr [@-1,43:48='LLAVEA',<0>,10:162].[@-1,50:53='line',<0>,10:169]
2022-05-03 11:39:55:300 action-translator LogManager.java:25 qattr [@-1,57:62='LLAVEA',<0>,10:176].[@-1,64:66='pos',<0>,10:183]
2022-05-03 11:39:55:300 action-translator LogManager.java:25 translate  $p =  $llamadas_structs.p 
2022-05-03 11:39:55:300 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:46]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 qattr [@-1,8:23='llamadas_structs',<0>,11:52].[@-1,25:25='p',<0>,11:69]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 translate  $p = $llamada_expre.p 
2022-05-03 11:39:55:301 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:43]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 qattr [@-1,7:19='llamada_expre',<0>,12:48].[@-1,21:21='p',<0>,12:62]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 translate  $p = $primitivo.p 
2022-05-03 11:39:55:301 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:39]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 qattr [@-1,7:15='primitivo',<0>,13:44].[@-1,17:17='p',<0>,13:54]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2022-05-03 11:39:55:301 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-05-03 11:39:55:301 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:127]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,16:158].[@-1,37:37='p',<0>,16:163]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,16:166].[@-1,43:46='text',<0>,16:169]
2022-05-03 11:39:55:301 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,16:175].[@-1,54:54='p',<0>,16:180]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,63:64='op',<0>,16:189].[@-1,66:69='line',<0>,16:192]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,72:73='op',<0>,16:198].[@-1,75:77='pos',<0>,16:201]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2022-05-03 11:39:55:302 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-05-03 11:39:55:302 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:159]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,17:190].[@-1,37:37='p',<0>,17:195]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,17:198].[@-1,44:47='text',<0>,17:202]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,17:208].[@-1,55:55='p',<0>,17:213]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,17:222].[@-1,68:71='line',<0>,17:226]
2022-05-03 11:39:55:302 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,17:232].[@-1,78:80='pos',<0>,17:236]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-05-03 11:39:55:303 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-05-03 11:39:55:303 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,18:160]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,18:191].[@-1,37:37='p',<0>,18:196]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,18:199].[@-1,44:47='text',<0>,18:203]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,18:209].[@-1,55:55='p',<0>,18:214]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,18:223].[@-1,68:71='line',<0>,18:227]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,18:233].[@-1,78:80='pos',<0>,18:237]
2022-05-03 11:39:55:303 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-05-03 11:39:55:303 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-05-03 11:39:55:304 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,19:278]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,40:43='opIz',<0>,19:317].[@-1,45:45='p',<0>,19:322]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,19:325].[@-1,51:54='text',<0>,19:328]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,57:60='opDe',<0>,19:334].[@-1,62:62='p',<0>,19:339]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,71:72='op',<0>,19:348].[@-1,74:77='line',<0>,19:351]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,80:81='op',<0>,19:357].[@-1,83:85='pos',<0>,19:360]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-05-03 11:39:55:304 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-05-03 11:39:55:304 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,20:158]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,36:39='opIz',<0>,20:193].[@-1,41:41='p',<0>,20:198]
2022-05-03 11:39:55:304 action-translator LogManager.java:25 qattr [@-1,44:46='ope',<0>,20:201].[@-1,48:51='text',<0>,20:205]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 qattr [@-1,54:57='opDe',<0>,20:211].[@-1,59:59='p',<0>,20:216]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 qattr [@-1,68:70='ope',<0>,20:225].[@-1,72:75='line',<0>,20:229]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 qattr [@-1,78:80='ope',<0>,20:235].[@-1,82:84='pos',<0>,20:239]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-05-03 11:39:55:305 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) 
2022-05-03 11:39:55:305 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,21:163]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 qattr [@-1,36:39='exp4',<0>,21:197].[@-1,41:41='p',<0>,21:202]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 qattr [@-1,45:52='TOSTRING',<0>,21:206].[@-1,54:57='line',<0>,21:215]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 qattr [@-1,61:68='TOSTRING',<0>,21:222].[@-1,70:72='pos',<0>,21:231]
2022-05-03 11:39:55:305 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2022-05-03 11:39:55:305 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewCapacity($exp11.p, $CAPACITY.line, $CAPACITY.pos) 
2022-05-03 11:39:55:306 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,22:163]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 qattr [@-1,37:41='exp11',<0>,22:198].[@-1,43:43='p',<0>,22:204]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 qattr [@-1,47:54='CAPACITY',<0>,22:208].[@-1,56:59='line',<0>,22:217]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 qattr [@-1,63:70='CAPACITY',<0>,22:224].[@-1,72:74='pos',<0>,22:233]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2022-05-03 11:39:55:306 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) 
2022-05-03 11:39:55:306 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,23:158]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 qattr [@-1,32:35='exp8',<0>,23:188].[@-1,37:37='p',<0>,23:193]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 qattr [@-1,41:43='LEN',<0>,23:197].[@-1,45:48='line',<0>,23:201]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 qattr [@-1,52:54='LEN',<0>,23:208].[@-1,56:58='pos',<0>,23:212]
2022-05-03 11:39:55:306 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-05-03 11:39:55:307 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) 
2022-05-03 11:39:55:307 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,24:216]
2022-05-03 11:39:55:307 action-translator LogManager.java:25 qattr [@-1,37:40='exp8',<0>,24:251].[@-1,42:42='p',<0>,24:256]
2022-05-03 11:39:55:307 action-translator LogManager.java:25 qattr [@-1,46:55='expression',<0>,24:260].[@-1,57:57='p',<0>,24:271]
2022-05-03 11:39:55:307 action-translator LogManager.java:25 qattr [@-1,61:68='CONTAINS',<0>,24:275].[@-1,70:73='line',<0>,24:284]
2022-05-03 11:39:55:307 action-translator LogManager.java:25 qattr [@-1,77:84='CONTAINS',<0>,24:291].[@-1,86:88='pos',<0>,24:300]
2022-05-03 11:39:55:315 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-05-03 11:39:55:315 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) 
2022-05-03 11:39:55:315 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,25:162]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 qattr [@-1,34:37='exp4',<0>,25:194].[@-1,39:39='p',<0>,25:199]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 qattr [@-1,43:49='TOCHARS',<0>,25:203].[@-1,51:54='line',<0>,25:211]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 qattr [@-1,58:64='TOCHARS',<0>,25:218].[@-1,66:68='pos',<0>,25:226]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-05-03 11:39:55:316 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) 
2022-05-03 11:39:55:316 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,26:160]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 qattr [@-1,36:39='exp4',<0>,26:194].[@-1,41:41='p',<0>,26:199]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 qattr [@-1,45:51='TOOWNED',<0>,26:203].[@-1,53:56='line',<0>,26:211]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 qattr [@-1,60:66='TOOWNED',<0>,26:218].[@-1,68:70='pos',<0>,26:226]
2022-05-03 11:39:55:316 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-05-03 11:39:55:317 action-translator LogManager.java:25 translate  $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) 
2022-05-03 11:39:55:317 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,27:116]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 qattr [@-1,25:28='exp5',<0>,27:139].[@-1,30:30='p',<0>,27:144]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 qattr [@-1,34:37='tipo',<0>,27:148].[@-1,39:40='te',<0>,27:153]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 qattr [@-1,44:49='CASTEO',<0>,27:158].[@-1,51:54='line',<0>,27:165]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 qattr [@-1,59:64='CASTEO',<0>,27:173].[@-1,66:68='pos',<0>,27:180]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-05-03 11:39:55:317 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) 
2022-05-03 11:39:55:317 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,28:159]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 qattr [@-1,36:39='exp6',<0>,28:193].[@-1,41:41='p',<0>,28:198]
2022-05-03 11:39:55:317 action-translator LogManager.java:25 qattr [@-1,45:50='ABOSLU',<0>,28:202].[@-1,52:55='line',<0>,28:209]
2022-05-03 11:39:55:318 action-translator LogManager.java:25 qattr [@-1,59:64='ABOSLU',<0>,28:216].[@-1,66:68='pos',<0>,28:223]
2022-05-03 11:39:55:318 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-05-03 11:39:55:318 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) 
2022-05-03 11:39:55:318 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,29:160]
2022-05-03 11:39:55:318 action-translator LogManager.java:25 qattr [@-1,40:43='exp7',<0>,29:198].[@-1,45:45='p',<0>,29:203]
2022-05-03 11:39:55:318 action-translator LogManager.java:25 qattr [@-1,49:54='ABOSLU',<0>,29:207].[@-1,56:59='line',<0>,29:214]
2022-05-03 11:39:55:318 action-translator LogManager.java:25 qattr [@-1,63:68='ABOSLU',<0>,29:221].[@-1,70:72='pos',<0>,29:228]
2022-05-03 11:39:55:318 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-03 11:39:55:318 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) 
2022-05-03 11:39:55:318 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,30:162]
2022-05-03 11:39:55:319 action-translator LogManager.java:25 qattr [@-1,33:36='exp9',<0>,30:193].[@-1,38:38='p',<0>,30:198]
2022-05-03 11:39:55:319 action-translator LogManager.java:25 qattr [@-1,42:50='CLONATION',<0>,30:202].[@-1,52:55='line',<0>,30:212]
2022-05-03 11:39:55:319 action-translator LogManager.java:25 qattr [@-1,59:67='CLONATION',<0>,30:219].[@-1,69:71='pos',<0>,30:229]
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-05-03 11:39:55:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-03 11:39:55:320 action-translator LogManager.java:25 translate  $p = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) 
2022-05-03 11:39:55:320 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,612:23]
2022-05-03 11:39:55:320 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,612:51].[@-1,33:36='text',<0>,612:54]
2022-05-03 11:39:55:320 action-translator LogManager.java:25 qattr [@-1,57:60='PARA',<0>,612:78].[@-1,62:65='line',<0>,612:83]
2022-05-03 11:39:55:320 action-translator LogManager.java:25 qattr [@-1,69:72='PARA',<0>,612:90].[@-1,74:76='pos',<0>,612:95]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 translate  $p = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) 
2022-05-03 11:39:55:321 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,613:39]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,613:67].[@-1,33:36='text',<0>,613:70]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 qattr [@-1,40:41='li',<0>,613:77].[@-1,43:43='l',<0>,613:80]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 qattr [@-1,47:50='PARA',<0>,613:84].[@-1,52:55='line',<0>,613:89]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 qattr [@-1,59:62='PARA',<0>,613:96].[@-1,64:66='pos',<0>,613:101]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 translate  
            num, err:= strconv.Atoi($NUMBER.text)
            if err !=nil{ 
                fmt.Println(err)
            }   
            $p = expresion.NewPrimitivo (num, interfaces.INTEGER)
     
2022-05-03 11:39:55:321 action-translator LogManager.java:25 qattr [@-1,39:44='NUMBER',<0>,619:37].[@-1,46:49='text',<0>,619:44]
2022-05-03 11:39:55:321 action-translator LogManager.java:25 attr [@-1,142:142='p',<0>,623:13]
2022-05-03 11:39:55:322 action-translator LogManager.java:25 translate 
        num, err:= strconv.ParseFloat($FLOAT_NUM.text, 64)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.FLOAT)
    
2022-05-03 11:39:55:322 action-translator LogManager.java:25 qattr [@-1,40:48='FLOAT_NUM',<0>,626:39].[@-1,50:53='text',<0>,626:49]
2022-05-03 11:39:55:322 action-translator LogManager.java:25 attr [@-1,131:131='p',<0>,630:9]
2022-05-03 11:39:55:322 action-translator LogManager.java:25 translate 
        num, err:= strconv.ParseBool($op.text)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)
    
2022-05-03 11:39:55:322 action-translator LogManager.java:25 qattr [@-1,39:40='op',<0>,633:38].[@-1,42:45='text',<0>,633:41]
2022-05-03 11:39:55:322 action-translator LogManager.java:25 attr [@-1,119:119='p',<0>,637:9]
2022-05-03 11:39:55:322 action-translator LogManager.java:25 translate  
        str:= $CADENA.text[1:len($CADENA.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.STR)
     
2022-05-03 11:39:55:322 action-translator LogManager.java:25 qattr [@-1,17:22='CADENA',<0>,640:15].[@-1,24:27='text',<0>,640:22]
2022-05-03 11:39:55:322 action-translator LogManager.java:25 qattr [@-1,36:41='CADENA',<0>,640:34].[@-1,43:46='text',<0>,640:41]
2022-05-03 11:39:55:323 action-translator LogManager.java:25 attr [@-1,61:61='p',<0>,641:9]
2022-05-03 11:39:55:323 action-translator LogManager.java:25 translate 
        str:= $CHAR_2.text[1:len($CHAR_2.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.CHAR)
    
2022-05-03 11:39:55:323 action-translator LogManager.java:25 qattr [@-1,16:21='CHAR_2',<0>,644:15].[@-1,23:26='text',<0>,644:22]
2022-05-03 11:39:55:323 action-translator LogManager.java:25 qattr [@-1,35:40='CHAR_2',<0>,644:34].[@-1,42:45='text',<0>,644:41]
2022-05-03 11:39:55:323 action-translator LogManager.java:25 attr [@-1,60:60='p',<0>,645:9]
2022-05-03 11:39:55:323 action-translator LogManager.java:25 translate  $p = $list_array.p 
2022-05-03 11:39:55:323 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,647:19]
2022-05-03 11:39:55:323 action-translator LogManager.java:25 qattr [@-1,7:16='list_array',<0>,647:24].[@-1,18:18='p',<0>,647:35]
2022-05-03 11:39:55:324 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:324 action-translator LogManager.java:25 translate   $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) 
2022-05-03 11:39:55:324 action-translator LogManager.java:25 attr [@-1,3:3='p',<0>,2:36]
2022-05-03 11:39:55:324 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,2:67].[@-1,37:40='text',<0>,2:70]
2022-05-03 11:39:55:324 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:76].[@-1,46:49='line',<0>,2:79]
2022-05-03 11:39:55:324 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:85].[@-1,55:57='pos',<0>,2:88]
2022-05-03 11:39:55:324 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:325 action-translator LogManager.java:25 translate  $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) 
2022-05-03 11:39:55:325 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:136]
2022-05-03 11:39:55:325 action-translator LogManager.java:25 qattr [@-1,29:30='li',<0>,5:163].[@-1,32:32='p',<0>,5:166]
2022-05-03 11:39:55:325 action-translator LogManager.java:25 qattr [@-1,36:45='expression',<0>,5:170].[@-1,47:47='p',<0>,5:181]
2022-05-03 11:39:55:325 action-translator LogManager.java:25 qattr [@-1,51:56='CORCHA',<0>,5:185].[@-1,58:61='line',<0>,5:192]
2022-05-03 11:39:55:325 action-translator LogManager.java:25 qattr [@-1,65:70='CORCHC',<0>,5:199].[@-1,72:74='pos',<0>,5:206]
2022-05-03 11:39:55:325 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:326 action-translator LogManager.java:25 translate 
2022-05-03 11:39:55:326 action-translator LogManager.java:25 translate   $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) 
2022-05-03 11:39:55:326 action-translator LogManager.java:25 attr [@-1,3:3='p',<0>,2:37]
2022-05-03 11:39:55:326 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,2:68].[@-1,37:40='text',<0>,2:71]
2022-05-03 11:39:55:326 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:77].[@-1,46:49='line',<0>,2:80]
2022-05-03 11:39:55:326 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:86].[@-1,55:57='pos',<0>,2:89]
2022-05-03 11:39:55:326 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:326 action-translator LogManager.java:25 translate  $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) 
2022-05-03 11:39:55:326 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:105]
2022-05-03 11:39:55:327 action-translator LogManager.java:25 qattr [@-1,32:33='li',<0>,5:135].[@-1,35:35='p',<0>,5:138]
2022-05-03 11:39:55:327 action-translator LogManager.java:25 qattr [@-1,39:41='id2',<0>,5:142].[@-1,43:46='text',<0>,5:146]
2022-05-03 11:39:55:327 action-translator LogManager.java:25 qattr [@-1,50:52='PNT',<0>,5:153].[@-1,54:57='line',<0>,5:157]
2022-05-03 11:39:55:327 action-translator LogManager.java:25 qattr [@-1,61:63='PNT',<0>,5:164].[@-1,65:67='pos',<0>,5:168]
2022-05-03 11:39:55:327 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-03 11:39:55:945 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-05-03 11:39:55:945 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-05-03 11:39:55:993 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-05-03 11:39:55:993 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

