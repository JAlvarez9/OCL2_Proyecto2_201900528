2022-04-05 00:45:22:078 grammar LogManager.java:25 before: (PARSER_GRAMMAR Interprete (OPTIONS (= tokenVocab Interprete_lex)) (@ header { 
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
        $l = arrayList.New()   
    }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
            listInt := localctx.(*InstruccionesContext).GetE()
                for _, e := range listInt { 
                    $l.Add(e.GetInstr())
                 }
            }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printaso PYC { $instr = $printaso.instr }) (ALT printaso { $instr = $printaso.instr }) (ALT declaracion { $instr = $declaracion.instr }) (ALT vector_decl { $instr = $vector_decl.instr }) (ALT array_decl { $instr = $array_decl.instr }) (ALT asignacion { $instr = $asignacion.instr }) (ALT sent_if { $instr = $sent_if.instr }) (ALT sent_loop { $instr = $sent_loop.instr }) (ALT sent_while { $instr = $sent_while.instr }) (ALT sent_match { $instr = $sent_match.instr }) (ALT sent_funciones_Vec { $instr = $sent_funciones_Vec.instr }) (ALT sent_ForIn { $instr = $sent_ForIn.instr }) (ALT funciones_Trans { $instr = $funciones_Trans.instr }) (ALT sent_funcion { $instr = $sent_funcion.instr }) (ALT sent_Llamada { $instr = $sent_Llamada.instr }) (ALT sent_struct { $instr = $sent_struct.instr }) (ALT sent_Modulos { $instr = $sent_Modulos.instr }))) (RULE sent_Modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT PUBLI MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PUBLICO, $li.l, $MODULO.line, $MODULO.pos) }) (ALT MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PRIVADO, $li.l, $MODULO.line, $MODULO.pos) }))) (RULE intructions_modulos (returns  *arrayList.List l ) (BLOCK (ALT (= li intructions_modulos) instruct_modulos { 
        $li.l.Add($instruct_modulos.instr)  
        $l = $li.l
     }) (ALT instruct_modulos { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     }))) (RULE instruct_modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT sent_Modulos { $instr = $sent_Modulos.instr }) (ALT PUBLI sent_funcion { $instr = modulos.NewFuncion_Mod( $sent_funcion.instr, interfaces.PUBLICO, $PUBLI.line, $PUBLI.pos ) }) (ALT (= sf sent_funcion) { $instr = modulos.NewFuncion_Mod( $sf.instr, interfaces.PRIVADO, 0, 0 ) }) (ALT PUBLI sent_struct { $instr = modulos.NewStruct_Mod( $sent_struct.instr, interfaces.PUBLICO , $PUBLI.line, $PUBLI.pos ) }) (ALT (= ss sent_struct) { $instr = modulos.NewStruct_Mod( $ss.instr, interfaces.PUBLICO , 0, 0 ) }))) (RULE sent_struct (returns  interfaces.Instruction instr ) (BLOCK (ALT STRUCT ID LLAVEA atributos_struct LLAVEC { $instr = structs.NewStruct($ID.text, $atributos_struct.l,$STRUCT.line,$STRUCT.pos) }))) (RULE atributos_struct (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct) COMA (= asd atributos_struct_decl) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    }))) (RULE atributos_struct_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS array_decl_array {$s = interfaces.Symbol{ Id: $ID.text, Tipo: 6}}) (ALT ID DPTS vector_decl { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te} }) (ALT (= id1 ID) DPTS (= id2 ID) { $s = interfaces.Symbol{ Id: $id1.text, Tipo: 9, Valor: $id2.text} }))) (RULE sent_funcion (returns  interfaces.Instruction instr ) (BLOCK (ALT FUNCT ID PARA PARC LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($id1.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA params_funcion PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($id1.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }))) (RULE params_funcion (returns  *arrayList.List l ) (BLOCK (ALT (= li params_funcion) COMA params_funcion_decl {
        $li.l.Add($params_funcion_decl.s)  
        $l = $li.l
    }) (ALT params_funcion_decl { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     }))) (RULE params_funcion_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS PUNTERO MUT array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: true} }) (ALT ID DPTS PUNTERO array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: false} }) (ALT ID DPTS PUNTERO MUT vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: true} }) (ALT ID DPTS PUNTERO vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: false} }) (ALT ID DPTS MUT tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: true} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: false} }))) (RULE sent_Llamada (returns  interfaces.Instruction instr ) (BLOCK (ALT ID PARA PARC PYC { $instr = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC PYC { $instr = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE params_llamada (returns  *arrayList.List l ) (BLOCK (ALT (= li params_llamada) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT (= li params_llamada) COMA PUNTERO MUT expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }) (ALT PUNTERO MUT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE funciones_Trans (returns interfaces.Instruction instr) (BLOCK (ALT BRE PYC { $instr = sentenciatransferencia.NewBreak( nil, $BRE.line, $BRE.pos ) }) (ALT BRE expression PYC { $instr = sentenciatransferencia.NewBreak( $expression.p, $BRE.line, $BRE.pos ) }) (ALT CONTINIU PYC { $instr = sentenciatransferencia.NewContinue($CONTINIU.line, $CONTINIU.pos) }) (ALT RETURNASO PYC { $instr = sentenciatransferencia.NewReturnaso(nil, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression PYC { $instr = sentenciatransferencia.NewReturnaso($expression.p, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression_vec_Arr PYC { $instr = sentenciatransferencia.NewReturnaso($expression_vec_Arr.p, $RETURNASO.line, $RETURNASO.pos) }))) (RULE declaracion (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $expression.p, true, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $expression.p, false, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $sentencias_expr.p, true,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $sentencias_expr.p, true, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        }))) (RULE array_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC { 
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, true, $LET.line,$LET.pos) 
    }) (ALT LET MUT ID IGUAL (= ea expression_vec_Arr) PYC {
        var a *structsinter.Array_type
        $instr = instruction.NewDeclaration_Array($ID.text, a, $ea.p, true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC {
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, false, $LET.line,$LET.pos) 
    }) (ALT LET ID IGUAL (= ea expression_vec_Arr) PYC {
        var a *structsinter.Array_type
        $instr = instruction.NewDeclaration_Array($ID.text, a, $ea.p, false, $LET.line,$LET.pos) 
    }))) (RULE array_decl_array (returns  *structsinter.Array_type at ) (BLOCK (ALT CORCHA (= stru array_decl_array) PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $stru.at.Tipo,
                Size: $expression_vec_Arr.p,
                Array_Son: $stru.at,
	        }
        $at = a 
    }) (ALT CORCHA tipo PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $tipo.te,
                Size: $expression_vec_Arr.p,
                Array_Son: nil,
	        }
        $at = a
    }))) (RULE vector_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,true, $LET.line,$LET.pos) 
    }) (ALT LET MUT (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,true, $LET.line,$LET.pos) 
    }) (ALT LET MUT ID IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, 4, $ea.p, "" ,true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,false, $LET.line,$LET.pos) 
    }) (ALT LET ID IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, 4, $ea.p, "" ,false, $LET.line,$LET.pos) 
    }) (ALT LET (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,false, $LET.line,$LET.pos) 
    }))) (RULE vector_expr (returns  interfaces.Expresion p ) (BLOCK (ALT VEC EXCLA CORCHA list_expre_vec_arr CORCHC { 
        var a,b,c interfaces.Expresion
        $p = vector.NewVector( $list_expre_vec_arr.l, a , b , false,c,$CORCHA.line, $CORCHA.pos  ) 
        }) (ALT VEC EXCLA CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { 
        var a interfaces.Expresion
        $p = vector.NewVector( arrayList.New(), $exp1.p, $exp2.p ,false, a ,$CORCHA.line, $CORCHA.pos) 
        }) (ALT VEC DPTS DPTS NEWI PARA PARC { 
        var a,b,c interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,true,c,$NEWI.line,$NEWI.pos) 
    }) (ALT VEC EXCLA DPTS DPTS WITH_CAP PARA expression_vec_Arr PARC { 
        var a,b interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,false,$expression_vec_Arr.p,$WITH_CAP.line,$WITH_CAP.pos) 
    }))) (RULE sent_funciones_Vec (returns  interfaces.Instruction instr ) (BLOCK (ALT ID PNT PUSH PARA expression PARC PYC { $instr = funcionesvectores.NewPush($ID.text, $expression.p, $PUSH.line, $PUSH.pos) }) (ALT ID PNT INSERT PARA (= exp1 expression) COMA (= exp2 expression) PARC PYC { 
        $instr = funcionesvectores.NewInsert($ID.text, $exp1.p, $exp2.p, $INSERT.line, $INSERT.pos) 
    }) (ALT ID PNT REMOVE PARA expression PARC PYC { 
        $instr = funcionesvectores.NewRemove_instr($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
    }))) (RULE sentencias_expr (returns  interfaces.Expresion p ) (BLOCK (ALT sent_if_expr PYC { $p = $sent_if_expr.p }) (ALT sent_loop_expr { $p = $sent_loop_expr.p }) (ALT sent_matchexpr { $p = $sent_matchexpr.p }))) (RULE sent_matchexpr (returns  interfaces.Expresion p ) (BLOCK (ALT MATCH expression LLAVEA matchexpr_listbrazos el_defaultexpr LLAVEC { 
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
        }) (ALT MATCH expression LLAVEA matchexpr_listbrazos LLAVEC {
        var a interfaces.Expresion
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, a, $MATCH.line,$MATCH.pos)
    }) (ALT MATCH expression LLAVEA el_defaultexpr LLAVEC {
        $p = matchexpr.NewMatch_Expr($expression.p, arrayList.New(), $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
    }))) (RULE matchexpr_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= brz matchexpr_listbrazos) list_brazosexpr {
        $brz.l.Add($list_brazosexpr.p)
        $l = $brz.l
    }) (ALT list_brazosexpr {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    }))) (RULE list_brazosexpr (returns  interfaces.Expresion p ) (BLOCK (ALT (= po expression) IGUAL MAYOR (= pi expression) COMA { 
        a := arrayList.New()
        a.Add($po.p)
        $p = matchexpr.NewBrazo_expr(a, $pi.p, $IGUAL.line , $IGUAL.pos)
     }) (ALT (= exp matchexpr_listbrazosexpr_listexpr) IGUAL MAYOR expression COMA { $p = matchexpr.NewBrazo_expr( $exp.l , $expression.p ,$IGUAL.line, $IGUAL.pos ) }))) (RULE matchexpr_listbrazosexpr_listexpr (returns   *arrayList.List l ) (BLOCK (ALT (= g match_listbrazos_listexpr) OR_MATCH expression {
        $g.l.Add($expression.p)
        $l = $g.l
    }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE el_defaultexpr (returns  interfaces.Expresion p ) (BLOCK (ALT DEFAUL IGUAL MAYOR expression COMA { $p = matchexpr.NewDefault_Expr($expression.p, $DEFAUL.line, $DEFAUL.pos) }))) (RULE tipo (returns  interfaces.TipoExpresion te) (BLOCK (ALT INT { $te = 0 }) (ALT FLOAT { $te = 1 }) (ALT STR { $te = 2 }) (ALT BOOLEAN { $te = 3}) (ALT CHAR { $te = 7 }) (ALT STRING { $te = 8 }) (ALT USIZE { $te = 13 }))) (RULE asignacion (returns  interfaces.Instruction instr ) (BLOCK (ALT ID IGUAL expression PYC { $instr = instruction.NewAsignacion($ID.text, $expression.p, "" ,$ID.line, $ID.pos) }) (ALT (= id1 ID) PNT (= id2 ID) IGUAL expression PYC { $instr = instruction.NewAsignacion($id1.text, $expression.p, $id2.text ,$ID.line, $ID.pos) }))) (RULE sent_if_expr (returns interfaces.Expresion p ) (BLOCK (ALT IF (= ini expression) LLAVEA (= exp1 expression) LLAVEC { 
        var a interfaces.Expresion
        $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p,a, $IF.line, $IF.pos   ) 
        }) (ALT IF (= ini expression) LLAVEA (= exp1 expression) LLAVEC ELSE LLAVEA (= exp2 expression) LLAVEC { $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p, $exp2.p, $IF.line, $IF.pos ) }) (ALT IF (= ini expression) LLAVEA (= exp1 expression) LLAVEC ELSE (= sent sent_if_expr) { $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p,$sent.p, $IF.line, $IF.pos   )  }))) (RULE sent_loop_expr (returns  interfaces.Expresion p ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $p = sentenciasexpr.NewLoop_expr($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE printaso (returns  interfaces.Instruction instr ) (BLOCK (ALT PRINT EXCLA PARA expression PARC { 
         a := arrayList.New()
        $instr = instruction.NewImprimir($expression.p, a, $PRINT.line, $PRINT.pos) 
        }) (ALT PRINT EXCLA PARA expression COMA (= li list_expre_print) PARC {  $instr = instruction.NewImprimir($expression.p, $li.l, $PRINT.line, $PRINT.pos)  }))) (RULE list_expre_print (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_print) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE list_expre_vec_arr (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_vec_arr) COMA expression_vec_Arr { 
        $li.l.Add($expression_vec_Arr.p)  
        $l = $li.l
        }) (ALT expression_vec_Arr {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    }))) (RULE sent_if (returns  interfaces.Instruction instr ) (BLOCK (ALT IF expression LLAVEA instrucciones LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $instrucciones.l, arrayList.New(), $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE LLAVEA (= ins2 instrucciones) LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, $ins2.l, $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE (= sent sent_if) { 
        a := arrayList.New()
        a.Add($sent.instr)
        $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, a , $IF.line,$IF.pos) }))) (RULE sent_match (returns  interfaces.Instruction instr ) (BLOCK (ALT MATCH expression LLAVEA match_listbrazos el_default LLAVEC { $instr = match.NewMatch($expression.p, $match_listbrazos.l, $el_default.instr, $MATCH.line, $MATCH.pos) }) (ALT MATCH expression LLAVEA el_default LLAVEC {$instr = match.NewMatch($expression.p, arrayList.New(), $el_default.instr, $MATCH.line, $MATCH.pos)}))) (RULE match_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= braz match_listbrazos) list_brazos { 
    $braz.l.Add($list_brazos.instr)
     $l = $braz.l
     }) (ALT list_brazos {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    }))) (RULE list_brazos (returns  interfaces.Instruction instr ) (BLOCK (ALT expression IGUAL MAYOR LLAVEA instrucciones LLAVEC { 
        a := arrayList.New()
        a.Add($expression.p)
        $instr = match.NewBrazo(a, $instrucciones.l, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewBrazo($exprs.l, $instrucciones.l, $IGUAL.line, $IGUAL.pos)  }) (ALT expression IGUAL MAYOR instruccion COMA {
        a := arrayList.New()
        a.Add($expression.p)
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo(a, b, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR instruccion COMA {
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo($exprs.l, b, $IGUAL.line, $IGUAL.pos)
        }))) (RULE match_listbrazos_listexpr (returns  *arrayList.List l ) (BLOCK (ALT (= h match_listbrazos_listexpr) OR_MATCH expression { 
        $h.l.Add($expression.p)
        $l = $h.l
     }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        }))) (RULE el_default (returns  interfaces.Instruction instr ) (BLOCK (ALT DEFAUL IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewDefault($instrucciones.l , $DEFAUL.line, $DEFAUL.pos) }) (ALT DEFAUL IGUAL MAYOR instruccion COMA { 
        a := arrayList.New()
        a.Add($instruccion.instr)
        $instr = match.NewDefault(a , $DEFAUL.line, $DEFAUL.pos)  
        }))) (RULE sent_loop (returns  interfaces.Instruction instr ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewLoop($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE sent_while (returns  interfaces.Instruction instr ) (BLOCK (ALT WHILE expression LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewWhile($expression.p , $instrucciones.l , $WHILE.line, $WHILE.pos) }))) (RULE sent_ForIn (returns  interfaces.Instruction instr ) (BLOCK (ALT FOR ID IN (= exp1 expression) PNT PNT (= exp2 expression) LLAVEA instrucciones LLAVEC {
        var a interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, $exp1.p, $exp2.p,a, $instrucciones.l, $IN.line, $IN.pos )
    }) (ALT FOR ID IN (= exp expression_vec_Arr) LLAVEA instrucciones LLAVEC {
        var a,b interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, a,b, $exp.p , $instrucciones.l, $IN.line, $IN.pos )
    }))) (RULE expression_vec_Arr (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= opIz expression_vec_Arr) (= op MODUL) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (BLOCK (ALT MUL) (ALT DIV))) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (BLOCK (ALT SUM) (ALT REST))) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IGUALACION) (ALT DIFERENCIACION))) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression_vec_Arr PARC { $p = $expression_vec_Arr.p}) (ALT (= opIz expression_vec_Arr) (= ope (BLOCK (ALT AND) (ALT OR))) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT CORCHA list_expre_vec_arr CORCHC { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        }) (ALT CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT vector_expr { $p = $vector_expr.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE atributos_struct_exp (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct_exp) COMA (= asd atributos_struct_decl_exp) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl_exp {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    }))) (RULE atributos_struct_decl_exp (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS (= exp2 expression) {$s = interfaces.Symbol{ Id: $ID.text, Valor: $exp2.p } }) (ALT ID DPTS (= exp expression_vec_Arr) {$s = interfaces.Symbol{ Id: $ID.text,  Valor:$exp.p }}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= exp8 expression) PNT LEN PARA PARC { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }) (ALT (= opIz expression) (= op MODUL) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression) (= ope (BLOCK (ALT MUL) (ALT DIV))) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression) (= ope (BLOCK (ALT SUM) (ALT REST))) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= ope REST) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IGUALACION) (ALT DIFERENCIACION))) (= opDe expression) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= ope (BLOCK (ALT AND) (ALT OR))) (= opDe expression) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT ID PNT REMOVE PARA expression PARC { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) }) (ALT (= exp8 expression) PNT CONTAINS PARA PUNTERO expression PARC { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT (= exp4 expression) PNT TOSTRING PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }) (ALT (= exp4 expression) PNT TOOWNED PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }) (ALT (= exp5 expression) CASTEO tipo { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }) (ALT (= exp6 expression) PNT ABOSLU PARA PARC { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp7 expression) PNT RAIZITA PARA PARC { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp9 expression) PNT CLONATION PARA PARC { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }) (ALT ID LLAVEA (= li atributos_struct_exp) LLAVEC { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) }) (ALT llamadas_structs { $p =  $llamadas_structs.p }) (ALT llamada_expre { $p = $llamada_expre.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE llamada_expre (returns interfaces.Expresion p) (BLOCK (ALT ID PARA PARC { $p = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC { $p = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE primitivo (returns  interfaces.Expresion p) (BLOCK (ALT NUMBER { 
            num, err:= strconv.Atoi($NUMBER.text)
            if err !=nil{ 
                fmt.Println(err)
            }   
            $p = expresion.NewPrimitivo (num, interfaces.INTEGER)
     }) (ALT FLOAT_NUM {
        num, err:= strconv.ParseFloat($FLOAT_NUM.text, 64)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.FLOAT)
    }) (ALT (= op (BLOCK (ALT TRUE) (ALT FALSE))) {
        num, err:= strconv.ParseBool($op.text)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)
    }) (ALT CADENA { 
        str:= $CADENA.text[1:len($CADENA.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.STR)
     }) (ALT CHAR_2 {
        str:= $CHAR_2.text[1:len($CHAR_2.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.CHAR)
    }) (ALT list_array { $p = $list_array.p }))) (RULE list_array (returns  interfaces.Expresion p ) (BLOCK (ALT (= li list_array) CORCHA expression CORCHC { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) }))) (RULE llamadas_structs (returns  interfaces.Expresion p ) (BLOCK (ALT (= li llamadas_structs) PNT (= id2 ID) { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })))))
2022-04-05 00:45:22:107 grammar LogManager.java:25 after: (PARSER_GRAMMAR Interprete (OPTIONS (= tokenVocab Interprete_lex)) (@ header { 
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
        $l = arrayList.New()   
    }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
            listInt := localctx.(*InstruccionesContext).GetE()
                for _, e := range listInt { 
                    $l.Add(e.GetInstr())
                 }
            }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT printaso PYC { $instr = $printaso.instr }) (ALT printaso { $instr = $printaso.instr }) (ALT declaracion { $instr = $declaracion.instr }) (ALT vector_decl { $instr = $vector_decl.instr }) (ALT array_decl { $instr = $array_decl.instr }) (ALT asignacion { $instr = $asignacion.instr }) (ALT sent_if { $instr = $sent_if.instr }) (ALT sent_loop { $instr = $sent_loop.instr }) (ALT sent_while { $instr = $sent_while.instr }) (ALT sent_match { $instr = $sent_match.instr }) (ALT sent_funciones_Vec { $instr = $sent_funciones_Vec.instr }) (ALT sent_ForIn { $instr = $sent_ForIn.instr }) (ALT funciones_Trans { $instr = $funciones_Trans.instr }) (ALT sent_funcion { $instr = $sent_funcion.instr }) (ALT sent_Llamada { $instr = $sent_Llamada.instr }) (ALT sent_struct { $instr = $sent_struct.instr }) (ALT sent_Modulos { $instr = $sent_Modulos.instr }))) (RULE sent_Modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT PUBLI MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PUBLICO, $li.l, $MODULO.line, $MODULO.pos) }) (ALT MODULO ID LLAVEA (= li intructions_modulos) LLAVEC { $instr = modulos.NewModulos($ID.text, interfaces.PRIVADO, $li.l, $MODULO.line, $MODULO.pos) }))) (RULE intructions_modulos (returns  *arrayList.List l ) (BLOCK (ALT (= li intructions_modulos) instruct_modulos { 
        $li.l.Add($instruct_modulos.instr)  
        $l = $li.l
     }) (ALT instruct_modulos { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     }))) (RULE instruct_modulos (returns  interfaces.Instruction instr ) (BLOCK (ALT sent_Modulos { $instr = $sent_Modulos.instr }) (ALT PUBLI sent_funcion { $instr = modulos.NewFuncion_Mod( $sent_funcion.instr, interfaces.PUBLICO, $PUBLI.line, $PUBLI.pos ) }) (ALT (= sf sent_funcion) { $instr = modulos.NewFuncion_Mod( $sf.instr, interfaces.PRIVADO, 0, 0 ) }) (ALT PUBLI sent_struct { $instr = modulos.NewStruct_Mod( $sent_struct.instr, interfaces.PUBLICO , $PUBLI.line, $PUBLI.pos ) }) (ALT (= ss sent_struct) { $instr = modulos.NewStruct_Mod( $ss.instr, interfaces.PUBLICO , 0, 0 ) }))) (RULE sent_struct (returns  interfaces.Instruction instr ) (BLOCK (ALT STRUCT ID LLAVEA atributos_struct LLAVEC { $instr = structs.NewStruct($ID.text, $atributos_struct.l,$STRUCT.line,$STRUCT.pos) }))) (RULE atributos_struct (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct) COMA (= asd atributos_struct_decl) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    }))) (RULE atributos_struct_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS array_decl_array {$s = interfaces.Symbol{ Id: $ID.text, Tipo: 6}}) (ALT ID DPTS vector_decl { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te} }) (ALT (= id1 ID) DPTS (= id2 ID) { $s = interfaces.Symbol{ Id: $id1.text, Tipo: 9, Valor: $id2.text} }))) (RULE sent_funcion (returns  interfaces.Instruction instr ) (BLOCK (ALT FUNCT ID PARA PARC LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR tipo LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($id1.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT (= id1 ID) PARA params_funcion PARC REST MAYOR (= id2 ID) LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($id1.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR array_decl_array LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC { 
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }) (ALT FUNCT ID PARA params_funcion PARC REST MAYOR VEC MENOR tipo MAYOR LLAVEA instrucciones LLAVEC {
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    }))) (RULE params_funcion (returns  *arrayList.List l ) (BLOCK (ALT (= li params_funcion) COMA params_funcion_decl {
        $li.l.Add($params_funcion_decl.s)  
        $l = $li.l
    }) (ALT params_funcion_decl { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     }))) (RULE params_funcion_decl (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS PUNTERO MUT array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: true} }) (ALT ID DPTS PUNTERO array_decl_array { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: false} }) (ALT ID DPTS PUNTERO MUT vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: true} }) (ALT ID DPTS PUNTERO vector_expr { $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: false} }) (ALT ID DPTS MUT tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: true} }) (ALT ID DPTS tipo { $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: false} }))) (RULE sent_Llamada (returns  interfaces.Instruction instr ) (BLOCK (ALT ID PARA PARC PYC { $instr = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC PYC { $instr = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE params_llamada (returns  *arrayList.List l ) (BLOCK (ALT (= li params_llamada) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT (= li params_llamada) COMA PUNTERO MUT expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }) (ALT PUNTERO MUT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE funciones_Trans (returns interfaces.Instruction instr) (BLOCK (ALT BRE PYC { $instr = sentenciatransferencia.NewBreak( nil, $BRE.line, $BRE.pos ) }) (ALT BRE expression PYC { $instr = sentenciatransferencia.NewBreak( $expression.p, $BRE.line, $BRE.pos ) }) (ALT CONTINIU PYC { $instr = sentenciatransferencia.NewContinue($CONTINIU.line, $CONTINIU.pos) }) (ALT RETURNASO PYC { $instr = sentenciatransferencia.NewReturnaso(nil, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression PYC { $instr = sentenciatransferencia.NewReturnaso($expression.p, $RETURNASO.line, $RETURNASO.pos) }) (ALT RETURNASO expression_vec_Arr PYC { $instr = sentenciatransferencia.NewReturnaso($expression_vec_Arr.p, $RETURNASO.line, $RETURNASO.pos) }))) (RULE declaracion (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $expression.p, true, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID IGUAL expression PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $expression.p, false, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $sentencias_expr.p, true,$IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET MUT ID IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $sentencias_expr.p, true, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID DPTS tipo IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        }) (ALT LET ID IGUAL sentencias_expr PYC { 
        $instr = instruction.NewDeclaration($ID.text, 4, $sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        }))) (RULE array_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC { 
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, true, $LET.line,$LET.pos) 
    }) (ALT LET MUT ID IGUAL (= ea expression_vec_Arr) PYC {
        var a *structsinter.Array_type
        $instr = instruction.NewDeclaration_Array($ID.text, a, $ea.p, true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS (= tr array_decl_array) IGUAL (= ea expression_vec_Arr) PYC {
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, false, $LET.line,$LET.pos) 
    }) (ALT LET ID IGUAL (= ea expression_vec_Arr) PYC {
        var a *structsinter.Array_type
        $instr = instruction.NewDeclaration_Array($ID.text, a, $ea.p, false, $LET.line,$LET.pos) 
    }))) (RULE array_decl_array (returns  *structsinter.Array_type at ) (BLOCK (ALT CORCHA (= stru array_decl_array) PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $stru.at.Tipo,
                Size: $expression_vec_Arr.p,
                Array_Son: $stru.at,
	        }
        $at = a 
    }) (ALT CORCHA tipo PYC expression_vec_Arr CORCHC {
        a:= &structsinter.Array_type{
                Tipo: $tipo.te,
                Size: $expression_vec_Arr.p,
                Array_Son: nil,
	        }
        $at = a
    }))) (RULE vector_decl (returns  interfaces.Instruction instr ) (BLOCK (ALT LET MUT ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,true, $LET.line,$LET.pos) 
    }) (ALT LET MUT (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC { 
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,true, $LET.line,$LET.pos) 
    }) (ALT LET MUT ID IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, 4, $ea.p, "" ,true, $LET.line,$LET.pos) 
    }) (ALT LET ID DPTS VEC MENOR tipo MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,false, $LET.line,$LET.pos) 
    }) (ALT LET ID IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($ID.text, 4, $ea.p, "" ,false, $LET.line,$LET.pos) 
    }) (ALT LET (= id1 ID) DPTS VEC MENOR (= id2 ID) MAYOR IGUAL (= ea vector_expr) PYC {
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,false, $LET.line,$LET.pos) 
    }))) (RULE vector_expr (returns  interfaces.Expresion p ) (BLOCK (ALT VEC EXCLA CORCHA list_expre_vec_arr CORCHC { 
        var a,b,c interfaces.Expresion
        $p = vector.NewVector( $list_expre_vec_arr.l, a , b , false,c,$CORCHA.line, $CORCHA.pos  ) 
        }) (ALT VEC EXCLA CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { 
        var a interfaces.Expresion
        $p = vector.NewVector( arrayList.New(), $exp1.p, $exp2.p ,false, a ,$CORCHA.line, $CORCHA.pos) 
        }) (ALT VEC DPTS DPTS NEWI PARA PARC { 
        var a,b,c interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,true,c,$NEWI.line,$NEWI.pos) 
    }) (ALT VEC EXCLA DPTS DPTS WITH_CAP PARA expression_vec_Arr PARC { 
        var a,b interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,false,$expression_vec_Arr.p,$WITH_CAP.line,$WITH_CAP.pos) 
    }))) (RULE sent_funciones_Vec (returns  interfaces.Instruction instr ) (BLOCK (ALT ID PNT PUSH PARA expression PARC PYC { $instr = funcionesvectores.NewPush($ID.text, $expression.p, $PUSH.line, $PUSH.pos) }) (ALT ID PNT INSERT PARA (= exp1 expression) COMA (= exp2 expression) PARC PYC { 
        $instr = funcionesvectores.NewInsert($ID.text, $exp1.p, $exp2.p, $INSERT.line, $INSERT.pos) 
    }) (ALT ID PNT REMOVE PARA expression PARC PYC { 
        $instr = funcionesvectores.NewRemove_instr($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
    }))) (RULE sentencias_expr (returns  interfaces.Expresion p ) (BLOCK (ALT sent_if_expr PYC { $p = $sent_if_expr.p }) (ALT sent_loop_expr { $p = $sent_loop_expr.p }) (ALT sent_matchexpr { $p = $sent_matchexpr.p }))) (RULE sent_matchexpr (returns  interfaces.Expresion p ) (BLOCK (ALT MATCH expression LLAVEA matchexpr_listbrazos el_defaultexpr LLAVEC { 
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
        }) (ALT MATCH expression LLAVEA matchexpr_listbrazos LLAVEC {
        var a interfaces.Expresion
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, a, $MATCH.line,$MATCH.pos)
    }) (ALT MATCH expression LLAVEA el_defaultexpr LLAVEC {
        $p = matchexpr.NewMatch_Expr($expression.p, arrayList.New(), $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
    }))) (RULE matchexpr_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= brz matchexpr_listbrazos) list_brazosexpr {
        $brz.l.Add($list_brazosexpr.p)
        $l = $brz.l
    }) (ALT list_brazosexpr {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    }))) (RULE list_brazosexpr (returns  interfaces.Expresion p ) (BLOCK (ALT (= po expression) IGUAL MAYOR (= pi expression) COMA { 
        a := arrayList.New()
        a.Add($po.p)
        $p = matchexpr.NewBrazo_expr(a, $pi.p, $IGUAL.line , $IGUAL.pos)
     }) (ALT (= exp matchexpr_listbrazosexpr_listexpr) IGUAL MAYOR expression COMA { $p = matchexpr.NewBrazo_expr( $exp.l , $expression.p ,$IGUAL.line, $IGUAL.pos ) }))) (RULE matchexpr_listbrazosexpr_listexpr (returns   *arrayList.List l ) (BLOCK (ALT (= g match_listbrazos_listexpr) OR_MATCH expression {
        $g.l.Add($expression.p)
        $l = $g.l
    }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE el_defaultexpr (returns  interfaces.Expresion p ) (BLOCK (ALT DEFAUL IGUAL MAYOR expression COMA { $p = matchexpr.NewDefault_Expr($expression.p, $DEFAUL.line, $DEFAUL.pos) }))) (RULE tipo (returns  interfaces.TipoExpresion te) (BLOCK (ALT INT { $te = 0 }) (ALT FLOAT { $te = 1 }) (ALT STR { $te = 2 }) (ALT BOOLEAN { $te = 3}) (ALT CHAR { $te = 7 }) (ALT STRING { $te = 8 }) (ALT USIZE { $te = 13 }))) (RULE asignacion (returns  interfaces.Instruction instr ) (BLOCK (ALT ID IGUAL expression PYC { $instr = instruction.NewAsignacion($ID.text, $expression.p, "" ,$ID.line, $ID.pos) }) (ALT (= id1 ID) PNT (= id2 ID) IGUAL expression PYC { $instr = instruction.NewAsignacion($id1.text, $expression.p, $id2.text ,$ID.line, $ID.pos) }))) (RULE sent_if_expr (returns interfaces.Expresion p ) (BLOCK (ALT IF (= ini expression) LLAVEA (= exp1 expression) LLAVEC { 
        var a interfaces.Expresion
        $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p,a, $IF.line, $IF.pos   ) 
        }) (ALT IF (= ini expression) LLAVEA (= exp1 expression) LLAVEC ELSE LLAVEA (= exp2 expression) LLAVEC { $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p, $exp2.p, $IF.line, $IF.pos ) }) (ALT IF (= ini expression) LLAVEA (= exp1 expression) LLAVEC ELSE (= sent sent_if_expr) { $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p,$sent.p, $IF.line, $IF.pos   )  }))) (RULE sent_loop_expr (returns  interfaces.Expresion p ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $p = sentenciasexpr.NewLoop_expr($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE printaso (returns  interfaces.Instruction instr ) (BLOCK (ALT PRINT EXCLA PARA expression PARC { 
         a := arrayList.New()
        $instr = instruction.NewImprimir($expression.p, a, $PRINT.line, $PRINT.pos) 
        }) (ALT PRINT EXCLA PARA expression COMA (= li list_expre_print) PARC {  $instr = instruction.NewImprimir($expression.p, $li.l, $PRINT.line, $PRINT.pos)  }))) (RULE list_expre_print (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_print) COMA expression { 
        $li.l.Add($expression.p)  
        $l = $li.l
        }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }))) (RULE list_expre_vec_arr (returns  *arrayList.List l ) (BLOCK (ALT (= li list_expre_vec_arr) COMA expression_vec_Arr { 
        $li.l.Add($expression_vec_Arr.p)  
        $l = $li.l
        }) (ALT expression_vec_Arr {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    }))) (RULE sent_if (returns  interfaces.Instruction instr ) (BLOCK (ALT IF expression LLAVEA instrucciones LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $instrucciones.l, arrayList.New(), $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE LLAVEA (= ins2 instrucciones) LLAVEC { $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, $ins2.l, $IF.line,$IF.pos) }) (ALT IF expression LLAVEA (= ins1 instrucciones) LLAVEC ELSE (= sent sent_if) { 
        a := arrayList.New()
        a.Add($sent.instr)
        $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, a , $IF.line,$IF.pos) }))) (RULE sent_match (returns  interfaces.Instruction instr ) (BLOCK (ALT MATCH expression LLAVEA match_listbrazos el_default LLAVEC { $instr = match.NewMatch($expression.p, $match_listbrazos.l, $el_default.instr, $MATCH.line, $MATCH.pos) }) (ALT MATCH expression LLAVEA el_default LLAVEC {$instr = match.NewMatch($expression.p, arrayList.New(), $el_default.instr, $MATCH.line, $MATCH.pos)}))) (RULE match_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (= braz match_listbrazos) list_brazos { 
    $braz.l.Add($list_brazos.instr)
     $l = $braz.l
     }) (ALT list_brazos {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    }))) (RULE list_brazos (returns  interfaces.Instruction instr ) (BLOCK (ALT expression IGUAL MAYOR LLAVEA instrucciones LLAVEC { 
        a := arrayList.New()
        a.Add($expression.p)
        $instr = match.NewBrazo(a, $instrucciones.l, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewBrazo($exprs.l, $instrucciones.l, $IGUAL.line, $IGUAL.pos)  }) (ALT expression IGUAL MAYOR instruccion COMA {
        a := arrayList.New()
        a.Add($expression.p)
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo(a, b, $IGUAL.line, $IGUAL.pos) 
        }) (ALT (= exprs match_listbrazos_listexpr) IGUAL MAYOR instruccion COMA {
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo($exprs.l, b, $IGUAL.line, $IGUAL.pos)
        }))) (RULE match_listbrazos_listexpr (returns  *arrayList.List l ) (BLOCK (ALT (= h match_listbrazos_listexpr) OR_MATCH expression { 
        $h.l.Add($expression.p)
        $l = $h.l
     }) (ALT expression {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        }))) (RULE el_default (returns  interfaces.Instruction instr ) (BLOCK (ALT DEFAUL IGUAL MAYOR LLAVEA instrucciones LLAVEC { $instr = match.NewDefault($instrucciones.l , $DEFAUL.line, $DEFAUL.pos) }) (ALT DEFAUL IGUAL MAYOR instruccion COMA { 
        a := arrayList.New()
        a.Add($instruccion.instr)
        $instr = match.NewDefault(a , $DEFAUL.line, $DEFAUL.pos)  
        }))) (RULE sent_loop (returns  interfaces.Instruction instr ) (BLOCK (ALT LOOP LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewLoop($instrucciones.l,$LOOP.line,$LOOP.pos) }))) (RULE sent_while (returns  interfaces.Instruction instr ) (BLOCK (ALT WHILE expression LLAVEA instrucciones LLAVEC { $instr = sentenciaciclica.NewWhile($expression.p , $instrucciones.l , $WHILE.line, $WHILE.pos) }))) (RULE sent_ForIn (returns  interfaces.Instruction instr ) (BLOCK (ALT FOR ID IN (= exp1 expression) PNT PNT (= exp2 expression) LLAVEA instrucciones LLAVEC {
        var a interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, $exp1.p, $exp2.p,a, $instrucciones.l, $IN.line, $IN.pos )
    }) (ALT FOR ID IN (= exp expression_vec_Arr) LLAVEA instrucciones LLAVEC {
        var a,b interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, a,b, $exp.p , $instrucciones.l, $IN.line, $IN.pos )
    }))) (RULE expression_vec_Arr (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression_vec_Arr) COMA (= opDe expression_vec_Arr) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= opIz expression_vec_Arr) (= op MODUL) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (SET MUL DIV)) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= ope (SET SUM REST)) (= opDe expression_vec_Arr) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression_vec_Arr) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IGUALACION DIFERENCIACION)) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression_vec_Arr PARC { $p = $expression_vec_Arr.p}) (ALT (= opIz expression_vec_Arr) (= ope (SET AND OR)) (= opDe expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression_vec_Arr) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT CORCHA list_expre_vec_arr CORCHC { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        }) (ALT CORCHA (= exp1 expression_vec_Arr) PYC (= exp2 expression_vec_Arr) CORCHC { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT vector_expr { $p = $vector_expr.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE atributos_struct_exp (returns  *arrayList.List l ) (BLOCK (ALT (= li atributos_struct_exp) COMA (= asd atributos_struct_decl_exp) {
        $li.l.Add($asd.s)
        $l = $li.l
    }) (ALT atributos_struct_decl_exp {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    }))) (RULE atributos_struct_decl_exp (returns  interfaces.Symbol s ) (BLOCK (ALT ID DPTS (= exp2 expression) {$s = interfaces.Symbol{ Id: $ID.text, Valor: $exp2.p } }) (ALT ID DPTS (= exp expression_vec_Arr) {$s = interfaces.Symbol{ Id: $ID.text,  Valor:$exp.p }}))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT INT DPTS DPTS (= op POW) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT FLOAT DPTS DPTS (= op POWF) PARA (= opIz expression) COMA (= opDe expression) PARC {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= exp8 expression) PNT LEN PARA PARC { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }) (ALT (= opIz expression) (= op MODUL) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT (= opIz expression) (= ope (SET MUL DIV)) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= opIz expression) (= ope (SET SUM REST)) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= ope REST) (= opDe expression) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IGUALACION DIFERENCIACION)) (= opDe expression) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT PARA expression PARC { $p = $expression.p}) (ALT (= opIz expression) (= ope (SET AND OR)) (= opDe expression) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT (= op EXCLA) (= operador expression) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT ID PNT REMOVE PARA expression PARC { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) }) (ALT (= exp8 expression) PNT CONTAINS PARA PUNTERO expression PARC { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }) (ALT (= exp4 expression) PNT TOCHARS PARA PARC { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT (= exp4 expression) PNT TOSTRING PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }) (ALT (= exp4 expression) PNT TOOWNED PARA PARC { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }) (ALT (= exp5 expression) CASTEO tipo { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }) (ALT (= exp6 expression) PNT ABOSLU PARA PARC { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp7 expression) PNT RAIZITA PARA PARC { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT (= exp9 expression) PNT CLONATION PARA PARC { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }) (ALT ID LLAVEA (= li atributos_struct_exp) LLAVEC { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) }) (ALT llamadas_structs { $p =  $llamadas_structs.p }) (ALT llamada_expre { $p = $llamada_expre.p }) (ALT primitivo { $p = $primitivo.p }))) (RULE llamada_expre (returns interfaces.Expresion p) (BLOCK (ALT ID PARA PARC { $p = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) }) (ALT ID PARA (= li params_llamada) PARC { $p = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) }))) (RULE primitivo (returns  interfaces.Expresion p) (BLOCK (ALT NUMBER { 
            num, err:= strconv.Atoi($NUMBER.text)
            if err !=nil{ 
                fmt.Println(err)
            }   
            $p = expresion.NewPrimitivo (num, interfaces.INTEGER)
     }) (ALT FLOAT_NUM {
        num, err:= strconv.ParseFloat($FLOAT_NUM.text, 64)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.FLOAT)
    }) (ALT (= op (SET TRUE FALSE)) {
        num, err:= strconv.ParseBool($op.text)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)
    }) (ALT CADENA { 
        str:= $CADENA.text[1:len($CADENA.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.STR)
     }) (ALT CHAR_2 {
        str:= $CHAR_2.text[1:len($CHAR_2.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.CHAR)
    }) (ALT list_array { $p = $list_array.p }))) (RULE list_array (returns  interfaces.Expresion p ) (BLOCK (ALT (= li list_array) CORCHA expression CORCHC { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) }))) (RULE llamadas_structs (returns  interfaces.Expresion p ) (BLOCK (ALT (= li llamadas_structs) PNT (= id2 ID) { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }) (ALT ID {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })))))
2022-04-05 00:45:22:265 left-recursion LogManager.java:25 intructions_modulos returns [ *arrayList.List l ]
    :   ( {} instruct_modulos<tokenIndex=231>                     { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> instruct_modulos<tokenIndex=225> { 
                  $li.l.Add($instruct_modulos.instr)  
                  $l = $li.l
               }
        )*
    ;
2022-04-05 00:45:22:270 grammar LogManager.java:25 added: (RULE intructions_modulos (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (instruct_modulos (ELEMENT_OPTIONS (= tokenIndex 231))) { 
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (instruct_modulos (ELEMENT_OPTIONS (= tokenIndex 225))) { 
                  $li.l.Add($instruct_modulos.instr)  
                  $l = $li.l
               }))))))
2022-04-05 00:45:22:347 left-recursion LogManager.java:25 atributos_struct returns [ *arrayList.List l ]
    :   ( {} atributos_struct_decl<tokenIndex=327>  {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=317> asd=atributos_struct_decl<tokenIndex=321> {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }
        )*
    ;
2022-04-05 00:45:22:349 grammar LogManager.java:25 added: (RULE atributos_struct (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (atributos_struct_decl (ELEMENT_OPTIONS (= tokenIndex 327))) {
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 317))) (= asd (atributos_struct_decl (ELEMENT_OPTIONS (= tokenIndex 321)))) {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }))))))
2022-04-05 00:45:22:390 left-recursion LogManager.java:25 params_funcion returns [ *arrayList.List l ]
    :   ( {} params_funcion_decl<tokenIndex=662>      { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=654> params_funcion_decl<tokenIndex=656> {
                  $li.l.Add($params_funcion_decl.s)  
                  $l = $li.l
              }
        )*
    ;
2022-04-05 00:45:22:391 grammar LogManager.java:25 added: (RULE params_funcion (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (params_funcion_decl (ELEMENT_OPTIONS (= tokenIndex 662))) { 
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 654))) (params_funcion_decl (ELEMENT_OPTIONS (= tokenIndex 656))) {
                  $li.l.Add($params_funcion_decl.s)  
                  $l = $li.l
              }))))))
2022-04-05 00:45:22:427 left-recursion LogManager.java:25 params_llamada returns [ *arrayList.List l ]
    :   ( {} expression<tokenIndex=825> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        | PUNTERO<tokenIndex=831> MUT<tokenIndex=833> expression<tokenIndex=835> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=799> expression<tokenIndex=801> { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=813> PUNTERO<tokenIndex=815> MUT<tokenIndex=817> expression<tokenIndex=819> { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }
        )*
    ;
2022-04-05 00:45:22:428 grammar LogManager.java:25 added: (RULE params_llamada (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 825))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    }) (ALT (PUNTERO (ELEMENT_OPTIONS (= tokenIndex 831))) (MUT (ELEMENT_OPTIONS (= tokenIndex 833))) (expression (ELEMENT_OPTIONS (= tokenIndex 835))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 799))) (expression (ELEMENT_OPTIONS (= tokenIndex 801))) { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 813))) (PUNTERO (ELEMENT_OPTIONS (= tokenIndex 815))) (MUT (ELEMENT_OPTIONS (= tokenIndex 817))) (expression (ELEMENT_OPTIONS (= tokenIndex 819))) { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }))))))
2022-04-05 00:45:22:447 left-recursion LogManager.java:25 matchexpr_listbrazos returns [ *arrayList.List l ]
    :   ( {} list_brazosexpr<tokenIndex=1581> {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> list_brazosexpr<tokenIndex=1575> {
                  $brz.l.Add($list_brazosexpr.p)
                  $l = $brz.l
              }
        )*
    ;
2022-04-05 00:45:22:448 grammar LogManager.java:25 added: (RULE matchexpr_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (list_brazosexpr (ELEMENT_OPTIONS (= tokenIndex 1581))) {
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (list_brazosexpr (ELEMENT_OPTIONS (= tokenIndex 1575))) {
                  $brz.l.Add($list_brazosexpr.p)
                  $l = $brz.l
              }))))))
2022-04-05 00:45:22:473 left-recursion LogManager.java:25 list_expre_print returns [ *arrayList.List l ]
    :   ( {} expression<tokenIndex=1937> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1929> expression<tokenIndex=1931> { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }
        )*
    ;
2022-04-05 00:45:22:474 grammar LogManager.java:25 added: (RULE list_expre_print (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1937))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1929))) (expression (ELEMENT_OPTIONS (= tokenIndex 1931))) { 
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  }))))))
2022-04-05 00:45:22:497 left-recursion LogManager.java:25 list_expre_vec_arr returns [ *arrayList.List l ]
    :   ( {} expression_vec_Arr<tokenIndex=1964> {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1956> expression_vec_Arr<tokenIndex=1958> { 
                  $li.l.Add($expression_vec_Arr.p)  
                  $l = $li.l
                  }
        )*
    ;
2022-04-05 00:45:22:498 grammar LogManager.java:25 added: (RULE list_expre_vec_arr (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 1964))) {
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1956))) (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 1958))) { 
                  $li.l.Add($expression_vec_Arr.p)  
                  $l = $li.l
                  }))))))
2022-04-05 00:45:22:522 left-recursion LogManager.java:25 match_listbrazos returns [ *arrayList.List l ]
    :   ( {} list_brazos<tokenIndex=2095>                  {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> list_brazos<tokenIndex=2089> { 
              $braz.l.Add($list_brazos.instr)
               $l = $braz.l
               }
        )*
    ;
2022-04-05 00:45:22:523 grammar LogManager.java:25 added: (RULE match_listbrazos (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (list_brazos (ELEMENT_OPTIONS (= tokenIndex 2095))) {
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (list_brazos (ELEMENT_OPTIONS (= tokenIndex 2089))) { 
              $braz.l.Add($list_brazos.instr)
               $l = $braz.l
               }))))))
2022-04-05 00:45:22:542 left-recursion LogManager.java:25 match_listbrazos_listexpr returns [ *arrayList.List l ]
    :   ( {} expression<tokenIndex=2192> {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> OR_MATCH<tokenIndex=2184> expression<tokenIndex=2186>  { 
                  $h.l.Add($expression.p)
                  $l = $h.l
               }
        )*
    ;
2022-04-05 00:45:22:543 grammar LogManager.java:25 added: (RULE match_listbrazos_listexpr (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 2192))) {
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (OR_MATCH (ELEMENT_OPTIONS (= tokenIndex 2184))) (expression (ELEMENT_OPTIONS (= tokenIndex 2186))) { 
                  $h.l.Add($expression.p)
                  $l = $h.l
               }))))))
2022-04-05 00:45:22:559 left-recursion LogManager.java:25 expression_vec_Arr returns [interfaces.Expresion p]
    :   ( {} INT<tokenIndex=2339> DPTS<tokenIndex=2341> DPTS<tokenIndex=2343> op=POW<tokenIndex=2347> PARA<tokenIndex=2349> opIz=expression_vec_Arr<tokenIndex=2353> COMA<tokenIndex=2355> opDe=expression_vec_Arr<tokenIndex=2359> PARC<tokenIndex=2361> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)} 
        | FLOAT<tokenIndex=2367> DPTS<tokenIndex=2369> DPTS<tokenIndex=2371> op=POWF<tokenIndex=2375> PARA<tokenIndex=2377> opIz=expression_vec_Arr<tokenIndex=2381> COMA<tokenIndex=2383> opDe=expression_vec_Arr<tokenIndex=2387> PARC<tokenIndex=2389> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)} 
        | PARA<tokenIndex=2495> expression_vec_Arr<tokenIndex=2497> PARC<tokenIndex=2499> { $p = $expression_vec_Arr.p} 
        | op=EXCLA<tokenIndex=2531> operador = expression_vec_Arr<tokenIndex=2537,p=6> {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)} 
        | CORCHA<tokenIndex=2545> list_expre_vec_arr<tokenIndex=2547> CORCHC<tokenIndex=2549> { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        } 
        | CORCHA<tokenIndex=2555> exp1=expression_vec_Arr<tokenIndex=2559> PYC<tokenIndex=2561> exp2=expression_vec_Arr<tokenIndex=2565> CORCHC<tokenIndex=2567> { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) } 
        | exp4=expression<tokenIndex=2577> PNT<tokenIndex=2579> TOCHARS<tokenIndex=2581> PARA<tokenIndex=2583> PARC<tokenIndex=2585> { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) } 
        | vector_expr<tokenIndex=2591> { $p = $vector_expr.p } 
        | primitivo<tokenIndex=2597> { $p = $primitivo.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=MODUL<tokenIndex=2403> opDe = expression_vec_Arr<tokenIndex=2409,p=13> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> ope=(MUL<tokenIndex=2424>|DIV<tokenIndex=2426>) opDe = expression_vec_Arr<tokenIndex=2433,p=12> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> ope=(SUM<tokenIndex=2448>|REST<tokenIndex=2450>) opDe = expression_vec_Arr<tokenIndex=2457,p=11> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(MENOR<tokenIndex=2472>|MENORIGUAL<tokenIndex=2474>|MAYORIGUAL<tokenIndex=2476>|MAYOR<tokenIndex=2478>|IGUALACION<tokenIndex=2480>|DIFERENCIACION<tokenIndex=2482>) opDe = expression_vec_Arr<tokenIndex=2489,p=10> {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> ope=(AND<tokenIndex=2514>|OR<tokenIndex=2516>) opDe = expression_vec_Arr<tokenIndex=2523,p=8> {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
        )*
    ;
2022-04-05 00:45:22:568 grammar LogManager.java:25 added: (RULE expression_vec_Arr (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 2339))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2341))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2343))) (= op (POW (ELEMENT_OPTIONS (= tokenIndex 2347)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2349))) (= opIz (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2353)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2355))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2359)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2361))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 2367))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2369))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2371))) (= op (POWF (ELEMENT_OPTIONS (= tokenIndex 2375)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2377))) (= opIz (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2381)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2383))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2387)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2389))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 2495))) (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2497))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2499))) { $p = $expression_vec_Arr.p}) (ALT (= op (EXCLA (ELEMENT_OPTIONS (= tokenIndex 2531)))) (= operador (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2537) (= p 6)))) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT (CORCHA (ELEMENT_OPTIONS (= tokenIndex 2545))) (list_expre_vec_arr (ELEMENT_OPTIONS (= tokenIndex 2547))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 2549))) { 
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        }) (ALT (CORCHA (ELEMENT_OPTIONS (= tokenIndex 2555))) (= exp1 (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2559)))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2561))) (= exp2 (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2565)))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 2567))) { $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) }) (ALT (= exp4 (expression (ELEMENT_OPTIONS (= tokenIndex 2577)))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2579))) (TOCHARS (ELEMENT_OPTIONS (= tokenIndex 2581))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2583))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2585))) { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT (vector_expr (ELEMENT_OPTIONS (= tokenIndex 2591))) { $p = $vector_expr.p }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 2597))) { $p = $primitivo.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (MODUL (ELEMENT_OPTIONS (= tokenIndex 2403)))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2409) (= p 13)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= ope (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2424))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2426))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2433) (= p 12)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= ope (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 2448))) (REST (ELEMENT_OPTIONS (= tokenIndex 2450))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2457) (= p 11)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2472))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2474))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2476))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2478))) (IGUALACION (ELEMENT_OPTIONS (= tokenIndex 2480))) (DIFERENCIACION (ELEMENT_OPTIONS (= tokenIndex 2482))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2489) (= p 10)))) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= ope (SET (AND (ELEMENT_OPTIONS (= tokenIndex 2514))) (OR (ELEMENT_OPTIONS (= tokenIndex 2516))))) (= opDe (expression_vec_Arr (ELEMENT_OPTIONS (= tokenIndex 2523) (= p 8)))) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}))))))
2022-04-05 00:45:22:588 left-recursion LogManager.java:25 atributos_struct_exp returns [ *arrayList.List l ]
    :   ( {} atributos_struct_decl_exp<tokenIndex=2625>  {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2615> asd=atributos_struct_decl_exp<tokenIndex=2619> {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }
        )*
    ;
2022-04-05 00:45:22:590 grammar LogManager.java:25 added: (RULE atributos_struct_exp (returns  *arrayList.List l ) (BLOCK (ALT (BLOCK (ALT {} (atributos_struct_decl_exp (ELEMENT_OPTIONS (= tokenIndex 2625))) {
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2615))) (= asd (atributos_struct_decl_exp (ELEMENT_OPTIONS (= tokenIndex 2619)))) {
                  $li.l.Add($asd.s)
                  $l = $li.l
              }))))))
2022-04-05 00:45:22:616 left-recursion LogManager.java:25 expression returns [interfaces.Expresion p]
    :   ( {} INT<tokenIndex=2668> DPTS<tokenIndex=2670> DPTS<tokenIndex=2672> op=POW<tokenIndex=2676> PARA<tokenIndex=2678> opIz=expression<tokenIndex=2682> COMA<tokenIndex=2684> opDe=expression<tokenIndex=2688> PARC<tokenIndex=2690> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)} 
        | FLOAT<tokenIndex=2696> DPTS<tokenIndex=2698> DPTS<tokenIndex=2700> op=POWF<tokenIndex=2704> PARA<tokenIndex=2706> opIz=expression<tokenIndex=2710> COMA<tokenIndex=2712> opDe=expression<tokenIndex=2716> PARC<tokenIndex=2718> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)} 
        | ope=REST<tokenIndex=2811> opDe = expression<tokenIndex=2817,p=19> {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)} 
        | PARA<tokenIndex=2823> expression<tokenIndex=2825> PARC<tokenIndex=2827> { $p = $expression.p} 
        | PARA<tokenIndex=2865> expression<tokenIndex=2867> PARC<tokenIndex=2869> { $p = $expression.p} 
        | op=EXCLA<tokenIndex=2901> operador = expression<tokenIndex=2907,p=14> {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)} 
        | ID<tokenIndex=2913> PNT<tokenIndex=2915> REMOVE<tokenIndex=2917> PARA<tokenIndex=2919> expression<tokenIndex=2921> PARC<tokenIndex=2923> { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) } 
        | ID<tokenIndex=3058> LLAVEA<tokenIndex=3060> li=atributos_struct_exp<tokenIndex=3064> LLAVEC<tokenIndex=3066> { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) } 
        | llamadas_structs<tokenIndex=3072> { $p =  $llamadas_structs.p } 
        | llamada_expre<tokenIndex=3078> { $p = $llamada_expre.p } 
        | primitivo<tokenIndex=3084> { $p = $primitivo.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=MODUL<tokenIndex=2749> opDe = expression<tokenIndex=2755,p=23> {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> ope=(MUL<tokenIndex=2770>|DIV<tokenIndex=2772>) opDe = expression<tokenIndex=2779,p=22> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> ope=(SUM<tokenIndex=2794>|REST<tokenIndex=2796>) opDe = expression<tokenIndex=2803,p=21> {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MENOR<tokenIndex=2842>|MENORIGUAL<tokenIndex=2844>|MAYORIGUAL<tokenIndex=2846>|MAYOR<tokenIndex=2848>|IGUALACION<tokenIndex=2850>|DIFERENCIACION<tokenIndex=2852>) opDe = expression<tokenIndex=2859,p=18> {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> ope=(AND<tokenIndex=2884>|OR<tokenIndex=2886>) opDe = expression<tokenIndex=2893,p=16> {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> PNT<tokenIndex=2729> LEN<tokenIndex=2731> PARA<tokenIndex=2733> PARC<tokenIndex=2735> { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> PNT<tokenIndex=2934> CONTAINS<tokenIndex=2936> PARA<tokenIndex=2938> PUNTERO<tokenIndex=2940> expression<tokenIndex=2942> PARC<tokenIndex=2944> { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> PNT<tokenIndex=2954> TOCHARS<tokenIndex=2956> PARA<tokenIndex=2958> PARC<tokenIndex=2960> { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> PNT<tokenIndex=2970> TOSTRING<tokenIndex=2972> PARA<tokenIndex=2974> PARC<tokenIndex=2976> { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> PNT<tokenIndex=2986> TOOWNED<tokenIndex=2988> PARA<tokenIndex=2990> PARC<tokenIndex=2992> { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> CASTEO<tokenIndex=3002> tipo<tokenIndex=3004> { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PNT<tokenIndex=3014> ABOSLU<tokenIndex=3016> PARA<tokenIndex=3018> PARC<tokenIndex=3020> { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> PNT<tokenIndex=3030> RAIZITA<tokenIndex=3032> PARA<tokenIndex=3034> PARC<tokenIndex=3036> { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> PNT<tokenIndex=3046> CLONATION<tokenIndex=3048> PARA<tokenIndex=3050> PARC<tokenIndex=3052> { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }
        )*
    ;
2022-04-05 00:45:22:631 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 2668))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2670))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2672))) (= op (POW (ELEMENT_OPTIONS (= tokenIndex 2676)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2678))) (= opIz (expression (ELEMENT_OPTIONS (= tokenIndex 2682)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2684))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2688)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2690))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)}) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 2696))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2698))) (DPTS (ELEMENT_OPTIONS (= tokenIndex 2700))) (= op (POWF (ELEMENT_OPTIONS (= tokenIndex 2704)))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2706))) (= opIz (expression (ELEMENT_OPTIONS (= tokenIndex 2710)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2712))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2716)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2718))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)}) (ALT (= ope (REST (ELEMENT_OPTIONS (= tokenIndex 2811)))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2817) (= p 19)))) {$p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)}) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 2823))) (expression (ELEMENT_OPTIONS (= tokenIndex 2825))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2827))) { $p = $expression.p}) (ALT (PARA (ELEMENT_OPTIONS (= tokenIndex 2865))) (expression (ELEMENT_OPTIONS (= tokenIndex 2867))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2869))) { $p = $expression.p}) (ALT (= op (EXCLA (ELEMENT_OPTIONS (= tokenIndex 2901)))) (= operador (expression (ELEMENT_OPTIONS (= tokenIndex 2907) (= p 14)))) {$p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2913))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2915))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2917))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2919))) (expression (ELEMENT_OPTIONS (= tokenIndex 2921))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2923))) { $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 3058))) (LLAVEA (ELEMENT_OPTIONS (= tokenIndex 3060))) (= li (atributos_struct_exp (ELEMENT_OPTIONS (= tokenIndex 3064)))) (LLAVEC (ELEMENT_OPTIONS (= tokenIndex 3066))) { $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) }) (ALT (llamadas_structs (ELEMENT_OPTIONS (= tokenIndex 3072))) { $p =  $llamadas_structs.p }) (ALT (llamada_expre (ELEMENT_OPTIONS (= tokenIndex 3078))) { $p = $llamada_expre.p }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 3084))) { $p = $primitivo.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (MODUL (ELEMENT_OPTIONS (= tokenIndex 2749)))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2755) (= p 23)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= ope (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2770))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2772))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2779) (= p 22)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= ope (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 2794))) (REST (ELEMENT_OPTIONS (= tokenIndex 2796))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2803) (= p 21)))) {$p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2842))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2844))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2846))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2848))) (IGUALACION (ELEMENT_OPTIONS (= tokenIndex 2850))) (DIFERENCIACION (ELEMENT_OPTIONS (= tokenIndex 2852))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2859) (= p 18)))) {$p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= ope (SET (AND (ELEMENT_OPTIONS (= tokenIndex 2884))) (OR (ELEMENT_OPTIONS (= tokenIndex 2886))))) (= opDe (expression (ELEMENT_OPTIONS (= tokenIndex 2893) (= p 16)))) {$p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2729))) (LEN (ELEMENT_OPTIONS (= tokenIndex 2731))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2733))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2735))) { $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2934))) (CONTAINS (ELEMENT_OPTIONS (= tokenIndex 2936))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2938))) (PUNTERO (ELEMENT_OPTIONS (= tokenIndex 2940))) (expression (ELEMENT_OPTIONS (= tokenIndex 2942))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2944))) { $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2954))) (TOCHARS (ELEMENT_OPTIONS (= tokenIndex 2956))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2958))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2960))) { $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2970))) (TOSTRING (ELEMENT_OPTIONS (= tokenIndex 2972))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2974))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2976))) { $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (PNT (ELEMENT_OPTIONS (= tokenIndex 2986))) (TOOWNED (ELEMENT_OPTIONS (= tokenIndex 2988))) (PARA (ELEMENT_OPTIONS (= tokenIndex 2990))) (PARC (ELEMENT_OPTIONS (= tokenIndex 2992))) { $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (CASTEO (ELEMENT_OPTIONS (= tokenIndex 3002))) (tipo (ELEMENT_OPTIONS (= tokenIndex 3004))) { $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3014))) (ABOSLU (ELEMENT_OPTIONS (= tokenIndex 3016))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3018))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3020))) { $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3030))) (RAIZITA (ELEMENT_OPTIONS (= tokenIndex 3032))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3034))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3036))) { $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3046))) (CLONATION (ELEMENT_OPTIONS (= tokenIndex 3048))) (PARA (ELEMENT_OPTIONS (= tokenIndex 3050))) (PARC (ELEMENT_OPTIONS (= tokenIndex 3052))) { $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) }))))))
2022-04-05 00:45:22:649 left-recursion LogManager.java:25 list_array returns [ interfaces.Expresion p ]
    :   ( {} ID<tokenIndex=3193> {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORCHA<tokenIndex=3183> expression<tokenIndex=3185> CORCHC<tokenIndex=3187> { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }
        )*
    ;
2022-04-05 00:45:22:650 grammar LogManager.java:25 added: (RULE list_array (returns  interfaces.Expresion p ) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 3193))) {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORCHA (ELEMENT_OPTIONS (= tokenIndex 3183))) (expression (ELEMENT_OPTIONS (= tokenIndex 3185))) (CORCHC (ELEMENT_OPTIONS (= tokenIndex 3187))) { $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) }))))))
2022-04-05 00:45:22:669 left-recursion LogManager.java:25 llamadas_structs returns [ interfaces.Expresion p ]
    :   ( {} ID<tokenIndex=3223>  {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PNT<tokenIndex=3213> id2=ID<tokenIndex=3217> { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }
        )*
    ;
2022-04-05 00:45:22:670 grammar LogManager.java:25 added: (RULE llamadas_structs (returns  interfaces.Expresion p ) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 3223))) {  $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PNT (ELEMENT_OPTIONS (= tokenIndex 3213))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 3217)))) { $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) }))))))
2022-04-05 00:45:22:711 grammar LogManager.java:25 import NUMBER=1
2022-04-05 00:45:22:711 grammar LogManager.java:25 import FLOAT_NUM=2
2022-04-05 00:45:22:711 grammar LogManager.java:25 import CHAR_2=3
2022-04-05 00:45:22:711 grammar LogManager.java:25 import CADENA=4
2022-04-05 00:45:22:711 grammar LogManager.java:25 import CMT=5
2022-04-05 00:45:22:711 grammar LogManager.java:25 import EXCLA=6
2022-04-05 00:45:22:711 grammar LogManager.java:25 import PARA=7
2022-04-05 00:45:22:711 grammar LogManager.java:25 import PARC=8
2022-04-05 00:45:22:711 grammar LogManager.java:25 import LLAVEA=9
2022-04-05 00:45:22:712 grammar LogManager.java:25 import LLAVEC=10
2022-04-05 00:45:22:712 grammar LogManager.java:25 import CORCHA=11
2022-04-05 00:45:22:712 grammar LogManager.java:25 import CORCHC=12
2022-04-05 00:45:22:712 grammar LogManager.java:25 import PYC=13
2022-04-05 00:45:22:712 grammar LogManager.java:25 import DPTS=14
2022-04-05 00:45:22:712 grammar LogManager.java:25 import COMA=15
2022-04-05 00:45:22:712 grammar LogManager.java:25 import DEFAUL=16
2022-04-05 00:45:22:712 grammar LogManager.java:25 import OR_MATCH=17
2022-04-05 00:45:22:712 grammar LogManager.java:25 import PNT=18
2022-04-05 00:45:22:712 grammar LogManager.java:25 import PUNTERO=19
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MUL=20
2022-04-05 00:45:22:712 grammar LogManager.java:25 import SUM=21
2022-04-05 00:45:22:712 grammar LogManager.java:25 import DIV=22
2022-04-05 00:45:22:712 grammar LogManager.java:25 import REST=23
2022-04-05 00:45:22:712 grammar LogManager.java:25 import POW=24
2022-04-05 00:45:22:712 grammar LogManager.java:25 import POWF=25
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MODUL=26
2022-04-05 00:45:22:712 grammar LogManager.java:25 import DIFERENCIACION=27
2022-04-05 00:45:22:712 grammar LogManager.java:25 import IGUALACION=28
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MAYORIGUAL=29
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MENORIGUAL=30
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MAYOR=31
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MENOR=32
2022-04-05 00:45:22:712 grammar LogManager.java:25 import IGUAL=33
2022-04-05 00:45:22:712 grammar LogManager.java:25 import AND=34
2022-04-05 00:45:22:712 grammar LogManager.java:25 import OR=35
2022-04-05 00:45:22:712 grammar LogManager.java:25 import TRUE=36
2022-04-05 00:45:22:712 grammar LogManager.java:25 import FALSE=37
2022-04-05 00:45:22:712 grammar LogManager.java:25 import INT=38
2022-04-05 00:45:22:712 grammar LogManager.java:25 import FLOAT=39
2022-04-05 00:45:22:712 grammar LogManager.java:25 import BOOLEAN=40
2022-04-05 00:45:22:712 grammar LogManager.java:25 import CHAR=41
2022-04-05 00:45:22:712 grammar LogManager.java:25 import STR=42
2022-04-05 00:45:22:712 grammar LogManager.java:25 import STRING=43
2022-04-05 00:45:22:712 grammar LogManager.java:25 import USIZE=44
2022-04-05 00:45:22:712 grammar LogManager.java:25 import PRINT=45
2022-04-05 00:45:22:712 grammar LogManager.java:25 import LET=46
2022-04-05 00:45:22:712 grammar LogManager.java:25 import MUT=47
2022-04-05 00:45:22:712 grammar LogManager.java:25 import IF=48
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ELSE=49
2022-04-05 00:45:22:713 grammar LogManager.java:25 import LOOP=50
2022-04-05 00:45:22:713 grammar LogManager.java:25 import WHILE=51
2022-04-05 00:45:22:713 grammar LogManager.java:25 import MATCH=52
2022-04-05 00:45:22:713 grammar LogManager.java:25 import FOR=53
2022-04-05 00:45:22:713 grammar LogManager.java:25 import IN=54
2022-04-05 00:45:22:713 grammar LogManager.java:25 import BRE=55
2022-04-05 00:45:22:713 grammar LogManager.java:25 import STRUCT=56
2022-04-05 00:45:22:713 grammar LogManager.java:25 import VEC=57
2022-04-05 00:45:22:713 grammar LogManager.java:25 import NEWI=58
2022-04-05 00:45:22:713 grammar LogManager.java:25 import WITH_CAP=59
2022-04-05 00:45:22:713 grammar LogManager.java:25 import PUSH=60
2022-04-05 00:45:22:713 grammar LogManager.java:25 import INSERT=61
2022-04-05 00:45:22:713 grammar LogManager.java:25 import REMOVE=62
2022-04-05 00:45:22:713 grammar LogManager.java:25 import CONTAINS=63
2022-04-05 00:45:22:713 grammar LogManager.java:25 import LEN=64
2022-04-05 00:45:22:713 grammar LogManager.java:25 import TOCHARS=65
2022-04-05 00:45:22:713 grammar LogManager.java:25 import TOSTRING=66
2022-04-05 00:45:22:713 grammar LogManager.java:25 import TOOWNED=67
2022-04-05 00:45:22:713 grammar LogManager.java:25 import CASTEO=68
2022-04-05 00:45:22:713 grammar LogManager.java:25 import CONTINIU=69
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ABOSLU=70
2022-04-05 00:45:22:713 grammar LogManager.java:25 import RAIZITA=71
2022-04-05 00:45:22:713 grammar LogManager.java:25 import CLONATION=72
2022-04-05 00:45:22:713 grammar LogManager.java:25 import FUNCT=73
2022-04-05 00:45:22:713 grammar LogManager.java:25 import RETURNASO=74
2022-04-05 00:45:22:713 grammar LogManager.java:25 import PUBLI=75
2022-04-05 00:45:22:713 grammar LogManager.java:25 import MODULO=76
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ID=77
2022-04-05 00:45:22:713 grammar LogManager.java:25 import WS=78
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '!'=6
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '('=7
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ')'=8
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '{'=9
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '}'=10
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '['=11
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ']'=12
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ';'=13
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ':'=14
2022-04-05 00:45:22:713 grammar LogManager.java:25 import ','=15
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '_'=16
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '|'=17
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '.'=18
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '&'=19
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '*'=20
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '+'=21
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '/'=22
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '-'=23
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'pow'=24
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'powf'=25
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '%'=26
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '!='=27
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '=='=28
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '>='=29
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '<='=30
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '>'=31
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '<'=32
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '='=33
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '&&'=34
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '||'=35
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'true'=36
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'false'=37
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'i64'=38
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'f64'=39
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'bool'=40
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'char'=41
2022-04-05 00:45:22:713 grammar LogManager.java:25 import '&str'=42
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'String'=43
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'usize'=44
2022-04-05 00:45:22:713 grammar LogManager.java:25 import 'println'=45
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'let'=46
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'mut'=47
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'if'=48
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'else'=49
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'loop'=50
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'while'=51
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'match'=52
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'for'=53
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'in'=54
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'break'=55
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'struct'=56
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'new'=58
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'with_capacity'=59
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'push'=60
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'insert'=61
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'remove'=62
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'contains'=63
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'len'=64
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'chars'=65
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'to_string'=66
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'to_owned'=67
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'as'=68
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'continue'=69
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'abs'=70
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'sqrt'=71
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'clone'=72
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'fn'=73
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'return'=74
2022-04-05 00:45:22:714 grammar LogManager.java:25 import 'pub'=75
2022-04-05 00:45:22:715 grammar LogManager.java:25 import 'mod'=76
2022-04-05 00:45:22:715 grammar LogManager.java:25 tokens={NUMBER=1, FLOAT_NUM=2, CHAR_2=3, CADENA=4, CMT=5, EXCLA=6, PARA=7, PARC=8, LLAVEA=9, LLAVEC=10, CORCHA=11, CORCHC=12, PYC=13, DPTS=14, COMA=15, DEFAUL=16, OR_MATCH=17, PNT=18, PUNTERO=19, MUL=20, SUM=21, DIV=22, REST=23, POW=24, POWF=25, MODUL=26, DIFERENCIACION=27, IGUALACION=28, MAYORIGUAL=29, MENORIGUAL=30, MAYOR=31, MENOR=32, IGUAL=33, AND=34, OR=35, TRUE=36, FALSE=37, INT=38, FLOAT=39, BOOLEAN=40, CHAR=41, STR=42, STRING=43, USIZE=44, PRINT=45, LET=46, MUT=47, IF=48, ELSE=49, LOOP=50, WHILE=51, MATCH=52, FOR=53, IN=54, BRE=55, STRUCT=56, VEC=57, NEWI=58, WITH_CAP=59, PUSH=60, INSERT=61, REMOVE=62, CONTAINS=63, LEN=64, TOCHARS=65, TOSTRING=66, TOOWNED=67, CASTEO=68, CONTINIU=69, ABOSLU=70, RAIZITA=71, CLONATION=72, FUNCT=73, RETURNASO=74, PUBLI=75, MODULO=76, ID=77, WS=78, '!'=6, '('=7, ')'=8, '{'=9, '}'=10, '['=11, ']'=12, ';'=13, ':'=14, ','=15, '_'=16, '|'=17, '.'=18, '&'=19, '*'=20, '+'=21, '/'=22, '-'=23, 'pow'=24, 'powf'=25, '%'=26, '!='=27, '=='=28, '>='=29, '<='=30, '>'=31, '<'=32, '='=33, '&&'=34, '||'=35, 'true'=36, 'false'=37, 'i64'=38, 'f64'=39, 'bool'=40, 'char'=41, '&str'=42, 'String'=43, 'usize'=44, 'println'=45, 'let'=46, 'mut'=47, 'if'=48, 'else'=49, 'loop'=50, 'while'=51, 'match'=52, 'for'=53, 'in'=54, 'break'=55, 'struct'=56, 'new'=58, 'with_capacity'=59, 'push'=60, 'insert'=61, 'remove'=62, 'contains'=63, 'len'=64, 'chars'=65, 'to_string'=66, 'to_owned'=67, 'as'=68, 'continue'=69, 'abs'=70, 'sqrt'=71, 'clone'=72, 'fn'=73, 'return'=74, 'pub'=75, 'mod'=76}
2022-04-05 00:45:22:716 semantics LogManager.java:25 tokens={EOF=-1, NUMBER=1, FLOAT_NUM=2, CHAR_2=3, CADENA=4, CMT=5, EXCLA=6, PARA=7, PARC=8, LLAVEA=9, LLAVEC=10, CORCHA=11, CORCHC=12, PYC=13, DPTS=14, COMA=15, DEFAUL=16, OR_MATCH=17, PNT=18, PUNTERO=19, MUL=20, SUM=21, DIV=22, REST=23, POW=24, POWF=25, MODUL=26, DIFERENCIACION=27, IGUALACION=28, MAYORIGUAL=29, MENORIGUAL=30, MAYOR=31, MENOR=32, IGUAL=33, AND=34, OR=35, TRUE=36, FALSE=37, INT=38, FLOAT=39, BOOLEAN=40, CHAR=41, STR=42, STRING=43, USIZE=44, PRINT=45, LET=46, MUT=47, IF=48, ELSE=49, LOOP=50, WHILE=51, MATCH=52, FOR=53, IN=54, BRE=55, STRUCT=56, VEC=57, NEWI=58, WITH_CAP=59, PUSH=60, INSERT=61, REMOVE=62, CONTAINS=63, LEN=64, TOCHARS=65, TOSTRING=66, TOOWNED=67, CASTEO=68, CONTINIU=69, ABOSLU=70, RAIZITA=71, CLONATION=72, FUNCT=73, RETURNASO=74, PUBLI=75, MODULO=76, ID=77, WS=78}
2022-04-05 00:45:22:716 semantics LogManager.java:25 strings={'!'=6, '('=7, ')'=8, '{'=9, '}'=10, '['=11, ']'=12, ';'=13, ':'=14, ','=15, '_'=16, '|'=17, '.'=18, '&'=19, '*'=20, '+'=21, '/'=22, '-'=23, 'pow'=24, 'powf'=25, '%'=26, '!='=27, '=='=28, '>='=29, '<='=30, '>'=31, '<'=32, '='=33, '&&'=34, '||'=35, 'true'=36, 'false'=37, 'i64'=38, 'f64'=39, 'bool'=40, 'char'=41, '&str'=42, 'String'=43, 'usize'=44, 'println'=45, 'let'=46, 'mut'=47, 'if'=48, 'else'=49, 'loop'=50, 'while'=51, 'match'=52, 'for'=53, 'in'=54, 'break'=55, 'struct'=56, 'new'=58, 'with_capacity'=59, 'push'=60, 'insert'=61, 'remove'=62, 'contains'=63, 'len'=64, 'chars'=65, 'to_string'=66, 'to_owned'=67, 'as'=68, 'continue'=69, 'abs'=70, 'sqrt'=71, 'clone'=72, 'fn'=73, 'return'=74, 'pub'=75, 'mod'=76}
2022-04-05 00:45:22:806 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-04-05 00:45:22:808 LL1 LogManager.java:25 look=[{45..46, 48, 50..53, 55..56, 69, 73..77}, {<EOF>, 10}]
2022-04-05 00:45:22:808 LL1 LogManager.java:25 LL(1)? true
2022-04-05 00:45:22:809 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-04-05 00:45:22:810 LL1 LogManager.java:25 look=[45, 45, 46, 46, 46, 77, 48, 50, 51, 52, 77, 53, {55, 69, 74}, 73, 77, 56, {75..76}]
2022-04-05 00:45:22:810 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:810 LL1 LogManager.java:25 
DECISION 2 in rule sent_Modulos
2022-04-05 00:45:22:810 LL1 LogManager.java:25 look=[75, 76]
2022-04-05 00:45:22:810 LL1 LogManager.java:25 LL(1)? true
2022-04-05 00:45:22:810 LL1 LogManager.java:25 
DECISION 3 in rule intructions_modulos
2022-04-05 00:45:22:810 LL1 LogManager.java:25 look=[null, 10]
2022-04-05 00:45:22:811 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:811 LL1 LogManager.java:25 
DECISION 4 in rule instruct_modulos
2022-04-05 00:45:22:811 LL1 LogManager.java:25 look=[{75..76}, 75, 73, 75, 56]
2022-04-05 00:45:22:811 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:811 LL1 LogManager.java:25 
DECISION 5 in rule atributos_struct
2022-04-05 00:45:22:811 LL1 LogManager.java:25 look=[null, 10]
2022-04-05 00:45:22:811 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:811 LL1 LogManager.java:25 
DECISION 6 in rule atributos_struct_decl
2022-04-05 00:45:22:811 LL1 LogManager.java:25 look=[77, 77, 77, 77]
2022-04-05 00:45:22:811 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:811 LL1 LogManager.java:25 
DECISION 7 in rule sent_funcion
2022-04-05 00:45:22:811 LL1 LogManager.java:25 look=[73, 73, 73, 73, 73, 73, 73, 73, 73, 73]
2022-04-05 00:45:22:812 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:812 LL1 LogManager.java:25 
DECISION 8 in rule params_funcion
2022-04-05 00:45:22:812 LL1 LogManager.java:25 look=[null, 8]
2022-04-05 00:45:22:812 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:812 LL1 LogManager.java:25 
DECISION 9 in rule params_funcion_decl
2022-04-05 00:45:22:812 LL1 LogManager.java:25 look=[77, 77, 77, 77, 77, 77]
2022-04-05 00:45:22:812 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:812 LL1 LogManager.java:25 
DECISION 10 in rule sent_Llamada
2022-04-05 00:45:22:812 LL1 LogManager.java:25 look=[77, 77]
2022-04-05 00:45:22:812 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:812 LL1 LogManager.java:25 
DECISION 11 in rule params_llamada
2022-04-05 00:45:22:812 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 77}, 19]
2022-04-05 00:45:22:812 LL1 LogManager.java:25 LL(1)? true
2022-04-05 00:45:22:812 LL1 LogManager.java:25 
DECISION 12 in rule params_llamada
2022-04-05 00:45:22:812 LL1 LogManager.java:25 look=[null, null]
2022-04-05 00:45:22:812 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:812 LL1 LogManager.java:25 
DECISION 13 in rule params_llamada
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[null, 8]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 14 in rule funciones_Trans
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[55, 55, 69, 74, 74, 74]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 15 in rule declaracion
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[46, 46, 46, 46, 46, 46, 46, 46]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 16 in rule array_decl
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[46, 46, 46, 46]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 17 in rule array_decl_array
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[11, 11]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 18 in rule vector_decl
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[46, 46, 46, 46, 46, 46]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 19 in rule vector_expr
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[57, 57, 57, 57]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 20 in rule sent_funciones_Vec
2022-04-05 00:45:22:813 LL1 LogManager.java:25 look=[77, 77, 77]
2022-04-05 00:45:22:813 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:813 LL1 LogManager.java:25 
DECISION 21 in rule sentencias_expr
2022-04-05 00:45:22:814 LL1 LogManager.java:25 look=[48, 50, 52]
2022-04-05 00:45:22:814 LL1 LogManager.java:25 LL(1)? true
2022-04-05 00:45:22:814 LL1 LogManager.java:25 
DECISION 22 in rule sent_matchexpr
2022-04-05 00:45:22:814 LL1 LogManager.java:25 look=[52, 52, 52]
2022-04-05 00:45:22:814 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:814 LL1 LogManager.java:25 
DECISION 23 in rule matchexpr_listbrazos
2022-04-05 00:45:22:814 LL1 LogManager.java:25 look=[null, {10, 16}]
2022-04-05 00:45:22:814 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:814 LL1 LogManager.java:25 
DECISION 24 in rule list_brazosexpr
2022-04-05 00:45:22:815 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 77}, {1..4, 6..7, 23, 36..39, 77}]
2022-04-05 00:45:22:815 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:815 LL1 LogManager.java:25 
DECISION 25 in rule matchexpr_listbrazosexpr_listexpr
2022-04-05 00:45:22:815 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 77}, {1..4, 6..7, 23, 36..39, 77}]
2022-04-05 00:45:22:815 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:815 LL1 LogManager.java:25 
DECISION 26 in rule tipo
2022-04-05 00:45:22:815 LL1 LogManager.java:25 look=[38, 39, 42, 40, 41, 43, 44]
2022-04-05 00:45:22:815 LL1 LogManager.java:25 LL(1)? true
2022-04-05 00:45:22:815 LL1 LogManager.java:25 
DECISION 27 in rule asignacion
2022-04-05 00:45:22:815 LL1 LogManager.java:25 look=[77, 77]
2022-04-05 00:45:22:815 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:815 LL1 LogManager.java:25 
DECISION 28 in rule sent_if_expr
2022-04-05 00:45:22:815 LL1 LogManager.java:25 look=[48, 48, 48]
2022-04-05 00:45:22:815 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:815 LL1 LogManager.java:25 
DECISION 29 in rule printaso
2022-04-05 00:45:22:815 LL1 LogManager.java:25 look=[45, 45]
2022-04-05 00:45:22:816 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:816 LL1 LogManager.java:25 
DECISION 30 in rule list_expre_print
2022-04-05 00:45:22:816 LL1 LogManager.java:25 look=[null, 8]
2022-04-05 00:45:22:816 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:816 LL1 LogManager.java:25 
DECISION 31 in rule list_expre_vec_arr
2022-04-05 00:45:22:816 LL1 LogManager.java:25 look=[null, 12]
2022-04-05 00:45:22:816 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:816 LL1 LogManager.java:25 
DECISION 32 in rule sent_if
2022-04-05 00:45:22:816 LL1 LogManager.java:25 look=[48, 48, 48]
2022-04-05 00:45:22:816 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:816 LL1 LogManager.java:25 
DECISION 33 in rule sent_match
2022-04-05 00:45:22:816 LL1 LogManager.java:25 look=[52, 52]
2022-04-05 00:45:22:816 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:816 LL1 LogManager.java:25 
DECISION 34 in rule match_listbrazos
2022-04-05 00:45:22:816 LL1 LogManager.java:25 look=[null, 16]
2022-04-05 00:45:22:816 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:816 LL1 LogManager.java:25 
DECISION 35 in rule list_brazos
2022-04-05 00:45:22:816 LL1 LogManager.java:25 look=[{1..4, 6..7, 23, 36..39, 77}, {1..4, 6..7, 23, 36..39, 77}, {1..4, 6..7, 23, 36..39, 77}, {1..4, 6..7, 23, 36..39, 77}]
2022-04-05 00:45:22:817 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:817 LL1 LogManager.java:25 
DECISION 36 in rule match_listbrazos_listexpr
2022-04-05 00:45:22:817 LL1 LogManager.java:25 look=[null, {17, 33}]
2022-04-05 00:45:22:817 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:817 LL1 LogManager.java:25 
DECISION 37 in rule el_default
2022-04-05 00:45:22:817 LL1 LogManager.java:25 look=[16, 16]
2022-04-05 00:45:22:817 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:817 LL1 LogManager.java:25 
DECISION 38 in rule sent_ForIn
2022-04-05 00:45:22:817 LL1 LogManager.java:25 look=[53, 53]
2022-04-05 00:45:22:817 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:817 LL1 LogManager.java:25 
DECISION 39 in rule expression_vec_Arr
2022-04-05 00:45:22:817 LL1 LogManager.java:25 look=[38, 39, 7, 6, 11, 11, {1..4, 6..7, 23, 36..39, 77}, 57, {1..4, 36..37, 77}]
2022-04-05 00:45:22:818 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:818 LL1 LogManager.java:25 
DECISION 40 in rule expression_vec_Arr
2022-04-05 00:45:22:818 LL1 LogManager.java:25 look=[null, null, null, null, null]
2022-04-05 00:45:22:818 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:818 LL1 LogManager.java:25 
DECISION 41 in rule expression_vec_Arr
2022-04-05 00:45:22:818 LL1 LogManager.java:25 look=[null, null]
2022-04-05 00:45:22:818 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:818 LL1 LogManager.java:25 
DECISION 42 in rule atributos_struct_exp
2022-04-05 00:45:22:818 LL1 LogManager.java:25 look=[null, 10]
2022-04-05 00:45:22:818 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:818 LL1 LogManager.java:25 
DECISION 43 in rule atributos_struct_decl_exp
2022-04-05 00:45:22:819 LL1 LogManager.java:25 look=[77, 77]
2022-04-05 00:45:22:819 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:819 LL1 LogManager.java:25 
DECISION 44 in rule expression
2022-04-05 00:45:22:819 LL1 LogManager.java:25 look=[38, 39, 23, 7, 7, 6, 77, 77, 77, 77, {1..4, 36..37, 77}]
2022-04-05 00:45:22:819 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:819 LL1 LogManager.java:25 
DECISION 45 in rule expression
2022-04-05 00:45:22:819 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null, null, null, null, null, null]
2022-04-05 00:45:22:819 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:819 LL1 LogManager.java:25 
DECISION 46 in rule expression
2022-04-05 00:45:22:820 LL1 LogManager.java:25 look=[null, null]
2022-04-05 00:45:22:820 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:820 LL1 LogManager.java:25 
DECISION 47 in rule llamada_expre
2022-04-05 00:45:22:820 LL1 LogManager.java:25 look=[77, 77]
2022-04-05 00:45:22:820 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:820 LL1 LogManager.java:25 
DECISION 48 in rule primitivo
2022-04-05 00:45:22:820 LL1 LogManager.java:25 look=[1, 2, {36..37}, 4, 3, 77]
2022-04-05 00:45:22:821 LL1 LogManager.java:25 LL(1)? true
2022-04-05 00:45:22:821 LL1 LogManager.java:25 
DECISION 49 in rule list_array
2022-04-05 00:45:22:821 LL1 LogManager.java:25 look=[null, null]
2022-04-05 00:45:22:821 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:821 LL1 LogManager.java:25 
DECISION 50 in rule llamadas_structs
2022-04-05 00:45:22:821 LL1 LogManager.java:25 look=[null, null]
2022-04-05 00:45:22:821 LL1 LogManager.java:25 LL(1)? false
2022-04-05 00:45:22:840 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-04-05 00:45:22:879 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-04-05 00:45:22:880 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,31:21]
2022-04-05 00:45:22:880 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,31:30].[@-1,24:24='l',<0>,31:44]
2022-04-05 00:45:22:880 action-translator LogManager.java:25 translate 
        $l = arrayList.New()   
    
2022-04-05 00:45:22:880 action-translator LogManager.java:25 attr [@-1,10:10='l',<0>,36:9]
2022-04-05 00:45:22:881 action-translator LogManager.java:25 translate 
            listInt := localctx.(*InstruccionesContext).GetE()
                for _, e := range listInt { 
                    $l.Add(e.GetInstr())
                 }
            
2022-04-05 00:45:22:882 action-translator LogManager.java:25 attr [@-1,130:130='l',<0>,41:21]
2022-04-05 00:45:22:883 action-translator LogManager.java:25 translate  $instr = $printaso.instr 
2022-04-05 00:45:22:883 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,47:20]
2022-04-05 00:45:22:883 action-translator LogManager.java:25 qattr [@-1,11:18='printaso',<0>,47:29].[@-1,20:24='instr',<0>,47:38]
2022-04-05 00:45:22:883 action-translator LogManager.java:25 translate  $instr = $printaso.instr 
2022-04-05 00:45:22:883 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,48:17]
2022-04-05 00:45:22:883 action-translator LogManager.java:25 qattr [@-1,11:18='printaso',<0>,48:26].[@-1,20:24='instr',<0>,48:35]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $declaracion.instr 
2022-04-05 00:45:22:884 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,49:20]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 qattr [@-1,11:21='declaracion',<0>,49:29].[@-1,23:27='instr',<0>,49:41]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $vector_decl.instr 
2022-04-05 00:45:22:884 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,50:20]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 qattr [@-1,11:21='vector_decl',<0>,50:29].[@-1,23:27='instr',<0>,50:41]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $array_decl.instr 
2022-04-05 00:45:22:884 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,51:19]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 qattr [@-1,11:20='array_decl',<0>,51:28].[@-1,22:26='instr',<0>,51:39]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $asignacion.instr 
2022-04-05 00:45:22:884 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,52:19]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 qattr [@-1,11:20='asignacion',<0>,52:28].[@-1,22:26='instr',<0>,52:39]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $sent_if.instr 
2022-04-05 00:45:22:884 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,53:18]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 qattr [@-1,11:17='sent_if',<0>,53:27].[@-1,19:23='instr',<0>,53:35]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $sent_loop.instr 
2022-04-05 00:45:22:884 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,54:18]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 qattr [@-1,11:19='sent_loop',<0>,54:27].[@-1,21:25='instr',<0>,54:37]
2022-04-05 00:45:22:884 action-translator LogManager.java:25 translate  $instr = $sent_while.instr 
2022-04-05 00:45:22:885 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,55:19]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 qattr [@-1,11:20='sent_while',<0>,55:28].[@-1,22:26='instr',<0>,55:39]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 translate  $instr = $sent_match.instr 
2022-04-05 00:45:22:885 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,56:19]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 qattr [@-1,11:20='sent_match',<0>,56:28].[@-1,22:26='instr',<0>,56:39]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 translate  $instr = $sent_funciones_Vec.instr 
2022-04-05 00:45:22:885 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,57:27]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 qattr [@-1,11:28='sent_funciones_Vec',<0>,57:36].[@-1,30:34='instr',<0>,57:55]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 translate  $instr = $sent_ForIn.instr 
2022-04-05 00:45:22:885 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,58:19]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 qattr [@-1,11:20='sent_ForIn',<0>,58:28].[@-1,22:26='instr',<0>,58:39]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 translate  $instr = $funciones_Trans.instr 
2022-04-05 00:45:22:885 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,59:24]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 qattr [@-1,11:25='funciones_Trans',<0>,59:33].[@-1,27:31='instr',<0>,59:49]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 translate  $instr = $sent_funcion.instr 
2022-04-05 00:45:22:885 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,60:21]
2022-04-05 00:45:22:885 action-translator LogManager.java:25 qattr [@-1,11:22='sent_funcion',<0>,60:30].[@-1,24:28='instr',<0>,60:43]
2022-04-05 00:45:22:886 action-translator LogManager.java:25 translate  $instr = $sent_Llamada.instr 
2022-04-05 00:45:22:887 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,61:21]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,11:22='sent_Llamada',<0>,61:30].[@-1,24:28='instr',<0>,61:43]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 translate  $instr = $sent_struct.instr 
2022-04-05 00:45:22:887 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,62:20]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,11:21='sent_struct',<0>,62:29].[@-1,23:27='instr',<0>,62:41]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 translate  $instr = $sent_Modulos.instr 
2022-04-05 00:45:22:887 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,63:21]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,11:22='sent_Modulos',<0>,63:30].[@-1,24:28='instr',<0>,63:43]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 translate  $instr = modulos.NewModulos($ID.text, interfaces.PUBLICO, $li.l, $MODULO.line, $MODULO.pos) 
2022-04-05 00:45:22:887 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,67:63]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,67:91].[@-1,33:36='text',<0>,67:94]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,60:61='li',<0>,67:121].[@-1,63:63='l',<0>,67:124]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,67:72='MODULO',<0>,67:128].[@-1,74:77='line',<0>,67:135]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,81:86='MODULO',<0>,67:142].[@-1,88:90='pos',<0>,67:149]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 translate  $instr = modulos.NewModulos($ID.text, interfaces.PRIVADO, $li.l, $MODULO.line, $MODULO.pos) 
2022-04-05 00:45:22:887 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,68:63]
2022-04-05 00:45:22:887 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,68:91].[@-1,33:36='text',<0>,68:94]
2022-04-05 00:45:22:888 action-translator LogManager.java:25 qattr [@-1,60:61='li',<0>,68:121].[@-1,63:63='l',<0>,68:124]
2022-04-05 00:45:22:888 action-translator LogManager.java:25 qattr [@-1,67:72='MODULO',<0>,68:128].[@-1,74:77='line',<0>,68:135]
2022-04-05 00:45:22:888 action-translator LogManager.java:25 qattr [@-1,81:86='MODULO',<0>,68:142].[@-1,88:90='pos',<0>,68:149]
2022-04-05 00:45:22:889 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:889 action-translator LogManager.java:25 translate  
        a := arrayList.New() 
        a.Add($instruct_modulos.instr)
        $l = a
     
2022-04-05 00:45:22:889 action-translator LogManager.java:25 qattr [@-1,49:64='instruct_modulos',<0>,4:15].[@-1,66:70='instr',<0>,4:32]
2022-04-05 00:45:22:889 action-translator LogManager.java:25 attr [@-1,83:83='l',<0>,5:9]
2022-04-05 00:45:22:889 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:889 action-translator LogManager.java:25 translate  
                  $li.l.Add($instruct_modulos.instr)  
                  $l = $li.l
               
2022-04-05 00:45:22:889 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,10:19].[@-1,25:25='l',<0>,10:22]
2022-04-05 00:45:22:889 action-translator LogManager.java:25 qattr [@-1,32:47='instruct_modulos',<0>,10:29].[@-1,49:53='instr',<0>,10:46]
2022-04-05 00:45:22:889 action-translator LogManager.java:25 attr [@-1,78:78='l',<0>,11:19]
2022-04-05 00:45:22:889 action-translator LogManager.java:25 qattr [@-1,83:84='li',<0>,11:24].[@-1,86:86='l',<0>,11:27]
2022-04-05 00:45:22:890 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:891 action-translator LogManager.java:25 translate  $instr = $sent_Modulos.instr 
2022-04-05 00:45:22:891 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,84:30]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,11:22='sent_Modulos',<0>,84:39].[@-1,24:28='instr',<0>,84:52]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 translate  $instr = modulos.NewFuncion_Mod( $sent_funcion.instr, interfaces.PUBLICO, $PUBLI.line, $PUBLI.pos ) 
2022-04-05 00:45:22:891 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,85:30]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,35:46='sent_funcion',<0>,85:63].[@-1,48:52='instr',<0>,85:76]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,76:80='PUBLI',<0>,85:104].[@-1,82:85='line',<0>,85:110]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,89:93='PUBLI',<0>,85:117].[@-1,95:97='pos',<0>,85:123]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 translate  $instr = modulos.NewFuncion_Mod( $sf.instr, interfaces.PRIVADO, 0, 0 ) 
2022-04-05 00:45:22:891 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,86:30]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,35:36='sf',<0>,86:63].[@-1,38:42='instr',<0>,86:66]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 translate  $instr = modulos.NewStruct_Mod( $sent_struct.instr, interfaces.PUBLICO , $PUBLI.line, $PUBLI.pos ) 
2022-04-05 00:45:22:891 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,87:30]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,34:44='sent_struct',<0>,87:62].[@-1,46:50='instr',<0>,87:74]
2022-04-05 00:45:22:891 action-translator LogManager.java:25 qattr [@-1,75:79='PUBLI',<0>,87:103].[@-1,81:84='line',<0>,87:109]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 qattr [@-1,88:92='PUBLI',<0>,87:116].[@-1,94:96='pos',<0>,87:122]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 translate  $instr = modulos.NewStruct_Mod( $ss.instr, interfaces.PUBLICO , 0, 0 ) 
2022-04-05 00:45:22:892 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,88:33]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 qattr [@-1,34:35='ss',<0>,88:65].[@-1,37:41='instr',<0>,88:68]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 translate  $instr = structs.NewStruct($ID.text, $atributos_struct.l,$STRUCT.line,$STRUCT.pos) 
2022-04-05 00:45:22:892 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,92:49]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,92:76].[@-1,32:35='text',<0>,92:79]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 qattr [@-1,39:54='atributos_struct',<0>,92:86].[@-1,56:56='l',<0>,92:103]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 qattr [@-1,59:64='STRUCT',<0>,92:106].[@-1,66:69='line',<0>,92:113]
2022-04-05 00:45:22:892 action-translator LogManager.java:25 qattr [@-1,72:77='STRUCT',<0>,92:119].[@-1,79:81='pos',<0>,92:126]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:893 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($atributos_struct_decl.s)
        $l = a
    
2022-04-05 00:45:22:893 action-translator LogManager.java:25 qattr [@-1,47:67='atributos_struct_decl',<0>,4:15].[@-1,69:69='s',<0>,4:37]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 attr [@-1,82:82='l',<0>,5:9]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:893 action-translator LogManager.java:25 translate 
                  $li.l.Add($asd.s)
                  $l = $li.l
              
2022-04-05 00:45:22:893 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 qattr [@-1,31:33='asd',<0>,10:29].[@-1,35:35='s',<0>,10:33]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 attr [@-1,58:58='l',<0>,11:19]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 qattr [@-1,63:64='li',<0>,11:24].[@-1,66:66='l',<0>,11:27]
2022-04-05 00:45:22:893 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:894 action-translator LogManager.java:25 translate $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6}
2022-04-05 00:45:22:894 action-translator LogManager.java:25 attr [@-1,1:1='s',<0>,107:31]
2022-04-05 00:45:22:894 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,107:59].[@-1,32:35='text',<0>,107:62]
2022-04-05 00:45:22:894 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10} 
2022-04-05 00:45:22:894 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,108:27]
2022-04-05 00:45:22:894 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,108:55].[@-1,33:36='text',<0>,108:58]
2022-04-05 00:45:22:894 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te} 
2022-04-05 00:45:22:894 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,109:20]
2022-04-05 00:45:22:895 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,109:48].[@-1,33:36='text',<0>,109:51]
2022-04-05 00:45:22:895 action-translator LogManager.java:25 qattr [@-1,46:49='tipo',<0>,109:64].[@-1,51:52='te',<0>,109:69]
2022-04-05 00:45:22:895 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $id1.text, Tipo: 9, Valor: $id2.text} 
2022-04-05 00:45:22:895 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,110:26]
2022-04-05 00:45:22:895 action-translator LogManager.java:25 qattr [@-1,30:32='id1',<0>,110:54].[@-1,34:37='text',<0>,110:58]
2022-04-05 00:45:22:895 action-translator LogManager.java:25 qattr [@-1,57:59='id2',<0>,110:81].[@-1,61:64='text',<0>,110:85]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:897 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,115:9]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,115:41].[@-1,46:49='text',<0>,115:44]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,87:99='instrucciones',<0>,115:85].[@-1,101:101='l',<0>,115:99]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,105:109='FUNCT',<0>,115:103].[@-1,111:114='line',<0>,115:109]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,118:122='FUNCT',<0>,115:116].[@-1,124:126='pos',<0>,115:122]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:897 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,118:9]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,118:41].[@-1,45:48='text',<0>,118:44]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,118:51].[@-1,67:67='l',<0>,118:66]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,88:100='instrucciones',<0>,118:87].[@-1,102:102='l',<0>,118:101]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,106:110='FUNCT',<0>,118:105].[@-1,112:115='line',<0>,118:111]
2022-04-05 00:45:22:897 action-translator LogManager.java:25 qattr [@-1,119:123='FUNCT',<0>,118:118].[@-1,125:127='pos',<0>,118:124]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:898 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,121:9]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,121:41].[@-1,46:49='text',<0>,121:44]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,70:73='tipo',<0>,121:68].[@-1,75:76='te',<0>,121:73]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,80:92='instrucciones',<0>,121:78].[@-1,94:94='l',<0>,121:92]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,98:102='FUNCT',<0>,121:96].[@-1,104:107='line',<0>,121:102]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,111:115='FUNCT',<0>,121:109].[@-1,117:119='pos',<0>,121:115]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, $tipo.te, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:898 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,124:9]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,124:41].[@-1,45:48='text',<0>,124:44]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,124:51].[@-1,67:67='l',<0>,124:66]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,71:74='tipo',<0>,124:70].[@-1,76:77='te',<0>,124:75]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,81:93='instrucciones',<0>,124:80].[@-1,95:95='l',<0>,124:94]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,99:103='FUNCT',<0>,124:98].[@-1,105:108='line',<0>,124:104]
2022-04-05 00:45:22:898 action-translator LogManager.java:25 qattr [@-1,112:116='FUNCT',<0>,124:111].[@-1,118:120='pos',<0>,124:117]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($id1.text, arrayList.New(), interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:899 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,127:9]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,43:45='id1',<0>,127:41].[@-1,47:50='text',<0>,127:45]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,88:100='instrucciones',<0>,127:86].[@-1,102:102='l',<0>,127:100]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,106:110='FUNCT',<0>,127:104].[@-1,112:115='line',<0>,127:110]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,119:123='FUNCT',<0>,127:117].[@-1,125:127='pos',<0>,127:123]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($id1.text, $params_funcion.l, interfaces.NULL, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:899 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,130:9]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,42:44='id1',<0>,130:41].[@-1,46:49='text',<0>,130:45]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,53:66='params_funcion',<0>,130:52].[@-1,68:68='l',<0>,130:67]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,89:101='instrucciones',<0>,130:88].[@-1,103:103='l',<0>,130:102]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,107:111='FUNCT',<0>,130:106].[@-1,113:116='line',<0>,130:112]
2022-04-05 00:45:22:899 action-translator LogManager.java:25 qattr [@-1,120:124='FUNCT',<0>,130:119].[@-1,126:128='pos',<0>,130:125]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:900 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,133:9]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,133:41].[@-1,46:49='text',<0>,133:44]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 qattr [@-1,88:100='instrucciones',<0>,133:86].[@-1,102:102='l',<0>,133:100]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 qattr [@-1,106:110='FUNCT',<0>,133:104].[@-1,112:115='line',<0>,133:110]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 qattr [@-1,119:123='FUNCT',<0>,133:117].[@-1,125:127='pos',<0>,133:123]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.ARRAY, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:900 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,136:9]
2022-04-05 00:45:22:900 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,136:41].[@-1,45:48='text',<0>,136:44]
2022-04-05 00:45:22:901 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,136:51].[@-1,67:67='l',<0>,136:66]
2022-04-05 00:45:22:901 action-translator LogManager.java:25 qattr [@-1,89:101='instrucciones',<0>,136:88].[@-1,103:103='l',<0>,136:102]
2022-04-05 00:45:22:901 action-translator LogManager.java:25 qattr [@-1,107:111='FUNCT',<0>,136:106].[@-1,113:116='line',<0>,136:112]
2022-04-05 00:45:22:901 action-translator LogManager.java:25 qattr [@-1,120:124='FUNCT',<0>,136:119].[@-1,126:128='pos',<0>,136:125]
2022-04-05 00:45:22:902 action-translator LogManager.java:25 translate  
        $instr = instruction.NewFuncion($ID.text, arrayList.New(), interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:902 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,139:9]
2022-04-05 00:45:22:902 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,139:41].[@-1,46:49='text',<0>,139:44]
2022-04-05 00:45:22:902 action-translator LogManager.java:25 qattr [@-1,89:101='instrucciones',<0>,139:87].[@-1,103:103='l',<0>,139:101]
2022-04-05 00:45:22:902 action-translator LogManager.java:25 qattr [@-1,107:111='FUNCT',<0>,139:105].[@-1,113:116='line',<0>,139:111]
2022-04-05 00:45:22:902 action-translator LogManager.java:25 qattr [@-1,120:124='FUNCT',<0>,139:118].[@-1,126:128='pos',<0>,139:124]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 translate 
        $instr = instruction.NewFuncion($ID.text, $params_funcion.l, interfaces.VECTOR, $instrucciones.l, $FUNCT.line, $FUNCT.pos) 
    
2022-04-05 00:45:22:903 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,142:9]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,142:41].[@-1,45:48='text',<0>,142:44]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 qattr [@-1,52:65='params_funcion',<0>,142:51].[@-1,67:67='l',<0>,142:66]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 qattr [@-1,90:102='instrucciones',<0>,142:89].[@-1,104:104='l',<0>,142:103]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 qattr [@-1,108:112='FUNCT',<0>,142:107].[@-1,114:117='line',<0>,142:113]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 qattr [@-1,121:125='FUNCT',<0>,142:120].[@-1,127:129='pos',<0>,142:126]
2022-04-05 00:45:22:903 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:904 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($params_funcion_decl.s)
        $l = a
     
2022-04-05 00:45:22:905 action-translator LogManager.java:25 qattr [@-1,48:66='params_funcion_decl',<0>,4:15].[@-1,68:68='s',<0>,4:35]
2022-04-05 00:45:22:905 action-translator LogManager.java:25 attr [@-1,81:81='l',<0>,5:9]
2022-04-05 00:45:22:905 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:905 action-translator LogManager.java:25 translate 
                  $li.l.Add($params_funcion_decl.s)  
                  $l = $li.l
              
2022-04-05 00:45:22:905 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-04-05 00:45:22:905 action-translator LogManager.java:25 qattr [@-1,31:49='params_funcion_decl',<0>,10:29].[@-1,51:51='s',<0>,10:49]
2022-04-05 00:45:22:905 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,11:19]
2022-04-05 00:45:22:905 action-translator LogManager.java:25 qattr [@-1,81:82='li',<0>,11:24].[@-1,84:84='l',<0>,11:27]
2022-04-05 00:45:22:905 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:906 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: true} 
2022-04-05 00:45:22:906 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,158:46]
2022-04-05 00:45:22:906 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,158:74].[@-1,33:36='text',<0>,158:77]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 6, IsMut: false} 
2022-04-05 00:45:22:908 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,159:46]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,159:74].[@-1,33:36='text',<0>,159:77]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: true} 
2022-04-05 00:45:22:908 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,160:46]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,160:74].[@-1,33:36='text',<0>,160:77]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: 10, IsMut: false} 
2022-04-05 00:45:22:908 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,161:46]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,161:74].[@-1,33:36='text',<0>,161:77]
2022-04-05 00:45:22:908 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: true} 
2022-04-05 00:45:22:908 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,162:46]
2022-04-05 00:45:22:909 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,162:74].[@-1,33:36='text',<0>,162:77]
2022-04-05 00:45:22:909 action-translator LogManager.java:25 qattr [@-1,46:49='tipo',<0>,162:90].[@-1,51:52='te',<0>,162:95]
2022-04-05 00:45:22:909 action-translator LogManager.java:25 translate  $s = interfaces.Symbol{ Id: $ID.text, Tipo: $tipo.te, IsMut: false} 
2022-04-05 00:45:22:909 action-translator LogManager.java:25 attr [@-1,2:2='s',<0>,163:46]
2022-04-05 00:45:22:909 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,163:74].[@-1,33:36='text',<0>,163:77]
2022-04-05 00:45:22:909 action-translator LogManager.java:25 qattr [@-1,46:49='tipo',<0>,163:90].[@-1,51:52='te',<0>,163:95]
2022-04-05 00:45:22:910 action-translator LogManager.java:25 translate  $instr = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) 
2022-04-05 00:45:22:910 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,166:25]
2022-04-05 00:45:22:911 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,166:57].[@-1,37:40='text',<0>,166:60]
2022-04-05 00:45:22:911 action-translator LogManager.java:25 qattr [@-1,61:64='PARA',<0>,166:84].[@-1,66:69='line',<0>,166:89]
2022-04-05 00:45:22:912 action-translator LogManager.java:25 qattr [@-1,73:76='PARA',<0>,166:96].[@-1,78:80='pos',<0>,166:101]
2022-04-05 00:45:22:913 action-translator LogManager.java:25 translate  $instr = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) 
2022-04-05 00:45:22:913 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,167:43]
2022-04-05 00:45:22:913 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,167:75].[@-1,37:40='text',<0>,167:78]
2022-04-05 00:45:22:914 action-translator LogManager.java:25 qattr [@-1,44:45='li',<0>,167:85].[@-1,47:47='l',<0>,167:88]
2022-04-05 00:45:22:914 action-translator LogManager.java:25 qattr [@-1,51:54='PARA',<0>,167:92].[@-1,56:59='line',<0>,167:97]
2022-04-05 00:45:22:914 action-translator LogManager.java:25 qattr [@-1,63:66='PARA',<0>,167:104].[@-1,68:70='pos',<0>,167:109]
2022-04-05 00:45:22:914 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:914 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-04-05 00:45:22:914 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,9:15].[@-1,58:58='p',<0>,9:26]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,10:9]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-05 00:45:22:915 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,15:19].[@-1,25:25='l',<0>,15:22]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,15:29].[@-1,43:43='p',<0>,15:40]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,16:19]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,73:74='li',<0>,16:24].[@-1,76:76='l',<0>,16:27]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-04-05 00:45:22:915 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,19:19].[@-1,25:25='l',<0>,19:22]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,19:29].[@-1,43:43='p',<0>,19:40]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,20:19]
2022-04-05 00:45:22:915 action-translator LogManager.java:25 qattr [@-1,73:74='li',<0>,20:24].[@-1,76:76='l',<0>,20:27]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-05 00:45:22:916 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-04-05 00:45:22:916 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewBreak( nil, $BRE.line, $BRE.pos ) 
2022-04-05 00:45:22:916 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,192:16]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 qattr [@-1,49:51='BRE',<0>,192:63].[@-1,53:56='line',<0>,192:67]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 qattr [@-1,60:62='BRE',<0>,192:74].[@-1,64:66='pos',<0>,192:78]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewBreak( $expression.p, $BRE.line, $BRE.pos ) 
2022-04-05 00:45:22:916 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,193:27]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 qattr [@-1,44:53='expression',<0>,193:69].[@-1,55:55='p',<0>,193:80]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 qattr [@-1,59:61='BRE',<0>,193:84].[@-1,63:66='line',<0>,193:88]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 qattr [@-1,70:72='BRE',<0>,193:95].[@-1,74:76='pos',<0>,193:99]
2022-04-05 00:45:22:916 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewContinue($CONTINIU.line, $CONTINIU.pos) 
2022-04-05 00:45:22:916 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,194:21]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,46:53='CONTINIU',<0>,194:65].[@-1,55:58='line',<0>,194:74]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,62:69='CONTINIU',<0>,194:81].[@-1,71:73='pos',<0>,194:90]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewReturnaso(nil, $RETURNASO.line, $RETURNASO.pos) 
2022-04-05 00:45:22:917 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,195:22]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,52:60='RETURNASO',<0>,195:72].[@-1,62:65='line',<0>,195:82]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,69:77='RETURNASO',<0>,195:89].[@-1,79:81='pos',<0>,195:99]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewReturnaso($expression.p, $RETURNASO.line, $RETURNASO.pos) 
2022-04-05 00:45:22:917 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,196:34]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,196:79].[@-1,58:58='p',<0>,196:90]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,62:70='RETURNASO',<0>,196:94].[@-1,72:75='line',<0>,196:104]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,79:87='RETURNASO',<0>,196:111].[@-1,89:91='pos',<0>,196:121]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 translate  $instr = sentenciatransferencia.NewReturnaso($expression_vec_Arr.p, $RETURNASO.line, $RETURNASO.pos) 
2022-04-05 00:45:22:917 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,197:42]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,47:64='expression_vec_Arr',<0>,197:87].[@-1,66:66='p',<0>,197:106]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,70:78='RETURNASO',<0>,197:110].[@-1,80:83='line',<0>,197:120]
2022-04-05 00:45:22:917 action-translator LogManager.java:25 qattr [@-1,87:95='RETURNASO',<0>,197:127].[@-1,97:99='pos',<0>,197:137]
2022-04-05 00:45:22:919 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $expression.p, true ,$IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:919 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,202:9]
2022-04-05 00:45:22:919 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,202:45].[@-1,50:53='text',<0>,202:48]
2022-04-05 00:45:22:919 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,202:55].[@-1,62:63='te',<0>,202:60]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,67:76='expression',<0>,202:65].[@-1,78:78='p',<0>,202:76]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,88:92='IGUAL',<0>,202:86].[@-1,94:97='line',<0>,202:92]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,100:104='IGUAL',<0>,202:98].[@-1,106:108='pos',<0>,202:104]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, 4, $expression.p, true, $IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:920 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,205:9]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,205:45].[@-1,50:53='text',<0>,205:48]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,60:69='expression',<0>,205:58].[@-1,71:71='p',<0>,205:69]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,81:85='IGUAL',<0>,205:79].[@-1,87:90='line',<0>,205:85]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 qattr [@-1,93:97='IGUAL',<0>,205:91].[@-1,99:101='pos',<0>,205:97]
2022-04-05 00:45:22:920 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $expression.p, false,  $IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:921 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,208:9]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,208:45].[@-1,50:53='text',<0>,208:48]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,208:55].[@-1,62:63='te',<0>,208:60]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,67:76='expression',<0>,208:65].[@-1,78:78='p',<0>,208:76]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,90:94='IGUAL',<0>,208:88].[@-1,96:99='line',<0>,208:94]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,102:106='IGUAL',<0>,208:100].[@-1,108:110='pos',<0>,208:106]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, 4, $expression.p, false, $IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:921 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,211:9]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,211:45].[@-1,50:53='text',<0>,211:48]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,60:69='expression',<0>,211:58].[@-1,71:71='p',<0>,211:69]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,82:86='IGUAL',<0>,211:80].[@-1,88:91='line',<0>,211:86]
2022-04-05 00:45:22:921 action-translator LogManager.java:25 qattr [@-1,94:98='IGUAL',<0>,211:92].[@-1,100:102='pos',<0>,211:98]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $sentencias_expr.p, true,$IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:922 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,215:9]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,215:45].[@-1,50:53='text',<0>,215:48]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,215:55].[@-1,62:63='te',<0>,215:60]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 qattr [@-1,67:81='sentencias_expr',<0>,215:65].[@-1,83:83='p',<0>,215:81]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 qattr [@-1,92:96='IGUAL',<0>,215:90].[@-1,98:101='line',<0>,215:96]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 qattr [@-1,104:108='IGUAL',<0>,215:102].[@-1,110:112='pos',<0>,215:108]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, 4, $sentencias_expr.p, true, $IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:922 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,218:9]
2022-04-05 00:45:22:922 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,218:45].[@-1,50:53='text',<0>,218:48]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,60:74='sentencias_expr',<0>,218:58].[@-1,76:76='p',<0>,218:74]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,86:90='IGUAL',<0>,218:84].[@-1,92:95='line',<0>,218:90]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,98:102='IGUAL',<0>,218:96].[@-1,104:106='pos',<0>,218:102]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, $tipo.te, $sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:923 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,221:9]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,221:45].[@-1,50:53='text',<0>,221:48]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,57:60='tipo',<0>,221:55].[@-1,62:63='te',<0>,221:60]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,67:81='sentencias_expr',<0>,221:65].[@-1,83:83='p',<0>,221:81]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,94:98='IGUAL',<0>,221:92].[@-1,100:103='line',<0>,221:98]
2022-04-05 00:45:22:923 action-translator LogManager.java:25 qattr [@-1,106:110='IGUAL',<0>,221:104].[@-1,112:114='pos',<0>,221:110]
2022-04-05 00:45:22:924 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration($ID.text, 4, $sentencias_expr.p, false, $IGUAL.line,$IGUAL.pos ) 
        
2022-04-05 00:45:22:924 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,224:9]
2022-04-05 00:45:22:924 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,224:45].[@-1,50:53='text',<0>,224:48]
2022-04-05 00:45:22:924 action-translator LogManager.java:25 qattr [@-1,60:74='sentencias_expr',<0>,224:58].[@-1,76:76='p',<0>,224:74]
2022-04-05 00:45:22:924 action-translator LogManager.java:25 qattr [@-1,87:91='IGUAL',<0>,224:85].[@-1,93:96='line',<0>,224:91]
2022-04-05 00:45:22:924 action-translator LogManager.java:25 qattr [@-1,99:103='IGUAL',<0>,224:97].[@-1,105:107='pos',<0>,224:103]
2022-04-05 00:45:22:925 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, true, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:925 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,230:9]
2022-04-05 00:45:22:925 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,230:51].[@-1,56:59='text',<0>,230:54]
2022-04-05 00:45:22:925 action-translator LogManager.java:25 qattr [@-1,63:64='tr',<0>,230:61].[@-1,66:67='at',<0>,230:64]
2022-04-05 00:45:22:925 action-translator LogManager.java:25 qattr [@-1,71:72='ea',<0>,230:69].[@-1,74:74='p',<0>,230:72]
2022-04-05 00:45:22:925 action-translator LogManager.java:25 qattr [@-1,84:86='LET',<0>,230:82].[@-1,88:91='line',<0>,230:86]
2022-04-05 00:45:22:925 action-translator LogManager.java:25 qattr [@-1,94:96='LET',<0>,230:92].[@-1,98:100='pos',<0>,230:96]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 translate 
        var a *structsinter.Array_type
        $instr = instruction.NewDeclaration_Array($ID.text, a, $ea.p, true, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:926 action-translator LogManager.java:25 attr [@-1,49:53='instr',<0>,234:9]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,234:51].[@-1,94:97='text',<0>,234:54]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,104:105='ea',<0>,234:64].[@-1,107:107='p',<0>,234:67]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,117:119='LET',<0>,234:77].[@-1,121:124='line',<0>,234:81]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,127:129='LET',<0>,234:87].[@-1,131:133='pos',<0>,234:91]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Array($ID.text, $tr.at, $ea.p, false, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:926 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,237:9]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,237:51].[@-1,55:58='text',<0>,237:54]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,62:63='tr',<0>,237:61].[@-1,65:66='at',<0>,237:64]
2022-04-05 00:45:22:926 action-translator LogManager.java:25 qattr [@-1,70:71='ea',<0>,237:69].[@-1,73:73='p',<0>,237:72]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 qattr [@-1,84:86='LET',<0>,237:83].[@-1,88:91='line',<0>,237:87]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 qattr [@-1,94:96='LET',<0>,237:93].[@-1,98:100='pos',<0>,237:97]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 translate 
        var a *structsinter.Array_type
        $instr = instruction.NewDeclaration_Array($ID.text, a, $ea.p, false, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:927 action-translator LogManager.java:25 attr [@-1,49:53='instr',<0>,241:9]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,241:51].[@-1,94:97='text',<0>,241:54]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 qattr [@-1,104:105='ea',<0>,241:64].[@-1,107:107='p',<0>,241:67]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 qattr [@-1,118:120='LET',<0>,241:78].[@-1,122:125='line',<0>,241:82]
2022-04-05 00:45:22:927 action-translator LogManager.java:25 qattr [@-1,128:130='LET',<0>,241:88].[@-1,132:134='pos',<0>,241:92]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 translate 
        a:= &structsinter.Array_type{
                Tipo: $stru.at.Tipo,
                Size: $expression_vec_Arr.p,
                Array_Son: $stru.at,
	        }
        $at = a 
    
2022-04-05 00:45:22:928 action-translator LogManager.java:25 qattr [@-1,62:65='stru',<0>,248:23].[@-1,67:68='at',<0>,248:28]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 qattr [@-1,99:116='expression_vec_Arr',<0>,249:23].[@-1,118:118='p',<0>,249:42]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 qattr [@-1,149:152='stru',<0>,250:28].[@-1,154:155='at',<0>,250:33]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 attr [@-1,178:179='at',<0>,252:9]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 translate 
        a:= &structsinter.Array_type{
                Tipo: $tipo.te,
                Size: $expression_vec_Arr.p,
                Array_Son: nil,
	        }
        $at = a
    
2022-04-05 00:45:22:928 action-translator LogManager.java:25 qattr [@-1,62:65='tipo',<0>,256:23].[@-1,67:68='te',<0>,256:28]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 qattr [@-1,94:111='expression_vec_Arr',<0>,257:23].[@-1,113:113='p',<0>,257:42]
2022-04-05 00:45:22:928 action-translator LogManager.java:25 attr [@-1,168:169='at',<0>,260:9]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,true, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:930 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,267:9]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,267:52].[@-1,57:60='text',<0>,267:55]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,64:67='tipo',<0>,267:62].[@-1,69:70='te',<0>,267:67]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,74:75='ea',<0>,267:72].[@-1,77:77='p',<0>,267:75]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,91:93='LET',<0>,267:89].[@-1,95:98='line',<0>,267:93]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,101:103='LET',<0>,267:99].[@-1,105:107='pos',<0>,267:103]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 translate  
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,true, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:930 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,270:9]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,54:56='id1',<0>,270:52].[@-1,58:61='text',<0>,270:56]
2022-04-05 00:45:22:930 action-translator LogManager.java:25 qattr [@-1,84:85='ea',<0>,270:82].[@-1,87:87='p',<0>,270:85]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,91:93='id2',<0>,270:89].[@-1,95:98='text',<0>,270:93]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,108:110='LET',<0>,270:106].[@-1,112:115='line',<0>,270:110]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,118:120='LET',<0>,270:116].[@-1,122:124='pos',<0>,270:120]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Vector($ID.text, 4, $ea.p, "" ,true, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:931 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,273:9]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,273:52].[@-1,56:59='text',<0>,273:55]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,66:67='ea',<0>,273:65].[@-1,69:69='p',<0>,273:68]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,83:85='LET',<0>,273:82].[@-1,87:90='line',<0>,273:86]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 qattr [@-1,93:95='LET',<0>,273:92].[@-1,97:99='pos',<0>,273:96]
2022-04-05 00:45:22:931 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Vector($ID.text, $tipo.te, $ea.p, "" ,false, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:932 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,276:9]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,276:52].[@-1,56:59='text',<0>,276:55]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,63:66='tipo',<0>,276:62].[@-1,68:69='te',<0>,276:67]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,73:74='ea',<0>,276:72].[@-1,76:76='p',<0>,276:75]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,91:93='LET',<0>,276:90].[@-1,95:98='line',<0>,276:94]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,101:103='LET',<0>,276:100].[@-1,105:107='pos',<0>,276:104]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Vector($ID.text, 4, $ea.p, "" ,false, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:932 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,279:9]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,279:52].[@-1,56:59='text',<0>,279:55]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,66:67='ea',<0>,279:65].[@-1,69:69='p',<0>,279:68]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,84:86='LET',<0>,279:83].[@-1,88:91='line',<0>,279:87]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 qattr [@-1,94:96='LET',<0>,279:93].[@-1,98:100='pos',<0>,279:97]
2022-04-05 00:45:22:932 action-translator LogManager.java:25 translate 
        $instr = instruction.NewDeclaration_Vector($id1.text, interfaces.STRUCT, $ea.p, $id2.text ,false, $LET.line,$LET.pos) 
    
2022-04-05 00:45:22:933 action-translator LogManager.java:25 attr [@-1,10:14='instr',<0>,282:9]
2022-04-05 00:45:22:933 action-translator LogManager.java:25 qattr [@-1,53:55='id1',<0>,282:52].[@-1,57:60='text',<0>,282:56]
2022-04-05 00:45:22:933 action-translator LogManager.java:25 qattr [@-1,83:84='ea',<0>,282:82].[@-1,86:86='p',<0>,282:85]
2022-04-05 00:45:22:933 action-translator LogManager.java:25 qattr [@-1,90:92='id2',<0>,282:89].[@-1,94:97='text',<0>,282:93]
2022-04-05 00:45:22:933 action-translator LogManager.java:25 qattr [@-1,108:110='LET',<0>,282:107].[@-1,112:115='line',<0>,282:111]
2022-04-05 00:45:22:933 action-translator LogManager.java:25 qattr [@-1,118:120='LET',<0>,282:117].[@-1,122:124='pos',<0>,282:121]
2022-04-05 00:45:22:934 action-translator LogManager.java:25 translate  
        var a,b,c interfaces.Expresion
        $p = vector.NewVector( $list_expre_vec_arr.l, a , b , false,c,$CORCHA.line, $CORCHA.pos  ) 
        
2022-04-05 00:45:22:934 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,289:9]
2022-04-05 00:45:22:934 action-translator LogManager.java:25 qattr [@-1,73:90='list_expre_vec_arr',<0>,289:32].[@-1,92:92='l',<0>,289:51]
2022-04-05 00:45:22:934 action-translator LogManager.java:25 qattr [@-1,112:117='CORCHA',<0>,289:71].[@-1,119:122='line',<0>,289:78]
2022-04-05 00:45:22:934 action-translator LogManager.java:25 qattr [@-1,126:131='CORCHA',<0>,289:85].[@-1,133:135='pos',<0>,289:92]
2022-04-05 00:45:22:934 action-translator LogManager.java:25 translate  
        var a interfaces.Expresion
        $p = vector.NewVector( arrayList.New(), $exp1.p, $exp2.p ,false, a ,$CORCHA.line, $CORCHA.pos) 
        
2022-04-05 00:45:22:934 action-translator LogManager.java:25 attr [@-1,46:46='p',<0>,293:9]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,86:89='exp1',<0>,293:49].[@-1,91:91='p',<0>,293:54]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,95:98='exp2',<0>,293:58].[@-1,100:100='p',<0>,293:63]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,114:119='CORCHA',<0>,293:77].[@-1,121:124='line',<0>,293:84]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,128:133='CORCHA',<0>,293:91].[@-1,135:137='pos',<0>,293:98]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 translate  
        var a,b,c interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,true,c,$NEWI.line,$NEWI.pos) 
    
2022-04-05 00:45:22:935 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,297:9]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,100:103='NEWI',<0>,297:59].[@-1,105:108='line',<0>,297:64]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,111:114='NEWI',<0>,297:70].[@-1,116:118='pos',<0>,297:75]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 translate  
        var a,b interfaces.Expresion
        $p =  vector.NewVector(arrayList.New(),a,b,false,$expression_vec_Arr.p,$WITH_CAP.line,$WITH_CAP.pos) 
    
2022-04-05 00:45:22:935 action-translator LogManager.java:25 attr [@-1,48:48='p',<0>,301:9]
2022-04-05 00:45:22:935 action-translator LogManager.java:25 qattr [@-1,97:114='expression_vec_Arr',<0>,301:58].[@-1,116:116='p',<0>,301:77]
2022-04-05 00:45:22:936 action-translator LogManager.java:25 qattr [@-1,119:126='WITH_CAP',<0>,301:80].[@-1,128:131='line',<0>,301:89]
2022-04-05 00:45:22:936 action-translator LogManager.java:25 qattr [@-1,134:141='WITH_CAP',<0>,301:95].[@-1,143:145='pos',<0>,301:104]
2022-04-05 00:45:22:936 action-translator LogManager.java:25 translate  $instr = funcionesvectores.NewPush($ID.text, $expression.p, $PUSH.line, $PUSH.pos) 
2022-04-05 00:45:22:936 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,307:46]
2022-04-05 00:45:22:936 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,307:81].[@-1,40:43='text',<0>,307:84]
2022-04-05 00:45:22:936 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,307:91].[@-1,58:58='p',<0>,307:102]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,62:65='PUSH',<0>,307:106].[@-1,67:70='line',<0>,307:111]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,74:77='PUSH',<0>,307:118].[@-1,79:81='pos',<0>,307:123]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 translate  
        $instr = funcionesvectores.NewInsert($ID.text, $exp1.p, $exp2.p, $INSERT.line, $INSERT.pos) 
    
2022-04-05 00:45:22:937 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,309:9]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,309:46].[@-1,51:54='text',<0>,309:49]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,58:61='exp1',<0>,309:56].[@-1,63:63='p',<0>,309:61]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,67:70='exp2',<0>,309:65].[@-1,72:72='p',<0>,309:70]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,76:81='INSERT',<0>,309:74].[@-1,83:86='line',<0>,309:81]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,90:95='INSERT',<0>,309:88].[@-1,97:99='pos',<0>,309:95]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 translate  
        $instr = funcionesvectores.NewRemove_instr($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
    
2022-04-05 00:45:22:937 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,312:9]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,312:52].[@-1,57:60='text',<0>,312:55]
2022-04-05 00:45:22:937 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,312:62].[@-1,75:75='p',<0>,312:73]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 qattr [@-1,79:84='REMOVE',<0>,312:77].[@-1,86:89='line',<0>,312:84]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 qattr [@-1,93:98='REMOVE',<0>,312:91].[@-1,100:102='pos',<0>,312:98]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 translate  $p = $sent_if_expr.p 
2022-04-05 00:45:22:938 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,317:25]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 qattr [@-1,7:18='sent_if_expr',<0>,317:30].[@-1,20:20='p',<0>,317:43]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 translate  $p = $sent_loop_expr.p 
2022-04-05 00:45:22:938 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,318:24]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 qattr [@-1,7:20='sent_loop_expr',<0>,318:29].[@-1,22:22='p',<0>,318:44]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 translate  $p = $sent_matchexpr.p 
2022-04-05 00:45:22:938 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,319:23]
2022-04-05 00:45:22:938 action-translator LogManager.java:25 qattr [@-1,7:20='sent_matchexpr',<0>,319:28].[@-1,22:22='p',<0>,319:43]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 translate  
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
        
2022-04-05 00:45:22:939 action-translator LogManager.java:25 attr [@-1,11:11='p',<0>,324:9]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 qattr [@-1,40:49='expression',<0>,324:38].[@-1,51:51='p',<0>,324:49]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 qattr [@-1,55:74='matchexpr_listbrazos',<0>,324:53].[@-1,76:76='l',<0>,324:74]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 qattr [@-1,80:93='el_defaultexpr',<0>,324:78].[@-1,95:95='p',<0>,324:93]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 qattr [@-1,99:103='MATCH',<0>,324:97].[@-1,105:108='line',<0>,324:103]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 qattr [@-1,111:115='MATCH',<0>,324:109].[@-1,117:119='pos',<0>,324:115]
2022-04-05 00:45:22:939 action-translator LogManager.java:25 translate 
        var a interfaces.Expresion
        $p = matchexpr.NewMatch_Expr($expression.p, $matchexpr_listbrazos.l, a, $MATCH.line,$MATCH.pos)
    
2022-04-05 00:45:22:939 action-translator LogManager.java:25 attr [@-1,45:45='p',<0>,328:9]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,74:83='expression',<0>,328:38].[@-1,85:85='p',<0>,328:49]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,89:108='matchexpr_listbrazos',<0>,328:53].[@-1,110:110='l',<0>,328:74]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,117:121='MATCH',<0>,328:81].[@-1,123:126='line',<0>,328:87]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,129:133='MATCH',<0>,328:93].[@-1,135:137='pos',<0>,328:99]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 translate 
        $p = matchexpr.NewMatch_Expr($expression.p, arrayList.New(), $el_defaultexpr.p, $MATCH.line,$MATCH.pos) 
    
2022-04-05 00:45:22:940 action-translator LogManager.java:25 attr [@-1,10:10='p',<0>,331:9]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,39:48='expression',<0>,331:38].[@-1,50:50='p',<0>,331:49]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,71:84='el_defaultexpr',<0>,331:70].[@-1,86:86='p',<0>,331:85]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,90:94='MATCH',<0>,331:89].[@-1,96:99='line',<0>,331:95]
2022-04-05 00:45:22:940 action-translator LogManager.java:25 qattr [@-1,102:106='MATCH',<0>,331:101].[@-1,108:110='pos',<0>,331:107]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:941 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($list_brazosexpr.p)
        $l = a
    
2022-04-05 00:45:22:941 action-translator LogManager.java:25 qattr [@-1,47:61='list_brazosexpr',<0>,4:15].[@-1,63:63='p',<0>,4:31]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,5:9]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:941 action-translator LogManager.java:25 translate 
                  $brz.l.Add($list_brazosexpr.p)
                  $l = $brz.l
              
2022-04-05 00:45:22:941 action-translator LogManager.java:25 qattr [@-1,21:23='brz',<0>,10:19].[@-1,25:25='l',<0>,10:23]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 qattr [@-1,32:46='list_brazosexpr',<0>,10:30].[@-1,48:48='p',<0>,10:46]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,11:19]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 qattr [@-1,76:78='brz',<0>,11:24].[@-1,80:80='l',<0>,11:28]
2022-04-05 00:45:22:941 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:942 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($po.p)
        $p = matchexpr.NewBrazo_expr(a, $pi.p, $IGUAL.line , $IGUAL.pos)
     
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,46:47='po',<0>,350:15].[@-1,49:49='p',<0>,350:18]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 attr [@-1,61:61='p',<0>,351:9]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,93:94='pi',<0>,351:41].[@-1,96:96='p',<0>,351:44]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,100:104='IGUAL',<0>,351:48].[@-1,106:109='line',<0>,351:54]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,114:118='IGUAL',<0>,351:62].[@-1,120:122='pos',<0>,351:68]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 translate  $p = matchexpr.NewBrazo_expr( $exp.l , $expression.p ,$IGUAL.line, $IGUAL.pos ) 
2022-04-05 00:45:22:942 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,353:76]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,32:34='exp',<0>,353:106].[@-1,36:36='l',<0>,353:110]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,353:115].[@-1,52:52='p',<0>,353:126]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,56:60='IGUAL',<0>,353:130].[@-1,62:65='line',<0>,353:136]
2022-04-05 00:45:22:942 action-translator LogManager.java:25 qattr [@-1,69:73='IGUAL',<0>,353:143].[@-1,75:77='pos',<0>,353:149]
2022-04-05 00:45:22:943 action-translator LogManager.java:25 translate 
        $g.l.Add($expression.p)
        $l = $g.l
    
2022-04-05 00:45:22:943 action-translator LogManager.java:25 qattr [@-1,10:10='g',<0>,358:9].[@-1,12:12='l',<0>,358:11]
2022-04-05 00:45:22:943 action-translator LogManager.java:25 qattr [@-1,19:28='expression',<0>,358:18].[@-1,30:30='p',<0>,358:29]
2022-04-05 00:45:22:943 action-translator LogManager.java:25 attr [@-1,42:42='l',<0>,359:9]
2022-04-05 00:45:22:943 action-translator LogManager.java:25 qattr [@-1,47:47='g',<0>,359:14].[@-1,49:49='l',<0>,359:16]
2022-04-05 00:45:22:943 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-04-05 00:45:22:943 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,363:15].[@-1,56:56='p',<0>,363:26]
2022-04-05 00:45:22:943 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,364:9]
2022-04-05 00:45:22:944 action-translator LogManager.java:25 translate  $p = matchexpr.NewDefault_Expr($expression.p, $DEFAUL.line, $DEFAUL.pos) 
2022-04-05 00:45:22:944 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,369:44]
2022-04-05 00:45:22:944 action-translator LogManager.java:25 qattr [@-1,33:42='expression',<0>,369:75].[@-1,44:44='p',<0>,369:86]
2022-04-05 00:45:22:944 action-translator LogManager.java:25 qattr [@-1,48:53='DEFAUL',<0>,369:90].[@-1,55:58='line',<0>,369:97]
2022-04-05 00:45:22:944 action-translator LogManager.java:25 qattr [@-1,62:67='DEFAUL',<0>,369:104].[@-1,69:71='pos',<0>,369:111]
2022-04-05 00:45:22:944 action-translator LogManager.java:25 translate  $te = 0 
2022-04-05 00:45:22:944 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,374:14]
2022-04-05 00:45:22:945 action-translator LogManager.java:25 translate  $te = 1 
2022-04-05 00:45:22:945 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,375:14]
2022-04-05 00:45:22:945 action-translator LogManager.java:25 translate  $te = 2 
2022-04-05 00:45:22:945 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,376:12]
2022-04-05 00:45:22:945 action-translator LogManager.java:25 translate  $te = 3
2022-04-05 00:45:22:945 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,377:16]
2022-04-05 00:45:22:945 action-translator LogManager.java:25 translate  $te = 7 
2022-04-05 00:45:22:945 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,378:18]
2022-04-05 00:45:22:945 action-translator LogManager.java:25 translate  $te = 8 
2022-04-05 00:45:22:945 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,379:18]
2022-04-05 00:45:22:945 action-translator LogManager.java:25 translate  $te = 13 
2022-04-05 00:45:22:945 action-translator LogManager.java:25 attr [@-1,2:3='te',<0>,380:18]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 translate  $instr = instruction.NewAsignacion($ID.text, $expression.p, "" ,$ID.line, $ID.pos) 
2022-04-05 00:45:22:946 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,384:32]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,384:67].[@-1,40:43='text',<0>,384:70]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,384:77].[@-1,58:58='p',<0>,384:88]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 qattr [@-1,66:67='ID',<0>,384:96].[@-1,69:72='line',<0>,384:99]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 qattr [@-1,76:77='ID',<0>,384:106].[@-1,79:81='pos',<0>,384:109]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 translate  $instr = instruction.NewAsignacion($id1.text, $expression.p, $id2.text ,$ID.line, $ID.pos) 
2022-04-05 00:45:22:946 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,385:47]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 qattr [@-1,37:39='id1',<0>,385:82].[@-1,41:44='text',<0>,385:86]
2022-04-05 00:45:22:946 action-translator LogManager.java:25 qattr [@-1,48:57='expression',<0>,385:93].[@-1,59:59='p',<0>,385:104]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,63:65='id2',<0>,385:108].[@-1,67:70='text',<0>,385:112]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,74:75='ID',<0>,385:119].[@-1,77:80='line',<0>,385:122]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,84:85='ID',<0>,385:129].[@-1,87:89='pos',<0>,385:132]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 translate  
        var a interfaces.Expresion
        $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p,a, $IF.line, $IF.pos   ) 
        
2022-04-05 00:45:22:947 action-translator LogManager.java:25 attr [@-1,46:46='p',<0>,391:9]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,77:79='ini',<0>,391:40].[@-1,81:81='p',<0>,391:44]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,85:88='exp1',<0>,391:48].[@-1,90:90='p',<0>,391:53]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,96:97='IF',<0>,391:59].[@-1,99:102='line',<0>,391:62]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,106:107='IF',<0>,391:69].[@-1,109:111='pos',<0>,391:72]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 translate  $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p, $exp2.p, $IF.line, $IF.pos ) 
2022-04-05 00:45:22:947 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,393:92]
2022-04-05 00:45:22:947 action-translator LogManager.java:25 qattr [@-1,33:35='ini',<0>,393:123].[@-1,37:37='p',<0>,393:127]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,41:44='exp1',<0>,393:131].[@-1,46:46='p',<0>,393:136]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,50:53='exp2',<0>,393:140].[@-1,55:55='p',<0>,393:145]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,59:60='IF',<0>,393:149].[@-1,62:65='line',<0>,393:152]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,69:70='IF',<0>,393:159].[@-1,72:74='pos',<0>,393:162]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 translate  $p = sentenciasexpr.NewIf_expr($ini.p, $exp1.p,$sent.p, $IF.line, $IF.pos   )  
2022-04-05 00:45:22:948 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,394:82]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,33:35='ini',<0>,394:113].[@-1,37:37='p',<0>,394:117]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,41:44='exp1',<0>,394:121].[@-1,46:46='p',<0>,394:126]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,49:52='sent',<0>,394:129].[@-1,54:54='p',<0>,394:134]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,58:59='IF',<0>,394:138].[@-1,61:64='line',<0>,394:141]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 qattr [@-1,68:69='IF',<0>,394:148].[@-1,71:73='pos',<0>,394:151]
2022-04-05 00:45:22:948 action-translator LogManager.java:25 translate  $p = sentenciasexpr.NewLoop_expr($instrucciones.l,$LOOP.line,$LOOP.pos) 
2022-04-05 00:45:22:949 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,398:41]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,35:47='instrucciones',<0>,398:74].[@-1,49:49='l',<0>,398:88]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,52:55='LOOP',<0>,398:91].[@-1,57:60='line',<0>,398:96]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,63:66='LOOP',<0>,398:102].[@-1,68:70='pos',<0>,398:107]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 translate  
         a := arrayList.New()
        $instr = instruction.NewImprimir($expression.p, a, $PRINT.line, $PRINT.pos) 
        
2022-04-05 00:45:22:949 action-translator LogManager.java:25 attr [@-1,41:45='instr',<0>,404:9]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,74:83='expression',<0>,404:42].[@-1,85:85='p',<0>,404:53]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,92:96='PRINT',<0>,404:60].[@-1,98:101='line',<0>,404:66]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,105:109='PRINT',<0>,404:73].[@-1,111:113='pos',<0>,404:79]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 translate   $instr = instruction.NewImprimir($expression.p, $li.l, $PRINT.line, $PRINT.pos)  
2022-04-05 00:45:22:949 action-translator LogManager.java:25 attr [@-1,3:7='instr',<0>,406:68]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,36:45='expression',<0>,406:101].[@-1,47:47='p',<0>,406:112]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,51:52='li',<0>,406:116].[@-1,54:54='l',<0>,406:119]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,58:62='PRINT',<0>,406:123].[@-1,64:67='line',<0>,406:129]
2022-04-05 00:45:22:949 action-translator LogManager.java:25 qattr [@-1,71:75='PRINT',<0>,406:136].[@-1,77:79='pos',<0>,406:142]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
    
2022-04-05 00:45:22:950 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression.p)  
                  $l = $li.l
                  
2022-04-05 00:45:22:950 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,10:19].[@-1,25:25='l',<0>,10:22]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,10:29].[@-1,43:43='p',<0>,10:40]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 attr [@-1,68:68='l',<0>,11:19]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 qattr [@-1,73:74='li',<0>,11:24].[@-1,76:76='l',<0>,11:27]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression_vec_Arr.p)
        $l = a
    
2022-04-05 00:45:22:950 action-translator LogManager.java:25 qattr [@-1,47:64='expression_vec_Arr',<0>,4:15].[@-1,66:66='p',<0>,4:34]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 attr [@-1,79:79='l',<0>,5:9]
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:950 action-translator LogManager.java:25 translate  
                  $li.l.Add($expression_vec_Arr.p)  
                  $l = $li.l
                  
2022-04-05 00:45:22:950 action-translator LogManager.java:25 qattr [@-1,22:23='li',<0>,10:19].[@-1,25:25='l',<0>,10:22]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 qattr [@-1,32:49='expression_vec_Arr',<0>,10:29].[@-1,51:51='p',<0>,10:48]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,11:19]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 qattr [@-1,81:82='li',<0>,11:24].[@-1,84:84='l',<0>,11:27]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:951 action-translator LogManager.java:25 translate  $instr = sentenciacontrol.NewIf($expression.p, $instrucciones.l, arrayList.New(), $IF.line,$IF.pos) 
2022-04-05 00:45:22:951 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,436:50]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,436:82].[@-1,45:45='p',<0>,436:93]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 qattr [@-1,49:61='instrucciones',<0>,436:97].[@-1,63:63='l',<0>,436:111]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 qattr [@-1,84:85='IF',<0>,436:132].[@-1,87:90='line',<0>,436:135]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 qattr [@-1,93:94='IF',<0>,436:141].[@-1,96:98='pos',<0>,436:144]
2022-04-05 00:45:22:951 action-translator LogManager.java:25 translate  $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, $ins2.l, $IF.line,$IF.pos) 
2022-04-05 00:45:22:951 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,437:92]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,437:124].[@-1,45:45='p',<0>,437:135]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,49:52='ins1',<0>,437:139].[@-1,54:54='l',<0>,437:144]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,58:61='ins2',<0>,437:148].[@-1,63:63='l',<0>,437:153]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,67:68='IF',<0>,437:157].[@-1,70:73='line',<0>,437:160]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,76:77='IF',<0>,437:166].[@-1,79:81='pos',<0>,437:169]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($sent.instr)
        $instr = sentenciacontrol.NewIf($expression.p, $ins1.l, a , $IF.line,$IF.pos) 
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,46:49='sent',<0>,440:15].[@-1,51:55='instr',<0>,440:20]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 attr [@-1,67:71='instr',<0>,441:9]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,99:108='expression',<0>,441:41].[@-1,110:110='p',<0>,441:52]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,114:117='ins1',<0>,441:56].[@-1,119:119='l',<0>,441:61]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,127:128='IF',<0>,441:69].[@-1,130:133='line',<0>,441:72]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,136:137='IF',<0>,441:78].[@-1,139:141='pos',<0>,441:81]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 translate  $instr = match.NewMatch($expression.p, $match_listbrazos.l, $el_default.instr, $MATCH.line, $MATCH.pos) 
2022-04-05 00:45:22:952 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,444:66]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,26:35='expression',<0>,444:90].[@-1,37:37='p',<0>,444:101]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,41:56='match_listbrazos',<0>,444:105].[@-1,58:58='l',<0>,444:122]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,62:71='el_default',<0>,444:126].[@-1,73:77='instr',<0>,444:137]
2022-04-05 00:45:22:952 action-translator LogManager.java:25 qattr [@-1,81:85='MATCH',<0>,444:145].[@-1,87:90='line',<0>,444:151]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,94:98='MATCH',<0>,444:158].[@-1,100:102='pos',<0>,444:164]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 translate $instr = match.NewMatch($expression.p, arrayList.New(), $el_default.instr, $MATCH.line, $MATCH.pos)
2022-04-05 00:45:22:953 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,445:49]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,25:34='expression',<0>,445:73].[@-1,36:36='p',<0>,445:84]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,57:66='el_default',<0>,445:105].[@-1,68:72='instr',<0>,445:116]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,76:80='MATCH',<0>,445:124].[@-1,82:85='line',<0>,445:130]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,89:93='MATCH',<0>,445:137].[@-1,95:97='pos',<0>,445:143]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:953 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($list_brazos.instr)
        $l = a
    
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,47:57='list_brazos',<0>,4:15].[@-1,59:63='instr',<0>,4:27]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 attr [@-1,76:76='l',<0>,5:9]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:953 action-translator LogManager.java:25 translate  
              $braz.l.Add($list_brazos.instr)
               $l = $braz.l
               
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,18:21='braz',<0>,10:15].[@-1,23:23='l',<0>,10:20]
2022-04-05 00:45:22:953 action-translator LogManager.java:25 qattr [@-1,30:40='list_brazos',<0>,10:27].[@-1,42:46='instr',<0>,10:39]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 attr [@-1,66:66='l',<0>,11:16]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,71:74='braz',<0>,11:21].[@-1,76:76='l',<0>,11:26]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:954 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($expression.p)
        $instr = match.NewBrazo(a, $instrucciones.l, $IGUAL.line, $IGUAL.pos) 
        
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,46:55='expression',<0>,462:15].[@-1,57:57='p',<0>,462:26]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 attr [@-1,69:73='instr',<0>,463:9]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,96:108='instrucciones',<0>,463:36].[@-1,110:110='l',<0>,463:50]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,114:118='IGUAL',<0>,463:54].[@-1,120:123='line',<0>,463:60]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,127:131='IGUAL',<0>,463:67].[@-1,133:135='pos',<0>,463:73]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 translate  $instr = match.NewBrazo($exprs.l, $instrucciones.l, $IGUAL.line, $IGUAL.pos)  
2022-04-05 00:45:22:954 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,465:81]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,26:30='exprs',<0>,465:105].[@-1,32:32='l',<0>,465:111]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,36:48='instrucciones',<0>,465:115].[@-1,50:50='l',<0>,465:129]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,54:58='IGUAL',<0>,465:133].[@-1,60:63='line',<0>,465:139]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 qattr [@-1,67:71='IGUAL',<0>,465:146].[@-1,73:75='pos',<0>,465:152]
2022-04-05 00:45:22:954 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo(a, b, $IGUAL.line, $IGUAL.pos) 
        
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,468:15].[@-1,56:56='p',<0>,468:26]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,103:113='instruccion',<0>,470:15].[@-1,115:119='instr',<0>,470:27]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 attr [@-1,131:135='instr',<0>,471:9]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,161:165='IGUAL',<0>,471:39].[@-1,167:170='line',<0>,471:45]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,174:178='IGUAL',<0>,471:52].[@-1,180:182='pos',<0>,471:58]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 translate 
        b := arrayList.New()
        b.Add($instruccion.instr)
        $instr = match.NewBrazo($exprs.l, b, $IGUAL.line, $IGUAL.pos)
        
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,45:55='instruccion',<0>,475:15].[@-1,57:61='instr',<0>,475:27]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 attr [@-1,73:77='instr',<0>,476:9]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,97:101='exprs',<0>,476:33].[@-1,103:103='l',<0>,476:39]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,110:114='IGUAL',<0>,476:46].[@-1,116:119='line',<0>,476:52]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,123:127='IGUAL',<0>,476:59].[@-1,129:131='pos',<0>,476:65]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:955 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($expression.p)
        $l = a
        
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,47:56='expression',<0>,4:15].[@-1,58:58='p',<0>,4:26]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 attr [@-1,71:71='l',<0>,5:9]
2022-04-05 00:45:22:955 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:955 action-translator LogManager.java:25 translate  
                  $h.l.Add($expression.p)
                  $l = $h.l
               
2022-04-05 00:45:22:955 action-translator LogManager.java:25 qattr [@-1,22:22='h',<0>,10:19].[@-1,24:24='l',<0>,10:21]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,10:28].[@-1,42:42='p',<0>,10:39]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 attr [@-1,65:65='l',<0>,11:19]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,70:70='h',<0>,11:24].[@-1,72:72='l',<0>,11:26]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:956 action-translator LogManager.java:25 translate  $instr = match.NewDefault($instrucciones.l , $DEFAUL.line, $DEFAUL.pos) 
2022-04-05 00:45:22:956 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,494:55]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,28:40='instrucciones',<0>,494:81].[@-1,42:42='l',<0>,494:95]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,47:52='DEFAUL',<0>,494:100].[@-1,54:57='line',<0>,494:107]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,61:66='DEFAUL',<0>,494:114].[@-1,68:70='pos',<0>,494:121]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 translate  
        a := arrayList.New()
        a.Add($instruccion.instr)
        $instr = match.NewDefault(a , $DEFAUL.line, $DEFAUL.pos)  
        
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,46:56='instruccion',<0>,497:15].[@-1,58:62='instr',<0>,497:27]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 attr [@-1,74:78='instr',<0>,498:9]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,104:109='DEFAUL',<0>,498:39].[@-1,111:114='line',<0>,498:46]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,118:123='DEFAUL',<0>,498:53].[@-1,125:127='pos',<0>,498:60]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 translate  $instr = sentenciaciclica.NewLoop($instrucciones.l,$LOOP.line,$LOOP.pos) 
2022-04-05 00:45:22:956 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,503:41]
2022-04-05 00:45:22:956 action-translator LogManager.java:25 qattr [@-1,36:48='instrucciones',<0>,503:75].[@-1,50:50='l',<0>,503:89]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,53:56='LOOP',<0>,503:92].[@-1,58:61='line',<0>,503:97]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,64:67='LOOP',<0>,503:103].[@-1,69:71='pos',<0>,503:108]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 translate  $instr = sentenciaciclica.NewWhile($expression.p , $instrucciones.l , $WHILE.line, $WHILE.pos) 
2022-04-05 00:45:22:957 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,507:55]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,37:46='expression',<0>,507:90].[@-1,48:48='p',<0>,507:101]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,53:65='instrucciones',<0>,507:106].[@-1,67:67='l',<0>,507:120]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,72:76='WHILE',<0>,507:125].[@-1,78:81='line',<0>,507:131]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,85:89='WHILE',<0>,507:138].[@-1,91:93='pos',<0>,507:144]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 translate 
        var a interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, $exp1.p, $exp2.p,a, $instrucciones.l, $IN.line, $IN.pos )
    
2022-04-05 00:45:22:957 action-translator LogManager.java:25 attr [@-1,45:49='instr',<0>,513:9]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,513:45].[@-1,84:87='text',<0>,513:48]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,91:94='exp1',<0>,513:55].[@-1,96:96='p',<0>,513:60]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,100:103='exp2',<0>,513:64].[@-1,105:105='p',<0>,513:69]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,111:123='instrucciones',<0>,513:75].[@-1,125:125='l',<0>,513:89]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,129:130='IN',<0>,513:93].[@-1,132:135='line',<0>,513:96]
2022-04-05 00:45:22:957 action-translator LogManager.java:25 qattr [@-1,139:140='IN',<0>,513:103].[@-1,142:144='pos',<0>,513:106]
2022-04-05 00:45:22:958 action-translator LogManager.java:25 translate 
        var a,b interfaces.Expresion
        $instr = sentenciaciclica.NewForIn( $ID.text, a,b, $exp.p , $instrucciones.l, $IN.line, $IN.pos )
    
2022-04-05 00:45:22:958 action-translator LogManager.java:25 attr [@-1,47:51='instr',<0>,517:9]
2022-04-05 00:45:22:958 action-translator LogManager.java:25 qattr [@-1,83:84='ID',<0>,517:45].[@-1,86:89='text',<0>,517:48]
2022-04-05 00:45:22:958 action-translator LogManager.java:25 qattr [@-1,98:100='exp',<0>,517:60].[@-1,102:102='p',<0>,517:64]
2022-04-05 00:45:22:958 action-translator LogManager.java:25 qattr [@-1,107:119='instrucciones',<0>,517:69].[@-1,121:121='l',<0>,517:83]
2022-04-05 00:45:22:958 action-translator LogManager.java:25 qattr [@-1,125:126='IN',<0>,517:87].[@-1,128:131='line',<0>,517:90]
2022-04-05 00:45:22:958 action-translator LogManager.java:25 qattr [@-1,135:136='IN',<0>,517:97].[@-1,138:140='pos',<0>,517:100]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:959 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)
2022-04-05 00:45:22:959 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:251]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,2:282].[@-1,37:37='p',<0>,2:287]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,2:290].[@-1,43:46='text',<0>,2:293]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,2:299].[@-1,54:54='p',<0>,2:304]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,63:65='INT',<0>,2:313].[@-1,67:70='line',<0>,2:317]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,73:75='INT',<0>,2:323].[@-1,77:79='pos',<0>,2:327]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)
2022-04-05 00:45:22:959 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:251]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,3:282].[@-1,37:37='p',<0>,3:287]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,3:290].[@-1,43:46='text',<0>,3:293]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,3:299].[@-1,54:54='p',<0>,3:304]
2022-04-05 00:45:22:959 action-translator LogManager.java:25 qattr [@-1,63:67='FLOAT',<0>,3:313].[@-1,69:72='line',<0>,3:319]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,75:79='FLOAT',<0>,3:325].[@-1,81:83='pos',<0>,3:331]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 translate  $p = $expression_vec_Arr.p
2022-04-05 00:45:22:960 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:92]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,7:24='expression_vec_Arr',<0>,4:97].[@-1,26:26='p',<0>,4:116]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)
2022-04-05 00:45:22:960 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:88]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,36:43='operador',<0>,5:123].[@-1,45:45='p',<0>,5:132]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,5:135].[@-1,51:54='text',<0>,5:138]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,5:153].[@-1,69:72='line',<0>,5:156]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,75:76='op',<0>,5:162].[@-1,78:80='pos',<0>,5:165]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 translate  
        var a interfaces.Expresion
        var b interfaces.Expresion
        $p = arrays.NewArray( $list_expre_vec_arr.l, a , b , $CORCHA.line, $CORCHA.pos  ) 
        
2022-04-05 00:45:22:960 action-translator LogManager.java:25 attr [@-1,84:84='p',<0>,9:9]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,106:123='list_expre_vec_arr',<0>,9:31].[@-1,125:125='l',<0>,9:50]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,137:142='CORCHA',<0>,9:62].[@-1,144:147='line',<0>,9:69]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,151:156='CORCHA',<0>,9:76].[@-1,158:160='pos',<0>,9:83]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 translate  $p = arrays.NewArray( arrayList.New(), $exp1.p, $exp2.p , $CORCHA.line, $CORCHA.pos) 
2022-04-05 00:45:22:960 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:163]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,41:44='exp1',<0>,11:202].[@-1,46:46='p',<0>,11:207]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,50:53='exp2',<0>,11:211].[@-1,55:55='p',<0>,11:216]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,60:65='CORCHA',<0>,11:221].[@-1,67:70='line',<0>,11:228]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,74:79='CORCHA',<0>,11:235].[@-1,81:83='pos',<0>,11:242]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) 
2022-04-05 00:45:22:960 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:135]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,34:37='exp4',<0>,12:167].[@-1,39:39='p',<0>,12:172]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,43:49='TOCHARS',<0>,12:176].[@-1,51:54='line',<0>,12:184]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 qattr [@-1,58:64='TOCHARS',<0>,12:191].[@-1,66:68='pos',<0>,12:199]
2022-04-05 00:45:22:960 action-translator LogManager.java:25 translate  $p = $vector_expr.p 
2022-04-05 00:45:22:960 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:41]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,7:17='vector_expr',<0>,13:46].[@-1,19:19='p',<0>,13:58]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 translate  $p = $primitivo.p 
2022-04-05 00:45:22:961 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:39]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,7:15='primitivo',<0>,14:44].[@-1,17:17='p',<0>,14:54]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-04-05 00:45:22:961 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-04-05 00:45:22:961 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:135]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,17:166].[@-1,37:37='p',<0>,17:171]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,17:174].[@-1,43:46='text',<0>,17:177]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,17:183].[@-1,54:54='p',<0>,17:188]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,63:64='op',<0>,17:197].[@-1,66:69='line',<0>,17:200]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,72:73='op',<0>,17:206].[@-1,75:77='pos',<0>,17:209]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-04-05 00:45:22:961 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-04-05 00:45:22:961 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,18:167]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,18:198].[@-1,37:37='p',<0>,18:203]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,18:206].[@-1,44:47='text',<0>,18:210]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,18:216].[@-1,55:55='p',<0>,18:221]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,18:230].[@-1,68:71='line',<0>,18:234]
2022-04-05 00:45:22:961 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,18:240].[@-1,78:80='pos',<0>,18:244]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-04-05 00:45:22:962 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-04-05 00:45:22:962 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,19:168]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,19:199].[@-1,37:37='p',<0>,19:204]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,19:207].[@-1,44:47='text',<0>,19:211]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,19:217].[@-1,55:55='p',<0>,19:222]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,19:231].[@-1,68:71='line',<0>,19:235]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,19:241].[@-1,78:80='pos',<0>,19:245]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-04-05 00:45:22:962 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-04-05 00:45:22:962 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,20:284]
2022-04-05 00:45:22:962 action-translator LogManager.java:25 qattr [@-1,40:43='opIz',<0>,20:323].[@-1,45:45='p',<0>,20:328]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,20:331].[@-1,51:54='text',<0>,20:334]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,57:60='opDe',<0>,20:340].[@-1,62:62='p',<0>,20:345]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,71:72='op',<0>,20:354].[@-1,74:77='line',<0>,20:357]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,80:81='op',<0>,20:363].[@-1,83:85='pos',<0>,20:366]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,21:163]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,36:39='opIz',<0>,21:198].[@-1,41:41='p',<0>,21:203]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,44:46='ope',<0>,21:206].[@-1,48:51='text',<0>,21:210]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,54:57='opDe',<0>,21:216].[@-1,59:59='p',<0>,21:221]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,68:70='ope',<0>,21:230].[@-1,72:75='line',<0>,21:234]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 qattr [@-1,78:80='ope',<0>,21:240].[@-1,82:84='pos',<0>,21:244]
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:963 action-translator LogManager.java:25 translate 
        a := arrayList.New()
        a.Add($atributos_struct_decl_exp.s)
        $l = a
    
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,47:71='atributos_struct_decl_exp',<0>,4:15].[@-1,73:73='s',<0>,4:41]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 attr [@-1,86:86='l',<0>,5:9]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:964 action-translator LogManager.java:25 translate 
                  $li.l.Add($asd.s)
                  $l = $li.l
              
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,21:22='li',<0>,10:19].[@-1,24:24='l',<0>,10:22]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,31:33='asd',<0>,10:29].[@-1,35:35='s',<0>,10:33]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 attr [@-1,58:58='l',<0>,11:19]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,63:64='li',<0>,11:24].[@-1,66:66='l',<0>,11:27]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:964 action-translator LogManager.java:25 translate $s = interfaces.Symbol{ Id: $ID.text, Valor: $exp2.p } 
2022-04-05 00:45:22:964 action-translator LogManager.java:25 attr [@-1,1:1='s',<0>,556:30]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,556:58].[@-1,32:35='text',<0>,556:61]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,46:49='exp2',<0>,556:75].[@-1,51:51='p',<0>,556:80]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 translate $s = interfaces.Symbol{ Id: $ID.text,  Valor:$exp.p }
2022-04-05 00:45:22:964 action-translator LogManager.java:25 attr [@-1,1:1='s',<0>,557:37]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,557:65].[@-1,32:35='text',<0>,557:68]
2022-04-05 00:45:22:964 action-translator LogManager.java:25 qattr [@-1,46:48='exp',<0>,557:82].[@-1,50:50='p',<0>,557:86]
2022-04-05 00:45:22:966 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:966 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$INT.line,$INT.pos)
2022-04-05 00:45:22:966 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:235]
2022-04-05 00:45:22:966 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,2:266].[@-1,37:37='p',<0>,2:271]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,2:274].[@-1,43:46='text',<0>,2:277]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,2:283].[@-1,54:54='p',<0>,2:288]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,63:65='INT',<0>,2:297].[@-1,67:70='line',<0>,2:301]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,73:75='INT',<0>,2:307].[@-1,77:79='pos',<0>,2:311]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$FLOAT.line,$FLOAT.pos)
2022-04-05 00:45:22:967 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:235]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,3:266].[@-1,37:37='p',<0>,3:271]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,3:274].[@-1,43:46='text',<0>,3:277]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,3:283].[@-1,54:54='p',<0>,3:288]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,63:67='FLOAT',<0>,3:297].[@-1,69:72='line',<0>,3:303]
2022-04-05 00:45:22:967 action-translator LogManager.java:25 qattr [@-1,75:79='FLOAT',<0>,3:309].[@-1,81:83='pos',<0>,3:315]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opDe.p,$ope.text,nil,true,$ope.line,$ope.pos)
2022-04-05 00:45:22:968 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,4:77]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,32:35='opDe',<0>,4:108].[@-1,37:37='p',<0>,4:113]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,4:116].[@-1,44:47='text',<0>,4:120]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,59:61='ope',<0>,4:135].[@-1,63:66='line',<0>,4:139]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,69:71='ope',<0>,4:145].[@-1,73:75='pos',<0>,4:149]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 translate  $p = $expression.p
2022-04-05 00:45:22:968 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:84]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,5:89].[@-1,18:18='p',<0>,5:100]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 translate  $p = $expression.p
2022-04-05 00:45:22:968 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:84]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,6:89].[@-1,18:18='p',<0>,6:100]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($operador.p,$op.text,nil,true,$op.line,$op.pos)
2022-04-05 00:45:22:968 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:81]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,36:43='operador',<0>,7:116].[@-1,45:45='p',<0>,7:125]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,7:128].[@-1,51:54='text',<0>,7:131]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,7:146].[@-1,69:72='line',<0>,7:149]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 qattr [@-1,75:76='op',<0>,7:155].[@-1,78:80='pos',<0>,7:158]
2022-04-05 00:45:22:968 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewRemove_exp($ID.text, $expression.p, $REMOVE.line, $REMOVE.pos) 
2022-04-05 00:45:22:968 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:149]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,8:186].[@-1,42:45='text',<0>,8:189]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,49:58='expression',<0>,8:196].[@-1,60:60='p',<0>,8:207]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,64:69='REMOVE',<0>,8:211].[@-1,71:74='line',<0>,8:218]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,78:83='REMOVE',<0>,8:225].[@-1,85:87='pos',<0>,8:232]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 translate  $p = structs.NewStruct( $ID.text, $li.l, $LLAVEA.line, $LLAVEA.pos ) 
2022-04-05 00:45:22:969 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:121]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,26:27='ID',<0>,9:145].[@-1,29:32='text',<0>,9:148]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,36:37='li',<0>,9:155].[@-1,39:39='l',<0>,9:158]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,43:48='LLAVEA',<0>,9:162].[@-1,50:53='line',<0>,9:169]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,57:62='LLAVEA',<0>,9:176].[@-1,64:66='pos',<0>,9:183]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 translate  $p =  $llamadas_structs.p 
2022-04-05 00:45:22:969 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:46]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,8:23='llamadas_structs',<0>,10:52].[@-1,25:25='p',<0>,10:69]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 translate  $p = $llamada_expre.p 
2022-04-05 00:45:22:969 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:43]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,7:19='llamada_expre',<0>,11:48].[@-1,21:21='p',<0>,11:62]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 translate  $p = $primitivo.p 
2022-04-05 00:45:22:969 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:39]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 qattr [@-1,7:15='primitivo',<0>,12:44].[@-1,17:17='p',<0>,12:54]
2022-04-05 00:45:22:969 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2022-04-05 00:45:22:970 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-04-05 00:45:22:970 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:127]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,15:158].[@-1,37:37='p',<0>,15:163]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,15:166].[@-1,43:46='text',<0>,15:169]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,49:52='opDe',<0>,15:175].[@-1,54:54='p',<0>,15:180]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,63:64='op',<0>,15:189].[@-1,66:69='line',<0>,15:192]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,72:73='op',<0>,15:198].[@-1,75:77='pos',<0>,15:201]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2022-04-05 00:45:22:970 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-04-05 00:45:22:970 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:159]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,16:190].[@-1,37:37='p',<0>,16:195]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,16:198].[@-1,44:47='text',<0>,16:202]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,16:208].[@-1,55:55='p',<0>,16:213]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,16:222].[@-1,68:71='line',<0>,16:226]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,16:232].[@-1,78:80='pos',<0>,16:236]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-04-05 00:45:22:970 action-translator LogManager.java:25 translate $p=Operacion.NewOperacion_Arit($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-04-05 00:45:22:970 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:160]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,17:191].[@-1,37:37='p',<0>,17:196]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,40:42='ope',<0>,17:199].[@-1,44:47='text',<0>,17:203]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,17:209].[@-1,55:55='p',<0>,17:214]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,64:66='ope',<0>,17:223].[@-1,68:71='line',<0>,17:227]
2022-04-05 00:45:22:970 action-translator LogManager.java:25 qattr [@-1,74:76='ope',<0>,17:233].[@-1,78:80='pos',<0>,17:237]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-04-05 00:45:22:971 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Relacional($opIz.p,$op.text,$opDe.p,false,$op.line,$op.pos)
2022-04-05 00:45:22:971 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,18:278]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,40:43='opIz',<0>,18:317].[@-1,45:45='p',<0>,18:322]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,48:49='op',<0>,18:325].[@-1,51:54='text',<0>,18:328]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,57:60='opDe',<0>,18:334].[@-1,62:62='p',<0>,18:339]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,71:72='op',<0>,18:348].[@-1,74:77='line',<0>,18:351]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,80:81='op',<0>,18:357].[@-1,83:85='pos',<0>,18:360]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-04-05 00:45:22:971 action-translator LogManager.java:25 translate $p = Operacion.NewOperacion_Logica($opIz.p,$ope.text,$opDe.p,false,$ope.line,$ope.pos)
2022-04-05 00:45:22:971 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,19:158]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,36:39='opIz',<0>,19:193].[@-1,41:41='p',<0>,19:198]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,44:46='ope',<0>,19:201].[@-1,48:51='text',<0>,19:205]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,54:57='opDe',<0>,19:211].[@-1,59:59='p',<0>,19:216]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,68:70='ope',<0>,19:225].[@-1,72:75='line',<0>,19:229]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,78:80='ope',<0>,19:235].[@-1,82:84='pos',<0>,19:239]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2022-04-05 00:45:22:971 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewLen($exp8.p, $LEN.line, $LEN.pos) 
2022-04-05 00:45:22:971 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,20:158]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,32:35='exp8',<0>,20:188].[@-1,37:37='p',<0>,20:193]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,41:43='LEN',<0>,20:197].[@-1,45:48='line',<0>,20:201]
2022-04-05 00:45:22:971 action-translator LogManager.java:25 qattr [@-1,52:54='LEN',<0>,20:208].[@-1,56:58='pos',<0>,20:212]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-04-05 00:45:22:972 action-translator LogManager.java:25 translate  $p = funcionesvectores.NewContains($exp8.p, $expression.p, $CONTAINS.line, $CONTAINS.pos ) 
2022-04-05 00:45:22:972 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,21:216]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,37:40='exp8',<0>,21:251].[@-1,42:42='p',<0>,21:256]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,46:55='expression',<0>,21:260].[@-1,57:57='p',<0>,21:271]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,61:68='CONTAINS',<0>,21:275].[@-1,70:73='line',<0>,21:284]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,77:84='CONTAINS',<0>,21:291].[@-1,86:88='pos',<0>,21:300]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-04-05 00:45:22:972 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToChar($exp4.p, $TOCHARS.line, $TOCHARS.pos) 
2022-04-05 00:45:22:972 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,22:162]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,34:37='exp4',<0>,22:194].[@-1,39:39='p',<0>,22:199]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,43:49='TOCHARS',<0>,22:203].[@-1,51:54='line',<0>,22:211]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,58:64='TOCHARS',<0>,22:218].[@-1,66:68='pos',<0>,22:226]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-04-05 00:45:22:972 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToString($exp4.p, $TOSTRING.line, $TOSTRING.pos) 
2022-04-05 00:45:22:972 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,23:163]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,36:39='exp4',<0>,23:197].[@-1,41:41='p',<0>,23:202]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,45:52='TOSTRING',<0>,23:206].[@-1,54:57='line',<0>,23:215]
2022-04-05 00:45:22:972 action-translator LogManager.java:25 qattr [@-1,61:68='TOSTRING',<0>,23:222].[@-1,70:72='pos',<0>,23:231]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewToString($exp4.p, $TOOWNED.line, $TOOWNED.pos) 
2022-04-05 00:45:22:973 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,24:160]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,36:39='exp4',<0>,24:194].[@-1,41:41='p',<0>,24:199]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,45:51='TOOWNED',<0>,24:203].[@-1,53:56='line',<0>,24:211]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,60:66='TOOWNED',<0>,24:218].[@-1,68:70='pos',<0>,24:226]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate  $p = casteos.NewCasteo($exp5.p, $tipo.te, $CASTEO.line , $CASTEO.pos ) 
2022-04-05 00:45:22:973 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,25:116]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,25:28='exp5',<0>,25:139].[@-1,30:30='p',<0>,25:144]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,34:37='tipo',<0>,25:148].[@-1,39:40='te',<0>,25:153]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,44:49='CASTEO',<0>,25:158].[@-1,51:54='line',<0>,25:165]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,59:64='CASTEO',<0>,25:173].[@-1,66:68='pos',<0>,25:180]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewAbsoluto($exp6.p, $ABOSLU.line, $ABOSLU.pos) 
2022-04-05 00:45:22:973 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,26:159]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,36:39='exp6',<0>,26:193].[@-1,41:41='p',<0>,26:198]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,45:50='ABOSLU',<0>,26:202].[@-1,52:55='line',<0>,26:209]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 qattr [@-1,59:64='ABOSLU',<0>,26:216].[@-1,66:68='pos',<0>,26:223]
2022-04-05 00:45:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewRaizCuadrada($exp7.p, $ABOSLU.line, $ABOSLU.pos) 
2022-04-05 00:45:22:974 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,27:160]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 qattr [@-1,40:43='exp7',<0>,27:198].[@-1,45:45='p',<0>,27:203]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 qattr [@-1,49:54='ABOSLU',<0>,27:207].[@-1,56:59='line',<0>,27:214]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 qattr [@-1,63:68='ABOSLU',<0>,27:221].[@-1,70:72='pos',<0>,27:228]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate  $p = funcionesnativas.NewClone($exp9.p, $CLONATION.line, $CLONATION.pos) 
2022-04-05 00:45:22:974 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,28:162]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 qattr [@-1,33:36='exp9',<0>,28:193].[@-1,38:38='p',<0>,28:198]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 qattr [@-1,42:50='CLONATION',<0>,28:202].[@-1,52:55='line',<0>,28:212]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 qattr [@-1,59:67='CLONATION',<0>,28:219].[@-1,69:71='pos',<0>,28:229]
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-05 00:45:22:974 action-translator LogManager.java:25 translate  $p = instruction.NewLlamada($ID.text, arrayList.New(), $PARA.line, $PARA.pos) 
2022-04-05 00:45:22:975 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,589:23]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,589:51].[@-1,33:36='text',<0>,589:54]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,57:60='PARA',<0>,589:78].[@-1,62:65='line',<0>,589:83]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,69:72='PARA',<0>,589:90].[@-1,74:76='pos',<0>,589:95]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 translate  $p = instruction.NewLlamada($ID.text, $li.l, $PARA.line, $PARA.pos) 
2022-04-05 00:45:22:975 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,590:39]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,590:67].[@-1,33:36='text',<0>,590:70]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,40:41='li',<0>,590:77].[@-1,43:43='l',<0>,590:80]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,47:50='PARA',<0>,590:84].[@-1,52:55='line',<0>,590:89]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,59:62='PARA',<0>,590:96].[@-1,64:66='pos',<0>,590:101]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 translate  
            num, err:= strconv.Atoi($NUMBER.text)
            if err !=nil{ 
                fmt.Println(err)
            }   
            $p = expresion.NewPrimitivo (num, interfaces.INTEGER)
     
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,39:44='NUMBER',<0>,596:37].[@-1,46:49='text',<0>,596:44]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 attr [@-1,142:142='p',<0>,600:13]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 translate 
        num, err:= strconv.ParseFloat($FLOAT_NUM.text, 64)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.FLOAT)
    
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,40:48='FLOAT_NUM',<0>,603:39].[@-1,50:53='text',<0>,603:49]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 attr [@-1,131:131='p',<0>,607:9]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 translate 
        num, err:= strconv.ParseBool($op.text)
        if err != nil{
            fmt.Println(err)
        }
        $p = expresion.NewPrimitivo(num, interfaces.BOOLEAN)
    
2022-04-05 00:45:22:975 action-translator LogManager.java:25 qattr [@-1,39:40='op',<0>,610:38].[@-1,42:45='text',<0>,610:41]
2022-04-05 00:45:22:975 action-translator LogManager.java:25 attr [@-1,119:119='p',<0>,614:9]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 translate  
        str:= $CADENA.text[1:len($CADENA.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.STR)
     
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,17:22='CADENA',<0>,617:15].[@-1,24:27='text',<0>,617:22]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,36:41='CADENA',<0>,617:34].[@-1,43:46='text',<0>,617:41]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 attr [@-1,61:61='p',<0>,618:9]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 translate 
        str:= $CHAR_2.text[1:len($CHAR_2.text)-1]
        $p = expresion.NewPrimitivo(str, interfaces.CHAR)
    
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,16:21='CHAR_2',<0>,621:15].[@-1,23:26='text',<0>,621:22]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,35:40='CHAR_2',<0>,621:34].[@-1,42:45='text',<0>,621:41]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 attr [@-1,60:60='p',<0>,622:9]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 translate  $p = $list_array.p 
2022-04-05 00:45:22:976 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,624:19]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,7:16='list_array',<0>,624:24].[@-1,18:18='p',<0>,624:35]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:976 action-translator LogManager.java:25 translate   $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) 
2022-04-05 00:45:22:976 action-translator LogManager.java:25 attr [@-1,3:3='p',<0>,2:36]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,2:67].[@-1,37:40='text',<0>,2:70]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:76].[@-1,46:49='line',<0>,2:79]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:85].[@-1,55:57='pos',<0>,2:88]
2022-04-05 00:45:22:976 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:977 action-translator LogManager.java:25 translate  $p = arrays.NewArrayAccess($li.p, $expression.p, $CORCHA.line, $CORCHC.pos) 
2022-04-05 00:45:22:977 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:136]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,29:30='li',<0>,5:163].[@-1,32:32='p',<0>,5:166]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,36:45='expression',<0>,5:170].[@-1,47:47='p',<0>,5:181]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,51:56='CORCHA',<0>,5:185].[@-1,58:61='line',<0>,5:192]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,65:70='CORCHC',<0>,5:199].[@-1,72:74='pos',<0>,5:206]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:977 action-translator LogManager.java:25 translate 
2022-04-05 00:45:22:977 action-translator LogManager.java:25 translate   $p = expresion.NewCallVariable($ID.text,$ID.line,$ID.pos) 
2022-04-05 00:45:22:977 action-translator LogManager.java:25 attr [@-1,3:3='p',<0>,2:37]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,2:68].[@-1,37:40='text',<0>,2:71]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:77].[@-1,46:49='line',<0>,2:80]
2022-04-05 00:45:22:977 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:86].[@-1,55:57='pos',<0>,2:89]
2022-04-05 00:45:22:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:22:978 action-translator LogManager.java:25 translate  $p = structs.NewStruct_Acces( $li.p, $id2.text, $PNT.line, $PNT.pos ) 
2022-04-05 00:45:22:978 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:105]
2022-04-05 00:45:22:978 action-translator LogManager.java:25 qattr [@-1,32:33='li',<0>,5:135].[@-1,35:35='p',<0>,5:138]
2022-04-05 00:45:22:978 action-translator LogManager.java:25 qattr [@-1,39:41='id2',<0>,5:142].[@-1,43:46='text',<0>,5:146]
2022-04-05 00:45:22:978 action-translator LogManager.java:25 qattr [@-1,50:52='PNT',<0>,5:153].[@-1,54:57='line',<0>,5:157]
2022-04-05 00:45:22:978 action-translator LogManager.java:25 qattr [@-1,61:63='PNT',<0>,5:164].[@-1,65:67='pos',<0>,5:168]
2022-04-05 00:45:22:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-05 00:45:23:392 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-04-05 00:45:23:392 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-04-05 00:45:23:447 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

2022-04-05 00:45:23:448 action-translator LogManager.java:25 translate  
    import "LAB1/Clases/interfaces"
    import "LAB1/Clases/expresion"
    import "LAB1/Clases/expresion/Operaciones"
    import "LAB1/Clases/expresion/Sentencias_Expr"
    import "LAB1/Clases/expresion/Sentencias_Expr/Match_Expr"
    import "LAB1/Clases/expresion/Arrays"
    import "LAB1/Clases/expresion/Vector"
    import "LAB1/Clases/expresion/Casteos"
    import "LAB1/Clases/instruction"
    import "LAB1/Clases/instruction/sentenciacontrol"
    import "LAB1/Clases/instruction/SentenciaCiclica"
    import "LAB1/Clases/instruction/SentenciaTransferencia"
    import "LAB1/Clases/instruction/SentenciaControl/Match"
    import "LAB1/Clases/instruction/FuncionesVectores"
    import "LAB1/Clases/instruction/FuncionesNativas"
    import "LAB1/Clases/instruction/Structs"
    import "LAB1/Clases/instruction/Modulos"
    import "LAB1/Clases/Structs_inter"

    import arrayList "github.com/colegno/arraylist"

